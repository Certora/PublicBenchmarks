(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_UFDTNRA)
(declare-fun uninterp_frac (Real Real) Real)
(define-fun axiom_frac_bound ((d1 Real) (d2 Real)) Bool (and (=> (> d2 0) (and (<= 0.0 (uninterp_frac d1 d2)) (< (uninterp_frac d1 d2) 1.0))) (=> (< d2 0) (and (>= 0.0 (uninterp_frac d1 d2)) (> (uninterp_frac d1 d2) (- 1.0))))))
(define-fun axiom_frac_zero ((d1 Real) (d2 Real) (m1 Real) (m2 Real) (e Real)) Bool (=> (and (= d1 (* m1 m2)) (or (= d2 m1) (= d2 m2))) (= e 0)))
(define-fun uninterp_mod ((x Real) (m Real)) Real (ite (and (>= x 0) (< x m)) x (ite (and (>= x m) (< x (+ m m))) (- x m) (ite (and (>= x (- m)) (< x 0)) (+ x m) (* m (uninterp_frac x m))))))
(define-fun axiom_int_approximation ((x Real)) Bool (or (= x 0) (>= x 1) (<= x (- 1))))
(declare-datatypes ((x538 0)) (((x495 (x166 x538) (x1333 x538) (x1584 Real)) (x1666 (x1329 Real)) (x1011 (x1323 x538) (x207 Real)))))
(declare-fun x1854 () Real)
(declare-fun x717 () Real)
(declare-fun x36 () x538)
(declare-fun x1125 (Real) Real)
(declare-fun x169 () x538)
(declare-fun x1312 () Real)
(declare-fun x1895 () Bool)
(declare-fun x1604 () x538)
(declare-fun x934 () x538)
(declare-fun x1913 () x538)
(declare-fun x369 () Real)
(declare-fun x1491 () x538)
(declare-fun x117 () x538)
(declare-fun x421 () Bool)
(declare-fun x1336 () Real)
(declare-fun x491 () Bool)
(declare-fun x897 () Bool)
(declare-fun x315 () Real)
(declare-fun x850 () Bool)
(declare-fun x1391 () x538)
(declare-fun x1405 () Real)
(declare-fun x1185 () Real)
(declare-fun x784 () Real)
(declare-fun x1608 () Real)
(declare-fun x609 () Bool)
(declare-fun x137 () Real)
(declare-fun x814 () Real)
(declare-fun x1092 () x538)
(declare-fun x283 (Real) Real)
(declare-fun x532 () Bool)
(declare-fun x794 () Bool)
(declare-fun x371 (Real) Real)
(declare-fun x149 (x538) Real)
(declare-fun x690 () Real)
(declare-fun x983 () Real)
(declare-fun x497 () Bool)
(declare-fun x1759 () x538)
(declare-fun x805 () Real)
(declare-fun x131 () Real)
(declare-fun x1345 () Real)
(declare-fun x106 () Real)
(declare-fun x1558 () Bool)
(declare-fun x1052 () Bool)
(declare-fun x196 () Bool)
(declare-fun x1835 () Real)
(declare-fun x292 () Bool)
(declare-fun x896 () Bool)
(declare-fun x1186 () Bool)
(declare-fun x1171 () Bool)
(declare-fun x401 () Real)
(declare-fun x1654 () Real)
(declare-fun x1540 () Bool)
(declare-fun x526 () Bool)
(declare-fun x851 () Real)
(declare-fun x935 () Real)
(declare-fun x1783 () Real)
(declare-fun x1190 () Bool)
(declare-fun x745 () Real)
(declare-fun x243 () Bool)
(declare-fun x1214 () Real)
(declare-fun x1046 () Bool)
(declare-fun x1357 () Bool)
(declare-fun x1144 () Real)
(declare-fun x560 () x538)
(declare-fun x289 () x538)
(declare-fun x657 () Real)
(declare-fun x725 () Real)
(declare-fun x1833 () Bool)
(declare-fun x593 () Real)
(declare-fun x258 () Real)
(declare-fun x802 () Real)
(declare-fun x1347 () Real)
(declare-fun x1757 () Real)
(declare-fun x534 () x538)
(declare-fun x518 () Bool)
(declare-fun x1126 () Real)
(declare-fun x722 () Real)
(declare-fun x402 () Real)
(declare-fun x971 () Real)
(declare-fun x459 () Real)
(declare-fun x1875 () x538)
(declare-fun x1244 () Bool)
(declare-fun x1353 () Real)
(declare-fun x1134 () Real)
(declare-fun x963 () Bool)
(declare-fun x558 () Real)
(declare-fun x1173 () Real)
(declare-fun x1250 () Bool)
(declare-fun x988 () Real)
(declare-fun x1217 () x538)
(declare-fun x1528 () Real)
(declare-fun x232 () Real)
(declare-fun x726 () Real)
(declare-fun x1401 () Real)
(declare-fun x1812 () Real)
(declare-fun x577 () Bool)
(declare-fun x1453 () Bool)
(declare-fun x1849 () Real)
(declare-fun x628 (Real) Real)
(declare-fun x342 () Real)
(declare-fun x417 () Bool)
(declare-fun x721 () Bool)
(declare-fun x905 () Real)
(declare-fun x1559 () Bool)
(declare-fun x368 () x538)
(declare-fun x457 () Bool)
(declare-fun x1551 () Bool)
(declare-fun x1390 () Real)
(declare-fun x746 () Bool)
(declare-fun x265 () Bool)
(declare-fun x1458 () Real)
(declare-fun x975 () Bool)
(declare-fun x182 () Bool)
(declare-fun x463 () x538)
(declare-fun x1206 () Real)
(declare-fun x626 () Bool)
(declare-fun x1086 () Bool)
(declare-fun x1265 (Real) Real)
(declare-fun x1131 () Real)
(declare-fun x1710 () Real)
(declare-fun x1367 () Real)
(declare-fun x396 () Real)
(declare-fun x1295 () Real)
(declare-fun x1753 () Real)
(declare-fun x1563 () Real)
(declare-fun x1275 () Real)
(declare-fun x1908 () Real)
(declare-fun x748 () Real)
(declare-fun x627 () Bool)
(declare-fun x335 () Real)
(declare-fun x1352 () Bool)
(declare-fun x220 () Real)
(declare-fun x328 () Real)
(declare-fun x922 () Real)
(declare-fun x822 (Real) Real)
(declare-fun x1489 () Bool)
(declare-fun x413 () Real)
(declare-fun x375 () Bool)
(declare-fun x1417 () Real)
(declare-fun x1006 () Real)
(declare-fun x481 () Real)
(declare-fun x1150 () Bool)
(declare-fun x273 () Real)
(declare-fun x1314 () Bool)
(declare-fun x535 (Real) Real)
(declare-fun x1468 () Real)
(declare-fun x1260 () Real)
(declare-fun x608 () Bool)
(declare-fun x522 () Real)
(declare-fun x769 () Real)
(declare-fun x354 () Real)
(declare-fun x1032 () Real)
(declare-fun x1889 () Real)
(declare-fun x54 () Real)
(declare-fun x1549 () Real)
(declare-fun x404 () Real)
(declare-fun x1873 () Real)
(declare-fun x1661 () Real)
(declare-fun x1120 () x538)
(declare-fun x296 () Bool)
(declare-fun x1449 () Real)
(declare-fun x1237 () Real)
(declare-fun x62 () Bool)
(declare-fun x840 () x538)
(declare-fun x1327 () Real)
(declare-fun x1514 () x538)
(declare-fun x1397 () Real)
(declare-fun x1268 () Real)
(declare-fun x1459 () Real)
(declare-fun x1421 () Bool)
(declare-fun x489 (Real) Real)
(declare-fun x1709 () Bool)
(declare-fun x1431 () Real)
(declare-fun x1464 () Real)
(declare-fun x1014 () Real)
(declare-fun x1348 () x538)
(declare-fun x1140 () Real)
(declare-fun x1108 () Real)
(declare-fun x1488 () Real)
(declare-fun x230 () Real)
(declare-fun x1477 () x538)
(declare-fun x1337 () Real)
(declare-fun x875 () Real)
(declare-fun x505 () Real)
(declare-fun x433 () Real)
(declare-fun x1079 () Real)
(declare-fun x452 (Real) Real)
(declare-fun x379 () Real)
(declare-fun x1147 () Real)
(declare-fun x852 () Real)
(declare-fun x1659 () Real)
(declare-fun x424 () Real)
(declare-fun x1890 () x538)
(declare-fun x998 () Real)
(declare-fun x352 () Real)
(declare-fun x1851 () x538)
(declare-fun x1408 () Real)
(declare-fun x1673 () Real)
(declare-fun x1280 () Real)
(declare-fun x865 () x538)
(declare-fun x1165 () Real)
(declare-fun x1000 () x538)
(declare-fun x1228 () Bool)
(declare-fun x268 () x538)
(declare-fun x61 (x538) Real)
(declare-fun x1471 () Real)
(declare-fun x1208 () Real)
(declare-fun x1436 () Bool)
(declare-fun x1626 () Real)
(declare-fun x1838 () Bool)
(declare-fun x982 () Bool)
(declare-fun x839 () Bool)
(declare-fun x669 () Bool)
(declare-fun x85 () Real)
(declare-fun x82 () Real)
(declare-fun x842 (Real) Real)
(declare-fun x256 () x538)
(declare-fun x701 () Bool)
(declare-fun x158 () Real)
(declare-fun x327 () Real)
(declare-fun x241 () x538)
(declare-fun x709 () Real)
(declare-fun x187 () x538)
(declare-fun x1309 () Real)
(declare-fun x1530 () Real)
(declare-fun x513 () Real)
(declare-fun x574 () Real)
(declare-fun x1216 () Bool)
(declare-fun x484 () Bool)
(declare-fun x1781 () Real)
(declare-fun x712 () Real)
(declare-fun x444 () Real)
(declare-fun x1363 () Real)
(declare-fun x69 () Bool)
(declare-fun x231 () Real)
(declare-fun x995 () x538)
(declare-fun x246 () x538)
(declare-fun x425 () Bool)
(declare-fun x473 () Bool)
(declare-fun x323 () Real)
(declare-fun x966 () Bool)
(declare-fun x302 () Bool)
(declare-fun x111 () Real)
(declare-fun x691 () Real)
(declare-fun x357 () x538)
(declare-fun x1779 () Real)
(declare-fun x1371 () Real)
(declare-fun x20 () Bool)
(declare-fun x679 () Real)
(declare-fun x568 () x538)
(declare-fun x976 () Real)
(declare-fun x215 () Real)
(declare-fun x27 () Real)
(declare-fun x1273 () Bool)
(declare-fun x115 () Bool)
(declare-fun x1516 () Real)
(declare-fun x1848 () Real)
(declare-fun x441 (Real) Real)
(declare-fun x1290 () Real)
(declare-fun x1635 (Real) Real)
(declare-fun x927 () Real)
(declare-fun x596 () Real)
(declare-fun x925 () Real)
(declare-fun x1318 () Real)
(declare-fun x591 () Bool)
(declare-fun x1393 () x538)
(declare-fun x1886 () Bool)
(declare-fun x636 () Bool)
(declare-fun x1307 () Real)
(declare-fun x964 () x538)
(declare-fun x1585 () Real)
(declare-fun x403 () Bool)
(declare-fun x235 () Bool)
(declare-fun x1277 () Real)
(declare-fun x741 () Bool)
(declare-fun x1364 () Real)
(declare-fun x1548 () Real)
(declare-fun x980 () x538)
(declare-fun x968 () Real)
(declare-fun x938 () Real)
(declare-fun x96 () Real)
(declare-fun x88 () Bool)
(declare-fun x466 () Real)
(declare-fun x276 () Bool)
(declare-fun x804 () Real)
(declare-fun x1512 () Real)
(declare-fun x1040 () Real)
(declare-fun x872 () Bool)
(declare-fun x610 () Real)
(declare-fun x1200 () Real)
(declare-fun x1810 () Real)
(declare-fun x1135 () Real)
(declare-fun x1 () Real)
(declare-fun x1306 () Real)
(declare-fun x1860 () x538)
(declare-fun x695 () x538)
(declare-fun x1101 () Real)
(declare-fun x300 () Real)
(declare-fun x1496 () Bool)
(declare-fun x604 () Real)
(declare-fun x1343 () Bool)
(declare-fun x1074 () Bool)
(declare-fun x214 () Bool)
(declare-fun x871 () Bool)
(declare-fun x780 () Bool)
(declare-fun x474 () Real)
(declare-fun x456 () Real)
(declare-fun x1852 () Real)
(declare-fun x984 () Real)
(declare-fun x1241 () Real)
(declare-fun x1784 () Bool)
(declare-fun x1198 () Bool)
(declare-fun x359 () x538)
(declare-fun x555 () x538)
(declare-fun x1039 () Real)
(declare-fun x21 () Real)
(declare-fun x1819 () Real)
(declare-fun x1076 () Real)
(declare-fun x1326 () Bool)
(declare-fun x1739 () Bool)
(declare-fun x345 () Real)
(declare-fun x1735 () Real)
(declare-fun x380 () Bool)
(declare-fun x1197 () Real)
(declare-fun x1555 () Real)
(declare-fun x1400 () Real)
(declare-fun x716 () Real)
(declare-fun x501 () Real)
(declare-fun x1839 () x538)
(declare-fun x634 () Bool)
(declare-fun x1556 () Real)
(declare-fun x1744 () Bool)
(declare-fun x181 () Bool)
(declare-fun x1038 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x1788 () Bool)
(declare-fun x57 () Bool)
(declare-fun x751 () Bool)
(declare-fun x666 () Bool)
(declare-fun x1834 () Real)
(declare-fun x324 () Real)
(declare-fun x1723 () Real)
(declare-fun x1628 () Real)
(declare-fun x1616 () Real)
(declare-fun x1543 () Real)
(declare-fun x955 () x538)
(declare-fun x238 () Bool)
(declare-fun x1446 () Real)
(declare-fun x567 () Bool)
(declare-fun x281 (Real) Real)
(declare-fun x1203 () Real)
(declare-fun x960 () Bool)
(declare-fun x464 () Real)
(declare-fun x395 () Real)
(declare-fun x1164 () Real)
(declare-fun x492 (x538) Real)
(declare-fun x1020 () Bool)
(declare-fun x1619 () Real)
(declare-fun x1179 () Real)
(declare-fun x1267 () Real)
(declare-fun x914 () Real)
(declare-fun x792 () Real)
(declare-fun x278 () Real)
(declare-fun x1238 () Real)
(declare-fun x89 () Real)
(declare-fun x1375 () Real)
(declare-fun x1758 () x538)
(declare-fun x874 () Bool)
(declare-fun x1088 () Bool)
(declare-fun x1910 () Bool)
(declare-fun x1856 () Real)
(declare-fun x749 () Real)
(declare-fun x1774 () Bool)
(declare-fun x472 () Bool)
(declare-fun x890 () Real)
(declare-fun x267 () Real)
(declare-fun x509 () Real)
(declare-fun x1832 () Bool)
(declare-fun x637 () Real)
(declare-fun x823 () Real)
(declare-fun x1545 () Real)
(declare-fun x799 () Real)
(declare-fun x1419 () x538)
(declare-fun x333 () Real)
(declare-fun x561 () Bool)
(declare-fun x249 () Real)
(declare-fun x1466 () Real)
(declare-fun x718 () Real)
(declare-fun x579 () Bool)
(declare-fun x589 () Real)
(declare-fun x1264 () Bool)
(declare-fun x1790 () Real)
(declare-fun x1077 () Real)
(declare-fun x523 () Real)
(declare-fun x334 () Real)
(declare-fun x1373 () Bool)
(declare-fun x386 () Bool)
(declare-fun x351 () x538)
(declare-fun x950 () x538)
(declare-fun x598 (Real) Real)
(declare-fun x1292 () Real)
(declare-fun x1902 () Bool)
(declare-fun x186 () Bool)
(declare-fun x1012 () Bool)
(declare-fun x150 (Real) Real)
(declare-fun x504 () Bool)
(declare-fun x1791 () Real)
(declare-fun x1525 () Real)
(declare-fun x857 () Bool)
(declare-fun x1846 () Real)
(declare-fun x527 () Real)
(declare-fun x1379 () Real)
(declare-fun x378 () Real)
(declare-fun x1697 () Bool)
(declare-fun x1080 () Bool)
(declare-fun x1869 () Bool)
(declare-fun x1862 () Bool)
(declare-fun x1180 () Bool)
(declare-fun x372 () Real)
(declare-fun x110 () Bool)
(declare-fun x1438 () x538)
(declare-fun x867 () Real)
(declare-fun x970 () Real)
(declare-fun x1116 () Bool)
(declare-fun x1254 () x538)
(declare-fun x711 () x538)
(declare-fun x1487 () Real)
(declare-fun x973 () Real)
(declare-fun x594 () Real)
(declare-fun x1490 () Real)
(declare-fun x307 () Real)
(declare-fun x445 () x538)
(declare-fun x660 () Real)
(declare-fun x486 () Real)
(declare-fun x1750 () Bool)
(declare-fun x68 () x538)
(declare-fun x1575 () Bool)
(declare-fun x893 () Bool)
(declare-fun x1680 () Bool)
(declare-fun x858 () Bool)
(declare-fun x1291 () Bool)
(declare-fun x529 () Bool)
(declare-fun x1437 () Real)
(declare-fun x294 () Real)
(declare-fun x1170 () Real)
(declare-fun x547 () Real)
(declare-fun x411 () Bool)
(declare-fun x1683 () Real)
(declare-fun x757 () Real)
(declare-fun x891 () Real)
(declare-fun x677 () Real)
(declare-fun x1824 () Real)
(declare-fun x135 () x538)
(declare-fun x1639 () Real)
(declare-fun x820 () Real)
(declare-fun x1226 () x538)
(declare-fun x1712 () Real)
(declare-fun x319 (x538) Real)
(declare-fun x288 () Real)
(declare-fun x291 () Bool)
(declare-fun x1681 () Bool)
(declare-fun x1119 () Real)
(declare-fun x1372 () Real)
(declare-fun x844 () Bool)
(declare-fun x221 () Bool)
(declare-fun x743 () Real)
(declare-fun x64 () Bool)
(declare-fun x681 () Real)
(declare-fun x1218 () Real)
(declare-fun x87 () Bool)
(declare-fun x1427 () Real)
(declare-fun x129 () Bool)
(declare-fun x621 () Real)
(declare-fun x999 () x538)
(declare-fun x329 () Real)
(declare-fun x1202 () Real)
(declare-fun x1577 () Real)
(declare-fun x274 () Bool)
(declare-fun x958 () Real)
(declare-fun x1670 () x538)
(declare-fun x1711 () Real)
(declare-fun x197 () Real)
(declare-fun x816 () Real)
(declare-fun x1089 (Real) Real)
(declare-fun x1553 () Bool)
(declare-fun x11 (Real) Real)
(declare-fun x1297 (x538) Real)
(declare-fun x1414 () Real)
(declare-fun x155 () Bool)
(declare-fun x763 () Bool)
(declare-fun x1365 () Bool)
(declare-fun x1678 () Bool)
(declare-fun x205 () x538)
(declare-fun x1664 () Bool)
(declare-fun x834 () Bool)
(declare-fun x347 () Real)
(declare-fun x785 () Real)
(declare-fun x1699 () Real)
(declare-fun x247 () Bool)
(declare-fun x458 () Real)
(declare-fun x128 () Real)
(declare-fun x943 () Real)
(declare-fun x490 () Bool)
(declare-fun x1075 () Real)
(declare-fun x72 () Bool)
(declare-fun x127 () Real)
(declare-fun x1069 () Real)
(declare-fun x877 () Bool)
(declare-fun x1899 () Bool)
(declare-fun x694 () Bool)
(declare-fun x1051 () Real)
(declare-fun x1798 () x538)
(declare-fun x454 () x538)
(declare-fun x587 () Real)
(declare-fun x229 (x538) Real)
(declare-fun x647 () Bool)
(declare-fun x933 () Real)
(declare-fun x1411 () Real)
(declare-fun x147 () Real)
(declare-fun x1751 () Real)
(declare-fun x56 (x538) Real)
(declare-fun x733 () Real)
(declare-fun x1857 () Real)
(declare-fun x570 () Real)
(declare-fun x1042 () Real)
(declare-fun x1204 () Real)
(declare-fun x1300 () Bool)
(declare-fun x790 () Real)
(declare-fun x1053 () Bool)
(declare-fun x493 () Real)
(declare-fun x1631 () x538)
(declare-fun x1361 () Real)
(declare-fun x573 () Bool)
(declare-fun x1196 () Bool)
(declare-fun x120 () x538)
(declare-fun x740 () Bool)
(declare-fun x1837 () Real)
(declare-fun x1762 () Real)
(declare-fun x1058 () Real)
(declare-fun x66 () Real)
(declare-fun x886 () Bool)
(declare-fun x506 () Real)
(declare-fun x936 () Bool)
(declare-fun x742 () Bool)
(declare-fun x525 () Real)
(declare-fun x1451 () Real)
(declare-fun x1876 () Real)
(declare-fun x1004 () Bool)
(declare-fun x800 () Bool)
(declare-fun x1073 () Bool)
(declare-fun x1301 () Real)
(declare-fun x210 (Real) Real)
(declare-fun x1546 () Bool)
(declare-fun x1271 () Bool)
(declare-fun x1243 () Real)
(declare-fun x1366 () Bool)
(declare-fun x572 () Real)
(declare-fun x1005 () Real)
(declare-fun x1747 () Real)
(declare-fun x1149 () Real)
(declare-fun x831 () Real)
(declare-fun x1754 () Bool)
(declare-fun x702 () Real)
(declare-fun x863 () Bool)
(declare-fun x1904 () Bool)
(declare-fun x1455 () Real)
(declare-fun x1296 () Bool)
(declare-fun x1064 () Real)
(declare-fun x1481 () Real)
(declare-fun x1823 () Real)
(declare-fun x1907 () x538)
(declare-fun x228 () Real)
(declare-fun x1652 () Real)
(declare-fun x1745 () Real)
(declare-fun x1324 () Real)
(declare-fun x1398 () Bool)
(declare-fun x1518 (Real) Real)
(declare-fun x39 () x538)
(declare-fun x252 () Real)
(declare-fun x1729 () Real)
(declare-fun x1193 () Real)
(declare-fun x1457 () Bool)
(declare-fun x846 (Real) Real)
(declare-fun x332 () x538)
(declare-fun x1209 () Real)
(declare-fun x512 () Bool)
(declare-fun x1110 () Real)
(declare-fun x1178 () Real)
(declare-fun x1550 () x538)
(declare-fun x623 () x538)
(declare-fun x94 () Real)
(declare-fun x1151 () Real)
(declare-fun x1013 () x538)
(declare-fun x1590 () x538)
(declare-fun x381 () Real)
(declare-fun x269 (Real) Real)
(declare-fun x796 () x538)
(declare-fun x550 () Bool)
(declare-fun x870 () Real)
(declare-fun x913 () Bool)
(declare-fun x1793 () Real)
(declare-fun x144 () Real)
(declare-fun x789 () Bool)
(declare-fun x1721 () Bool)
(declare-fun x44 () Real)
(declare-fun x1434 () Real)
(declare-fun x103 () Real)
(declare-fun x201 () Real)
(declare-fun x1369 () Bool)
(declare-fun x435 () Bool)
(declare-fun x724 (Real) Real)
(declare-fun x450 () Real)
(declare-fun x1623 () Real)
(declare-fun x991 () Bool)
(declare-fun x1714 () Bool)
(declare-fun x1099 () Bool)
(declare-fun x185 () Real)
(declare-fun x1219 () Real)
(declare-fun x768 () Real)
(declare-fun x1801 () Bool)
(declare-fun x1085 () Real)
(declare-fun x136 () Real)
(declare-fun x1225 () Real)
(declare-fun x1818 () Real)
(declare-fun x1124 () Bool)
(declare-fun x618 () Real)
(declare-fun x1632 () Real)
(declare-fun x507 () Real)
(declare-fun x499 () Real)
(declare-fun x588 () Real)
(declare-fun x817 () Real)
(declare-fun x1461 () Real)
(declare-fun x1236 () Real)
(declare-fun x1777 () Bool)
(declare-fun x992 () Real)
(declare-fun x1002 () Real)
(declare-fun x723 () x538)
(declare-fun x1385 () Real)
(declare-fun x1211 () Bool)
(declare-fun x1215 () Bool)
(declare-fun x730 () x538)
(declare-fun x1564 () x538)
(declare-fun x1153 () Bool)
(declare-fun x373 () Real)
(declare-fun x1355 () x538)
(declare-fun x819 () Bool)
(declare-fun x632 () Bool)
(declare-fun x355 () Real)
(declare-fun x475 () Real)
(declare-fun x1841 () Real)
(declare-fun x1044 () Real)
(declare-fun x557 () x538)
(declare-fun x658 () Real)
(declare-fun x1520 () x538)
(declare-fun x1598 () Real)
(declare-fun x673 () Real)
(declare-fun x420 () Real)
(declare-fun x392 () Bool)
(declare-fun x916 (Real) Real)
(declare-fun x1599 () Real)
(declare-fun x1018 () Real)
(declare-fun x312 () Bool)
(declare-fun x959 () x538)
(declare-fun x946 () Bool)
(declare-fun x422 () Bool)
(declare-fun x683 () Real)
(declare-fun x1609 () Real)
(declare-fun x1059 () x538)
(declare-fun x1622 () Bool)
(declare-fun x1568 () Real)
(declare-fun x1261 () Bool)
(declare-fun x739 () x538)
(declare-fun x1167 () Real)
(declare-fun x861 () Real)
(declare-fun x1480 () Real)
(declare-fun x350 () x538)
(declare-fun x1114 () Bool)
(declare-fun x894 () x538)
(declare-fun x1191 () Real)
(declare-fun x969 () x538)
(declare-fun x1037 () x538)
(declare-fun x1497 () Real)
(declare-fun x92 () Real)
(declare-fun x91 () Real)
(declare-fun x1633 () Real)
(declare-fun x1166 () Real)
(declare-fun x1534 () Bool)
(declare-fun x1677 () Real)
(declare-fun x6 () Real)
(declare-fun x1133 () Real)
(declare-fun x316 () Real)
(declare-fun x1533 () Real)
(declare-fun x178 () Bool)
(declare-fun x947 () Bool)
(declare-fun x693 () x538)
(declare-fun x1224 () Real)
(declare-fun x1142 () Real)
(declare-fun x1010 () Real)
(declare-fun x917 () Real)
(declare-fun x1093 (Real) Real)
(declare-fun x206 () Bool)
(declare-fun x259 () Bool)
(declare-fun x1740 () Real)
(declare-fun x910 () Real)
(declare-fun x643 () x538)
(declare-fun x1026 () Real)
(declare-fun x1813 () Bool)
(declare-fun x1499 () Real)
(declare-fun x1047 () Bool)
(declare-fun x1826 () Real)
(declare-fun x1462 () Bool)
(declare-fun x5 (x538) Real)
(declare-fun x1515 () Real)
(declare-fun x1595 () Real)
(declare-fun x439 () Bool)
(declare-fun x617 () Real)
(declare-fun x1502 () Real)
(declare-fun x1022 () x538)
(declare-fun x30 () Bool)
(declare-fun x193 () Bool)
(declare-fun x1573 () x538)
(declare-fun x1763 () x538)
(declare-fun x571 () Real)
(declare-fun x412 () Real)
(declare-fun x1722 () Real)
(declare-fun x1095 () Real)
(declare-fun x1235 () Bool)
(declare-fun x73 () Bool)
(declare-fun x703 () Bool)
(declare-fun x649 () Real)
(declare-fun x1685 () x538)
(declare-fun x500 () Bool)
(declare-fun x109 () Real)
(declare-fun x1029 () Bool)
(declare-fun x1320 () Real)
(declare-fun x37 () Real)
(declare-fun x55 (Real) Real)
(declare-fun x1083 () Bool)
(declare-fun x961 () Real)
(declare-fun x1532 () Bool)
(declare-fun x1160 () Bool)
(declare-fun x1432 () Real)
(declare-fun x1519 () Bool)
(declare-fun x125 () Real)
(declare-fun x317 () Bool)
(declare-fun x900 () Real)
(declare-fun x1715 () Bool)
(declare-fun x1863 () Real)
(declare-fun x32 () Real)
(declare-fun x390 () Real)
(declare-fun x1708 () Bool)
(declare-fun x1360 () Bool)
(declare-fun x15 () Real)
(declare-fun x1541 () Real)
(declare-fun x1557 () x538)
(declare-fun x644 () Real)
(declare-fun x233 () Bool)
(declare-fun x1100 () x538)
(declare-fun x406 () Real)
(declare-fun x175 () Bool)
(declare-fun x108 () Real)
(declare-fun x808 (x538) Real)
(declare-fun x1112 () Bool)
(declare-fun x1501 () Real)
(declare-fun x1141 () x538)
(declare-fun x204 (x538) Real)
(declare-fun x1410 () Real)
(declare-fun x1248 () Bool)
(declare-fun x1065 () Real)
(declare-fun x236 () Real)
(declare-fun x684 () Real)
(declare-fun x1447 () x538)
(declare-fun x213 () Real)
(declare-fun x655 () Bool)
(declare-fun x1717 () Real)
(declare-fun x1517 () Real)
(declare-fun x80 () Real)
(declare-fun x592 () Bool)
(declare-fun x1231 () Real)
(declare-fun x438 () Real)
(declare-fun x761 () Real)
(declare-fun x1506 () x538)
(declare-fun x1230 (Real) Real)
(declare-fun x1743 () Real)
(declare-fun x202 () Real)
(declare-fun x427 () Real)
(declare-fun x1386 () Bool)
(declare-fun x777 () Real)
(declare-fun x398 () Bool)
(declare-fun x855 () Real)
(declare-fun x1242 () Real)
(declare-fun x479 () Real)
(declare-fun x152 () x538)
(declare-fun x1565 () Bool)
(declare-fun x1177 () Real)
(declare-fun x1027 () x538)
(declare-fun x405 () Real)
(declare-fun x25 () Real)
(declare-fun x1588 () Bool)
(declare-fun x1443 () Real)
(declare-fun x762 () Bool)
(declare-fun x299 () Real)
(declare-fun x1395 () Bool)
(declare-fun x1894 () Real)
(declare-fun x754 () Bool)
(declare-fun x899 () Real)
(declare-fun x408 () Real)
(declare-fun x706 () x538)
(declare-fun x1122 () Real)
(declare-fun x1252 () Bool)
(declare-fun x126 () Bool)
(declare-fun x1572 () Real)
(declare-fun x670 () Bool)
(declare-fun x156 () Bool)
(declare-fun x952 () Real)
(declare-fun x828 () Bool)
(declare-fun x1782 () Real)
(declare-fun x1755 () Bool)
(declare-fun x209 () Bool)
(declare-fun x1537 () Bool)
(declare-fun x1536 () Real)
(declare-fun x941 () Real)
(declare-fun x46 () Real)
(declare-fun x1423 () Real)
(declare-fun x478 () Real)
(declare-fun x772 () Bool)
(declare-fun x51 () Bool)
(declare-fun x924 () Bool)
(declare-fun x921 () Real)
(declare-fun x1017 (Real) Real)
(declare-fun x615 () Real)
(declare-fun x781 () x538)
(declare-fun x1507 () Real)
(declare-fun x1407 () Real)
(declare-fun x40 () Real)
(declare-fun x431 (Real) Real)
(declare-fun x1130 () Real)
(declare-fun x1874 () Bool)
(declare-fun x295 () Real)
(declare-fun x942 () Bool)
(declare-fun x1412 () x538)
(declare-fun x1094 () Bool)
(declare-fun x556 () x538)
(declare-fun x298 () Bool)
(declare-fun x1741 () Real)
(declare-fun x997 () Real)
(declare-fun x569 () x538)
(declare-fun x519 () Real)
(declare-fun x416 () x538)
(declare-fun x1063 () Real)
(declare-fun x543 () Bool)
(declare-fun x1139 () Real)
(declare-fun x1756 () Real)
(declare-fun x782 () Bool)
(declare-fun x1162 () Bool)
(declare-fun x1008 () Real)
(declare-fun x353 () Bool)
(declare-fun x705 () Real)
(declare-fun x1804 () Real)
(declare-fun x1055 () Real)
(declare-fun x240 () Bool)
(declare-fun x1161 () Bool)
(declare-fun x645 () Bool)
(declare-fun x1057 () Bool)
(declare-fun x1771 () x538)
(declare-fun x1452 () Real)
(declare-fun x680 () Real)
(declare-fun x1381 () x538)
(declare-fun x1378 (x538) Real)
(declare-fun x118 () Real)
(declare-fun x1687 () Bool)
(declare-fun x710 () Real)
(declare-fun x1495 () Real)
(declare-fun x536 () Real)
(declare-fun x1233 () Real)
(declare-fun x597 () Real)
(declare-fun x1761 () Real)
(declare-fun x1592 () Real)
(declare-fun x168 () Bool)
(declare-fun x1912 () x538)
(declare-fun x1316 () Real)
(declare-fun x612 () Real)
(declare-fun x1865 () Bool)
(declare-fun x1278 () Real)
(declare-fun x1897 () Real)
(declare-fun x646 () x538)
(declare-fun x1665 () Real)
(declare-fun x1594 () x538)
(declare-fun x764 () Bool)
(declare-fun x1694 () Real)
(declare-fun x908 () Real)
(declare-fun x1374 () Real)
(declare-fun x1785 () Real)
(declare-fun x1828 () Real)
(declare-fun x1377 () Real)
(declare-fun x423 () Bool)
(declare-fun x954 () Bool)
(declare-fun x244 () Real)
(declare-fun x838 () Real)
(declare-fun x1538 () Bool)
(declare-fun x1015 () Real)
(declare-fun x165 () x538)
(declare-fun x1803 () Real)
(declare-fun x704 () x538)
(declare-fun x1430 () Bool)
(declare-fun x50 () Real)
(declare-fun x771 () x538)
(declare-fun x1578 () Bool)
(declare-fun x1249 () Real)
(declare-fun x635 () Real)
(declare-fun x584 () Bool)
(declare-fun x1716 () Real)
(declare-fun x314 () Real)
(declare-fun x810 () Bool)
(declare-fun x356 () Real)
(declare-fun x1138 () Bool)
(declare-fun x807 () Real)
(declare-fun x1574 () x538)
(declare-fun x254 () x538)
(declare-fun x1105 () Bool)
(declare-fun x1650 (x538) Real)
(declare-fun x77 () Real)
(declare-fun x1078 () Real)
(declare-fun x1118 () Real)
(declare-fun x1406 () Bool)
(declare-fun x1049 () x538)
(declare-fun x400 () Real)
(declare-fun x164 () x538)
(declare-fun x1691 () Real)
(declare-fun x1359 () Bool)
(declare-fun x653 (Real) Real)
(declare-fun x1389 (x538) Real)
(declare-fun x177 () Bool)
(declare-fun x697 () Bool)
(declare-fun x827 () Real)
(declare-fun x1591 () Bool)
(declare-fun x76 () Real)
(declare-fun x304 () Real)
(declare-fun x783 () Real)
(declare-fun x554 () Real)
(declare-fun x17 () x538)
(declare-fun x940 () Bool)
(declare-fun x1030 () Real)
(declare-fun x926 () Real)
(declare-fun x678 () Real)
(declare-fun x1576 () x538)
(declare-fun x1686 () Real)
(declare-fun x1184 () x538)
(declare-fun x909 (x538) Real)
(declare-fun x1370 () Real)
(declare-fun x883 () Bool)
(declare-fun x1276 () Real)
(declare-fun x1724 () Bool)
(declare-fun x53 () Bool)
(declare-fun x1435 (Real) Real)
(declare-fun x849 () Real)
(declare-fun x1003 (Real) Real)
(declare-fun x1019 () Real)
(declare-fun x1272 () x538)
(declare-fun x1583 () Bool)
(declare-fun x1485 () Real)
(declare-fun x962 () Real)
(declare-fun x99 () Real)
(declare-fun x1199 () Real)
(declare-fun x338 () Real)
(declare-fun x157 () Real)
(declare-fun x1641 () Real)
(declare-fun x320 () Real)
(declare-fun x1102 () Bool)
(declare-fun x1580 () Real)
(declare-fun x496 () Bool)
(declare-fun x1602 () Real)
(declare-fun x1892 () Real)
(declare-fun x1620 () Real)
(declare-fun x1610 () Real)
(declare-fun x1789 () Real)
(declare-fun x226 () Real)
(declare-fun x12 () Real)
(declare-fun x1773 () Real)
(declare-fun x339 () Real)
(declare-fun x1786 () Real)
(declare-fun x1387 () Real)
(declare-fun x1339 () x538)
(declare-fun x1158 () x538)
(declare-fun x1067 (x538) Real)
(declare-fun x907 () Real)
(declare-fun x747 () Real)
(declare-fun x1840 () Real)
(declare-fun x217 () Bool)
(declare-fun x873 () Bool)
(declare-fun x1674 () Bool)
(declare-fun x707 () Bool)
(declare-fun x582 () Real)
(declare-fun x1253 () Real)
(declare-fun x1508 () Bool)
(declare-fun x190 () Real)
(declare-fun x533 () x538)
(declare-fun x1182 () Bool)
(declare-fun x476 () Bool)
(declare-fun x1627 () Real)
(declare-fun x1811 () Bool)
(declare-fun x967 () Real)
(declare-fun x385 () Bool)
(declare-fun x1649 () Real)
(declare-fun x1770 () Bool)
(declare-fun x1270 () Real)
(declare-fun x194 () Bool)
(declare-fun x881 () Bool)
(declare-fun x1900 () Real)
(declare-fun x358 () Bool)
(declare-fun x1188 () Bool)
(declare-fun x672 () x538)
(declare-fun x818 () Real)
(declare-fun x915 () Real)
(declare-fun x216 () Real)
(declare-fun x1795 (Real) Real)
(declare-fun x565 () x538)
(declare-fun x923 () Real)
(declare-fun x937 () Real)
(declare-fun x895 () Bool)
(declare-fun x510 () Real)
(declare-fun x1766 () Bool)
(declare-fun x1107 () Real)
(declare-fun x770 () Real)
(declare-fun x990 () Real)
(declare-fun x370 () Real)
(declare-fun x1637 () Real)
(declare-fun x1354 () Bool)
(declare-fun x502 () x538)
(declare-fun x619 () Bool)
(declare-fun x1281 (Real) Real)
(declare-fun x1293 () Real)
(declare-fun x786 () Real)
(declare-fun x1472 () Real)
(declare-fun x301 () x538)
(declare-fun x1322 (Real) Real)
(declare-fun x188 () Bool)
(declare-fun x1552 () Real)
(declare-fun x825 () Real)
(declare-fun x498 (Real) Real)
(declare-fun x1404 () Real)
(declare-fun x1845 () Real)
(declare-fun x514 () Real)
(declare-fun x546 () Real)
(declare-fun x620 () Real)
(declare-fun x415 () Real)
(declare-fun x19 () Real)
(declare-fun x1328 () Real)
(declare-fun x440 () x538)
(declare-fun x847 () Bool)
(declare-fun x242 () Real)
(declare-fun x1521 () Real)
(declare-fun x261 () Bool)
(declare-fun x1467 () Bool)
(declare-fun x451 () Bool)
(declare-fun x987 () Real)
(declare-fun x832 () Bool)
(declare-fun x578 () Real)
(declare-fun x866 () Bool)
(declare-fun x1663 () x538)
(declare-fun x113 () Bool)
(declare-fun x97 () Real)
(declare-fun x343 () Bool)
(declare-fun x1413 () x538)
(declare-fun x1341 () Real)
(declare-fun x266 () Bool)
(declare-fun x310 () Bool)
(declare-fun x1439 () Bool)
(declare-fun x758 () Bool)
(declare-fun x1529 () x538)
(declare-fun x26 () Real)
(declare-fun x731 () Real)
(declare-fun x625 () Bool)
(declare-fun x1621 () Real)
(declare-fun x1394 () Bool)
(declare-fun x1593 () Bool)
(declare-fun x1257 () Real)
(declare-fun x837 () Real)
(declare-fun x1433 () Real)
(declare-fun x1342 () Real)
(declare-fun x774 () Real)
(declare-fun x1836 () Real)
(declare-fun x31 (Real) Real)
(declare-fun x1294 () Real)
(declare-fun x1733 (Real) Real)
(declare-fun x1302 () Real)
(declare-fun x911 (Real) Real)
(declare-fun x1596 () Real)
(declare-fun x455 () Real)
(declare-fun x603 () Real)
(declare-fun x42 () Real)
(declare-fun x1221 () Real)
(declare-fun x1155 () x538)
(declare-fun x1738 () x538)
(declare-fun x1648 (x538) Real)
(declare-fun x904 () Real)
(declare-fun x1223 () Real)
(declare-fun x930 () Real)
(declare-fun x951 (x538) Real)
(declare-fun x889 () Real)
(declare-fun x71 () Real)
(declare-fun x199 () Real)
(declare-fun x880 () Real)
(declare-fun x1544 () Bool)
(declare-fun x1850 () Bool)
(declare-fun x1117 () Real)
(declare-fun x172 () Real)
(declare-fun x1569 (x538) Real)
(declare-fun x759 () Real)
(declare-fun x1308 () Real)
(declare-fun x1227 () Real)
(declare-fun x122 () Real)
(declare-fun x341 () x538)
(declare-fun x251 (x538) Real)
(declare-fun x928 () x538)
(declare-fun x1072 () Bool)
(declare-fun x1509 () Bool)
(declare-fun x282 () Real)
(declare-fun x674 () Bool)
(declare-fun x1376 () Real)
(declare-fun x1056 () Real)
(declare-fun x331 () x538)
(declare-fun x1465 () Bool)
(declare-fun x1698 () Real)
(declare-fun x270 () Real)
(declare-fun x1045 () Real)
(declare-fun x956 () Real)
(declare-fun x1511 () Real)
(declare-fun x13 () Bool)
(declare-fun x1704 () Real)
(declare-fun x1679 () Real)
(declare-fun x719 () Real)
(declare-fun x1473 () Real)
(declare-fun x1286 () Real)
(declare-fun x791 () Real)
(declare-fun x184 () Real)
(declare-fun x223 () Bool)
(declare-fun x112 () Real)
(declare-fun x1870 () Real)
(declare-fun x945 () Real)
(declare-fun x1727 () x538)
(declare-fun x1111 () Real)
(declare-fun x811 () x538)
(declare-fun x1746 () Real)
(declare-fun x145 () Bool)
(declare-fun x1883 () Real)
(declare-fun x639 () Real)
(declare-fun x843 () Bool)
(declare-fun x140 () Real)
(declare-fun x1009 () Real)
(declare-fun x161 () Real)
(declare-fun x1618 () Bool)
(declare-fun x95 () Real)
(declare-fun x1240 () Real)
(declare-fun x367 () Real)
(declare-fun x1586 () Real)
(declare-fun x1656 () Real)
(declare-fun x524 () x538)
(declare-fun x79 () Bool)
(declare-fun x1207 () Bool)
(declare-fun x143 () x538)
(declare-fun x1660 () Real)
(declare-fun x1581 () x538)
(declare-fun x1730 () Real)
(declare-fun x1070 () Real)
(declare-fun x884 () Real)
(declare-fun x1617 (Real) x538)
(declare-fun x1031 () Real)
(declare-fun x306 () Real)
(declare-fun x344 () Real)
(declare-fun x488 () Real)
(declare-fun x1644 () Real)
(declare-fun x537 () Real)
(declare-fun x1440 () Bool)
(declare-fun x1132 () Real)
(declare-fun x600 () Real)
(declare-fun x732 () Bool)
(declare-fun x638 () Bool)
(declare-fun x198 () Real)
(declare-fun x1587 () x538)
(declare-fun x160 () Real)
(declare-fun x4 () Real)
(declare-fun x1109 () Real)
(declare-fun x1642 () Real)
(declare-fun x74 () Real)
(declare-fun x104 () Bool)
(declare-fun x788 () Real)
(declare-fun x1855 () Real)
(declare-fun x736 () x538)
(declare-fun x1765 () x538)
(declare-fun x287 () Real)
(declare-fun x58 () Bool)
(declare-fun x1675 () Real)
(declare-fun x1263 () Real)
(declare-fun x23 () Real)
(declare-fun x1163 () Real)
(declare-fun x1145 () Real)
(declare-fun x585 (Real Real) Real)
(declare-fun x859 () Bool)
(declare-fun x257 () Real)
(declare-fun x1399 () Real)
(declare-fun x414 (x538) Real)
(declare-fun x1816 () Real)
(declare-fun x622 () x538)
(declare-fun x1612 () x538)
(declare-fun x981 () Real)
(declare-fun x1760 () Real)
(declare-fun x1796 () Real)
(declare-fun x1025 () Real)
(declare-fun x47 () Real)
(declare-fun x713 () Real)
(declare-fun x1313 () Bool)
(declare-fun x1174 () Real)
(declare-fun x1415 () Real)
(declare-fun x460 () x538)
(declare-fun x641 () Real)
(declare-fun x882 (Real) Real)
(declare-fun x1526 () Real)
(declare-fun x1880 (Real) Real)
(declare-fun x1901 () Real)
(declare-fun x154 () Real)
(declare-fun x685 () Real)
(declare-fun x775 (Real) Real)
(declare-fun x932 () Real)
(declare-fun x1143 () x538)
(declare-fun x629 () Bool)
(declare-fun x2 () Real)
(declare-fun x516 () Bool)
(declare-fun x264 () Bool)
(declare-fun x979 () Real)
(declare-fun x389 (Real) Real)
(declare-fun x340 () Real)
(declare-fun x1384 () Bool)
(declare-fun x469 () Bool)
(declare-fun x1522 () x538)
(declare-fun x1424 () x538)
(declare-fun x65 () Real)
(declare-fun x1780 () Bool)
(declare-fun x1703 () Real)
(declare-fun x1330 () Real)
(declare-fun x446 () Real)
(declare-fun x797 () Bool)
(declare-fun x563 () Bool)
(declare-fun x1350 () x538)
(declare-fun x614 () Bool)
(declare-fun x1887 () Bool)
(declare-fun x1428 () Real)
(declare-fun x1358 () Real)
(declare-fun x33 () Bool)
(declare-fun x1409 () Real)
(declare-fun x1319 () Real)
(declare-fun x1444 () Bool)
(declare-fun x237 () Real)
(declare-fun x698 () Real)
(declare-fun x1527 () Real)
(declare-fun x521 () x538)
(declare-fun x1220 () Real)
(declare-fun x1831 () x538)
(declare-fun x271 () Real)
(declare-fun x376 () Real)
(declare-fun x833 () Bool)
(declare-fun x1827 () x538)
(declare-fun x650 () Bool)
(declare-fun x531 (Real) Real)
(declare-fun x28 () Bool)
(declare-fun x978 () Bool)
(declare-fun x868 () Bool)
(declare-fun x885 () Bool)
(declare-fun x1239 () Bool)
(declare-fun x520 () Real)
(declare-fun x624 () Real)
(declare-fun x1737 () Real)
(declare-fun x901 () Bool)
(declare-fun x892 () Bool)
(declare-fun x1060 () x538)
(declare-fun x393 (Real) Real)
(declare-fun x63 () x538)
(declare-fun x1172 () Bool)
(declare-fun x1877 () x538)
(declare-fun x418 () Bool)
(declare-fun x159 () Real)
(declare-fun x676 () Real)
(declare-fun x530 () Real)
(declare-fun x387 () Real)
(declare-fun x286 () Real)
(declare-fun x1087 () Real)
(declare-fun x1607 () Real)
(declare-fun x362 () Bool)
(declare-fun x1258 () Bool)
(declare-fun x640 () Bool)
(declare-fun x225 () Bool)
(declare-fun x1156 () Real)
(declare-fun x1483 () Real)
(declare-fun x1416 () x538)
(declare-fun x750 () Real)
(declare-fun x1335 () Bool)
(declare-fun x83 () Real)
(declare-fun x1611 () Real)
(declare-fun x766 () Real)
(declare-fun x428 () Bool)
(declare-fun x929 () x538)
(declare-fun x663 () Bool)
(declare-fun x179 () Bool)
(declare-fun x1629 () Bool)
(declare-fun x1510 () Real)
(declare-fun x1692 () Bool)
(declare-fun x1285 () Real)
(declare-fun x363 () x538)
(declare-fun x1539 () Bool)
(declare-fun x1614 () Real)
(declare-fun x686 () Real)
(declare-fun x606 () Real)
(declare-fun x1403 (Real) Real)
(declare-fun x170 () Real)
(declare-fun x1418 () Real)
(declare-fun x9 () Real)
(declare-fun x1463 () Real)
(declare-fun x1380 () x538)
(declare-fun x1861 () Real)
(declare-fun x1603 () Real)
(declare-fun x1442 () Real)
(declare-fun x10 () Real)
(declare-fun x541 () Bool)
(declare-fun x661 () Real)
(declare-fun x1570 () Real)
(declare-fun x245 () Bool)
(declare-fun x708 () Real)
(declare-fun x1420 () Bool)
(declare-fun x41 () Real)
(declare-fun x1630 () Real)
(declare-fun x1023 () Real)
(declare-fun x656 () Bool)
(declare-fun x773 () Real)
(declare-fun x255 () Bool)
(declare-fun x121 () Bool)
(declare-fun x34 (Real) Real)
(declare-fun x1303 () Real)
(declare-fun x919 () x538)
(declare-fun x100 () Bool)
(declare-fun x1016 () x538)
(declare-fun x1524 () Real)
(declare-fun x1866 () x538)
(declare-fun x1872 () Real)
(declare-fun x1797 () Real)
(declare-fun x1776 () Real)
(declare-fun x1696 (Real) Real)
(declare-fun x1279 (Real) Real)
(declare-fun x1547 () Real)
(declare-fun x1878 () Real)
(declare-fun x1288 () x538)
(declare-fun x1168 () Real)
(declare-fun x699 () Bool)
(declare-fun x1115 (Real) Real)
(declare-fun x219 () Real)
(declare-fun x78 () Real)
(declare-fun x280 () Bool)
(declare-fun x364 () Bool)
(declare-fun x1814 () Bool)
(declare-fun x544 () x538)
(declare-fun x517 () Real)
(declare-fun x180 () x538)
(declare-fun x114 () Real)
(declare-fun x151 (Real) Real)
(declare-fun x14 () x538)
(declare-fun x183 () Real)
(declare-fun x654 () Real)
(declare-fun x1315 () Bool)
(declare-fun x528 () Real)
(declare-fun x752 (Real) Real)
(declare-fun x1201 () Real)
(declare-fun x1693 () Real)
(declare-fun x876 () Real)
(declare-fun x776 () Real)
(declare-fun x43 () x538)
(declare-fun x1799 () Real)
(declare-fun x234 () Real)
(declare-fun x1245 () Real)
(declare-fun x366 (Real Real) Real)
(declare-fun x1062 () x538)
(declare-fun x1567 () Bool)
(declare-fun x1792 () Bool)
(declare-fun x1084 () Real)
(declare-fun x480 () Bool)
(declare-fun x318 () Bool)
(declare-fun x1809 () Real)
(declare-fun x146 () Real)
(declare-fun x662 () x538)
(declare-fun x1482 () Real)
(declare-fun x651 () x538)
(declare-fun x953 () Real)
(declare-fun x1486 () Real)
(declare-fun x1858 () Bool)
(declare-fun x1282 () Real)
(declare-fun x957 () Real)
(declare-fun x248 () Real)
(declare-fun x388 () Real)
(declare-fun x134 () x538)
(declare-fun x1884 () Bool)
(declare-fun x93 () Bool)
(declare-fun x1289 () x538)
(declare-fun x1871 () Real)
(declare-fun x1121 () Real)
(declare-fun x1422 () Bool)
(declare-fun x1640 () Real)
(declare-fun x1021 () Bool)
(declare-fun x1720 () Bool)
(declare-fun x1624 () Real)
(declare-fun x24 () Real)
(declare-fun x1749 () x538)
(declare-fun x564 () Bool)
(declare-fun x1700 () x538)
(declare-fun x1210 (Real) Real)
(declare-fun x426 () Bool)
(declare-fun x1843 () Bool)
(declare-fun x1213 () Bool)
(declare-fun x503 () Bool)
(declare-fun x429 () Bool)
(declare-fun x382 () Real)
(declare-fun x1388 () x538)
(declare-fun x755 () Real)
(declare-fun x835 () Bool)
(declare-fun x602 () Real)
(declare-fun x1299 () Bool)
(declare-fun x652 () Real)
(declare-fun x1523 () x538)
(declare-fun x590 () Bool)
(declare-fun x1794 () Real)
(declare-fun x1829 (Real) Real)
(declare-fun x562 () Bool)
(declare-fun x8 () Real)
(declare-fun x1787 () Real)
(declare-fun x1815 () x538)
(declare-fun x173 () Bool)
(declare-fun x1662 () Bool)
(declare-fun x1853 () Bool)
(declare-fun x972 () Real)
(declare-fun x1600 () Real)
(declare-fun x1103 () x538)
(declare-fun x1589 () Bool)
(declare-fun x815 () Bool)
(declare-fun x779 () Real)
(declare-fun x734 () x538)
(declare-fun x888 () Real)
(declare-fun x1283 () Real)
(declare-fun x1091 () Bool)
(declare-fun x853 () Real)
(declare-fun x1613 () Bool)
(declare-fun x1605 () Bool)
(declare-fun x1082 () Bool)
(declare-fun x566 () x538)
(declare-fun x348 () Real)
(declare-fun x977 () x538)
(declare-fun x1362 () Real)
(declare-fun x1157 () Bool)
(declare-fun x948 () Bool)
(declare-fun x1136 () Real)
(declare-fun x581 () x538)
(declare-fun x1896 () Bool)
(declare-fun x1597 (Real) Real)
(declare-fun x765 () Real)
(declare-fun x920 () Real)
(declare-fun x1879 () Bool)
(declare-fun x1148 (Real) Real)
(declare-fun x1269 () Real)
(declare-fun x575 () x538)
(declare-fun x1340 () Bool)
(declare-fun x1454 () Real)
(declare-fun x559 () Real)
(declare-fun x436 () Real)
(declare-fun x1024 () x538)
(declare-fun x1061 () Bool)
(declare-fun x391 () Bool)
(declare-fun x1634 () Real)
(declare-fun x361 () Real)
(declare-fun x902 () Real)
(declare-fun x1034 () Real)
(declare-fun x688 (Real) Real)
(declare-fun x601 () Real)
(declare-fun x1054 () Real)
(declare-fun x203 () Bool)
(declare-fun x130 () Bool)
(declare-fun x508 () Real)
(declare-fun x515 () x538)
(declare-fun x419 () Bool)
(declare-fun x1561 () Real)
(declare-fun x1043 () Real)
(declare-fun x1767 () x538)
(declare-fun x989 (Real) Real)
(declare-fun x239 () Bool)
(declare-fun x482 () Real)
(declare-fun x303 () Bool)
(declare-fun x1493 () Real)
(declare-fun x1113 () Real)
(declare-fun x1479 () Real)
(declare-fun x1137 () Bool)
(declare-fun x277 () Real)
(declare-fun x613 () Bool)
(declare-fun x986 () Bool)
(declare-fun x1701 () Bool)
(declare-fun x1175 () Real)
(declare-fun x1655 () Bool)
(declare-fun x1748 (Real) Real)
(declare-fun x576 () Real)
(declare-fun x1041 () Bool)
(declare-fun x1657 () Bool)
(declare-fun x70 () Bool)
(declare-fun x1351 () Real)
(declare-fun x687 () Bool)
(declare-fun x692 () Real)
(declare-fun x845 () Bool)
(declare-fun x284 (Real) Real)
(declare-fun x1560 () Real)
(declare-fun x803 () Bool)
(declare-fun x1806 () Bool)
(declare-fun x138 () x538)
(declare-fun x830 () Real)
(declare-fun x453 () Bool)
(declare-fun x1129 () Bool)
(declare-fun x167 () Real)
(declare-fun x1842 () Bool)
(declare-fun x437 (Real) Real)
(declare-fun x139 () Real)
(declare-fun x1425 () Real)
(declare-fun x1695 () Real)
(declare-fun x1891 () Bool)
(declare-fun x542 () Real)
(declare-fun x485 () Bool)
(declare-fun x1554 (Real) Real)
(declare-fun x1192 () x538)
(declare-fun x336 () Real)
(declare-fun x272 () Real)
(declare-fun x1256 () Real)
(declare-fun x994 () Real)
(declare-fun x1571 () Real)
(declare-fun x1682 () x538)
(declare-fun x793 () Bool)
(declare-fun x1582 () Bool)
(declare-fun x102 (x538) Real)
(declare-fun x760 () Real)
(declare-fun x1382 () Real)
(declare-fun x1647 () Bool)
(declare-fun x595 () x538)
(declare-fun x1898 () Bool)
(declare-fun x1189 (Real) Real)
(declare-fun x551 () Bool)
(declare-fun x1579 () Bool)
(declare-fun x1668 () Real)
(declare-fun x86 () Real)
(declare-fun x648 () Real)
(declare-fun x664 () Bool)
(declare-fun x869 () Real)
(declare-fun x349 () Real)
(declare-fun x1469 () Real)
(declare-fun x599 () Bool)
(declare-fun x1234 () Real)
(declare-fun x81 () Real)
(declare-fun x442 () Bool)
(declare-fun x841 () Bool)
(declare-fun x906 () Real)
(declare-fun x208 () Real)
(declare-fun x1769 () Bool)
(declare-fun x313 () x538)
(declare-fun x1606 () x538)
(declare-fun x409 () x538)
(declare-fun x1768 () Bool)
(declare-fun x753 () x538)
(declare-fun x305 () Real)
(declare-fun x864 () Real)
(declare-fun x465 () Real)
(declare-fun x218 () Real)
(declare-fun x1732 () x538)
(declare-fun x322 () Bool)
(declare-fun x1688 () Bool)
(declare-fun x1726 () Bool)
(declare-fun x1096 () Bool)
(declare-fun x38 () x538)
(declare-fun x163 (x538) Real)
(declare-fun x200 () Real)
(declare-fun x878 (x538) Real)
(declare-fun x1344 () Bool)
(declare-fun x727 () Real)
(declare-fun x133 () x538)
(declare-fun x903 () Bool)
(declare-fun x1123 () x538)
(declare-fun x812 () Real)
(declare-fun x1830 () Bool)
(declare-fun x1888 () Real)
(declare-fun x1310 () Real)
(declare-fun x1346 () Real)
(declare-fun x1305 () Bool)
(declare-fun x1731 () Bool)
(declare-fun x494 () Real)
(declare-fun x211 () Bool)
(declare-fun x1690 () x538)
(declare-fun x434 () Real)
(declare-fun x384 () x538)
(declare-fun x1734 () x538)
(declare-fun x325 () x538)
(declare-fun x1007 () Real)
(declare-fun x738 () Bool)
(declare-fun x1338 () x538)
(declare-fun x293 () Real)
(declare-fun x939 () Real)
(declare-fun x729 () Real)
(declare-fun x744 () Real)
(declare-fun x1222 () Bool)
(declare-fun x470 () Real)
(declare-fun x511 () Bool)
(declare-fun x1653 () Real)
(declare-fun x1195 (Real) Real)
(declare-fun x407 () x538)
(declare-fun x383 () Real)
(declare-fun x1542 () Real)
(declare-fun x1905 () Real)
(declare-fun x227 () Bool)
(declare-fun x1820 () Real)
(declare-fun x468 () Real)
(declare-fun x330 () Real)
(declare-fun x985 () Real)
(declare-fun x1505 () Bool)
(declare-fun x1396 () x538)
(declare-fun x142 () Real)
(declare-fun x1742 () Real)
(declare-fun x260 () Bool)
(declare-fun x1402 () Real)
(declare-fun x1183 () Real)
(declare-fun x101 () Real)
(declare-fun x912 () Bool)
(declare-fun x1356 () Real)
(declare-fun x162 () Real)
(declare-fun x756 () Real)
(declare-fun x1181 () Bool)
(declare-fun x801 () Real)
(declare-fun x1448 () Real)
(declare-fun x1676 () Real)
(declare-fun x1247 () Real)
(declare-fun x191 () Real)
(declare-fun x1903 () Real)
(declare-fun x767 () Bool)
(declare-fun x346 () Real)
(declare-fun x931 () Real)
(declare-fun x1460 () Bool)
(declare-fun x1646 () x538)
(declare-fun x1705 () x538)
(declare-fun x1311 () Bool)
(declare-fun x153 () Bool)
(declare-fun x1028 () x538)
(declare-fun x1498 () Bool)
(declare-fun x580 () Real)
(declare-fun x1127 () Real)
(declare-fun x195 () Real)
(declare-fun x700 () Real)
(declare-fun x879 () x538)
(declare-fun x667 () Real)
(declare-fun x586 () Real)
(declare-fun x1859 () Real)
(declare-fun x462 () Bool)
(declare-fun x1821 () Real)
(declare-fun x854 () Real)
(declare-fun x682 () Bool)
(declare-fun x1672 () Bool)
(declare-fun x116 () x538)
(declare-fun x1864 () x538)
(declare-fun x1050 () Bool)
(declare-fun x549 () Real)
(declare-fun x1429 () x538)
(declare-fun x1909 () Bool)
(declare-fun x222 () Real)
(declare-fun x7 () Bool)
(declare-fun x59 () x538)
(declare-fun x1331 () Bool)
(declare-fun x836 () Real)
(declare-fun x605 () Bool)
(declare-fun x90 () Real)
(declare-fun x432 () Real)
(declare-fun x98 () Real)
(declare-fun x826 () Bool)
(declare-fun x1651 () Real)
(declare-fun x778 () Real)
(declare-fun x1154 () Real)
(declare-fun x467 () Real)
(declare-fun x659 () Bool)
(declare-fun x1476 () Bool)
(declare-fun x1187 () Real)
(declare-fun x944 () Real)
(declare-fun x1383 () Bool)
(declare-fun x720 () x538)
(declare-fun x1822 () Real)
(declare-fun x1259 () Bool)
(declare-fun x714 () Bool)
(declare-fun x949 () Real)
(declare-fun x1601 () Real)
(declare-fun x545 () Bool)
(declare-fun x1334 () Real)
(declare-fun x124 () x538)
(define-fun x374 ((x538 x538) (x1001 Real)) x538 (ite ((_ is x1011) x538) (x1011 (x1323 x538) (+ x1001 (x207 x538))) (ite ((_ is x495) x538) (x495 (x166 x538) (x1333 x538) (+ (x1584 x538) x1001)) (x1666 (+ x1001 (x1329 x538))))))
(define-fun x1368 ((x1194 Real)) Real (ite (and (<= 0 x1194) (< x1194 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x1194 (- x1194 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x860 ((x1194 Real)) Real (ite (and (> 0 x1194) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1194)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1194) x1194))
(define-fun x29 ((x1284 Real)) Bool (and (< x1284 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x1284)))
(define-fun x1176 ((x1284 Real)) Bool (and (= x1284 (x366 x1284 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x366 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1284) x1284)))
(define-fun x1450 ((x1284 Real)) Bool (and (= (x366 x1284 0) 0) (= 0 (x366 0 x1284))))
(define-fun x665 ((x1284 Real)) Bool (= (x366 x1284 x1284) x1284))
(define-fun x1470 ((x1284 Real)) Bool (and (x1176 x1284) (x1450 x1284) (x665 x1284)))
(define-fun x171 ((x1284 Real)) Bool (= (x366 1461501637330902918203684832716283019655932542975 (x366 1461501637330902918203684832716283019655932542975 x1284)) (x366 1461501637330902918203684832716283019655932542975 x1284)))
(define-fun x1867 ((x1284 Real)) Bool (=> (and (>= x1284 0) (> 1461501637330902918203684832716283019655932542976 x1284)) (= (x366 1461501637330902918203684832716283019655932542975 x1284) x1284)))
(define-fun x1911 ((x1284 Real)) Bool (=> (= x1284 (x366 1461501637330902918203684832716283019655932542975 x1284)) (and (>= x1284 0) (< x1284 1461501637330902918203684832716283019655932542976))))
(define-fun x862 ((x1284 Real)) Bool (=> (and (> 2923003274661805836407369665432566039311865085952 x1284) (>= x1284 1461501637330902918203684832716283019655932542976)) (= (x366 1461501637330902918203684832716283019655932542975 x1284) (- x1284 1461501637330902918203684832716283019655932542976))))
(define-fun x1847 ((x1284 Real) (x965 Real)) Bool (and (>= x965 0) (= (+ (x366 1461501637330902918203684832716283019655932542975 x1284) (* 1461501637330902918203684832716283019655932542976 x965)) x1284)))
(define-fun x1868 ((x1284 Real) (x308 Real)) Bool (and (x1867 x1284) (x862 x1284) (x1911 x1284) (x171 x1284) (x1847 x1284 x308)))
(define-fun x377 ((x1284 Real) (x965 Real)) Bool (= (x366 x1284 x965) (x366 x965 x1284)))
(define-fun x1097 ((x1284 Real) (x965 Real)) Bool (and (=> (>= x1284 0) (<= (x366 x1284 x965) x1284)) (>= (x366 x1284 x965) 0) (=> (>= x965 0) (<= (x366 x1284 x965) x965))))
(define-fun x1881 ((x1284 Real) (x965 Real)) Bool (and (x1097 x1284 x965) (x377 x1284 x965)))
(define-fun x1033 ((x1284 Real) (x308 Real)) Bool (and (x1868 x1284 x308) (x1881 x1284 1461501637330902918203684832716283019655932542975)))
(define-fun x360 ((x1284 Real)) Bool (= (x366 26959946667150639794667015087019630673637144422540572481103610249215 (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284)) (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284)))
(define-fun x35 ((x1284 Real)) Bool (=> (and (<= 0 x1284) (< x1284 26959946667150639794667015087019630673637144422540572481103610249216)) (= (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284) x1284)))
(define-fun x192 ((x1284 Real)) Bool (=> (= (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284) x1284) (and (> 26959946667150639794667015087019630673637144422540572481103610249216 x1284) (>= x1284 0))))
(define-fun x1684 ((x1284 Real)) Bool (=> (and (<= 26959946667150639794667015087019630673637144422540572481103610249216 x1284) (> 53919893334301279589334030174039261347274288845081144962207220498432 x1284)) (= (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284) (- x1284 26959946667150639794667015087019630673637144422540572481103610249216))))
(define-fun x1802 ((x1284 Real) (x965 Real)) Bool (and (>= x965 0) (= x1284 (+ (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1284) (* x965 26959946667150639794667015087019630673637144422540572481103610249216)))))
(define-fun x1456 ((x1284 Real) (x308 Real)) Bool (and (x360 x1284) (x1802 x1284 x308) (x1684 x1284) (x35 x1284) (x192 x1284)))
(define-fun x52 ((x1284 Real) (x308 Real)) Bool (and (x1456 x1284 x308) (x1881 x1284 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x141 ((x1284 Real)) Bool (= (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1284) (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1284))))
(define-fun x148 ((x1284 Real)) Bool (=> (and (> 32 x1284) (<= 0 x1284)) (= (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1284) 0)))
(define-fun x189 ((x1284 Real) (x965 Real) (x806 Real) (x1718 Real)) Bool (and (= (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1284) (* x806 32)) (< x1718 1) (<= 0 x806) (= x1284 (+ (* x806 32) (* x1718 115792089237316195423570985008687907853269984665640564039457584007913129639936) x965)) (< x965 32) (<= 0 x1718) (<= 0 x965) (> 3618502788666131106986593281521497120414687020801267626233049500247285301248 x806)))
(define-fun x1615 ((x1284 Real) (x798 Real) (x1317 Real) (x607 Real)) Bool (and (x189 x1284 x798 x1317 x607) (x141 x1284) (x148 x1284)))
(define-fun x1566 ((x1284 Real) (x798 Real) (x1317 Real) (x607 Real)) Bool (and (x1881 x1284 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1615 x1284 x798 x1317 x607)))
(define-fun x176 ((x1658 Real)) Real (ite (< x1658 x1472) (x437 x1658) 0))
(define-fun x365 ((x1658 Real)) Real (x1125 x1658))
(define-fun x107 ((x1658 Real)) Real (x1125 x1658))
(define-fun x1071 ((x1658 x538)) Real (ite (= x1658 x135) x1607 (x204 x1658)))
(define-fun x1562 ((x1658 Real)) Real (ite (= x1658 128) x1760 (x1733 x1658)))
(define-fun x809 ((x1658 Real)) Real (ite (= x1658 160) x1883 (x1281 x1658)))
(define-fun x974 ((x1658 x538)) Real (ite (= x1062 x1658) x1607 (x204 x1658)))
(define-fun x1778 ((x1658 x538)) Real (ite (= x1658 x1103) x854 (x808 x1658)))
(define-fun x689 ((x1658 x538)) Real (ite (= x1658 x1749) x1607 (x204 x1658)))
(define-fun x1246 ((x1658 x538)) Real (ite (and (not x153) x1086 (not x1395)) (x689 x1658) (ite (and (not x153) x1086 x1395) (x974 x1658) (x1071 x1658))))
(define-fun x461 ((x1658 Real)) Real (ite (= x1658 x405) x1809 (x822 x1658)))
(define-fun x18 ((x1658 Real)) Real (ite (= x759 x1658) x1517 (x452 x1658)))
(define-fun x279 ((x1658 x538)) Real (ite (= x133 x1658) x1607 (x56 x1658)))
(define-fun x887 ((x1658 x538)) Real (ite (= x1254 x1658) x1704 (x1389 x1658)))
(define-fun x1764 ((x1658 x538)) Real (ite (= x662 x1658) x1607 (x56 x1658)))
(define-fun x1159 ((x1658 x538)) Real (ite (= x704 x1658) x1247 (x61 x1658)))
(define-fun x633 ((x1658 x538)) Real (ite (= x1658 x734) x606 (x1159 x1658)))
(define-fun x297 ((x1658 x538)) Real (ite (= x1658 (x1617 274184521717934524641157099916833587206)) x1790 (x492 x1658)))
(define-fun x1068 ((x1658 x538)) Real (ite (= (x1617 x1828) x1658) x1793 (x297 x1658)))
(define-fun x813 ((x1658 x538)) Real (ite (= x1658 (x1617 x1828)) x1485 (x1068 x1658)))
(define-fun x1492 ((x1658 x538)) Real (ite (= x1658 (x1617 274184521717934524641157099916833587206)) x234 (x813 x1658)))
(define-fun x1266 ((x1658 x538)) Real (ite x1858 (x1492 x1658) (x492 x1658)))
(define-fun x22 ((x1658 x538)) Real (ite (= x928 x1658) x838 (x1067 x1658)))
(define-fun x174 ((x1658 x538)) Real (ite (= x1658 x544) x1249 (x22 x1658)))
(define-fun x1805 ((x1658 x538)) Real (ite (= x1658 x560) x1644 (x319 x1658)))
(define-fun x1325 ((x1658 x538)) Real (ite x1858 (x1805 x1658) (x319 x1658)))
(define-fun x253 ((x1658 Real)) Real (ite (= 128 x1658) x237 (x1148 x1658)))
(define-fun x3 ((x1658 Real)) Real (ite (= 160 x1658) x1220 (x1597 x1658)))
(define-fun x1251 ((x1658 x538)) Real (ite (= x1658 x753) x114 (x909 x1658)))
(define-fun x75 ((x1658 x538)) Real (ite (and x1335 (not x883) (not x439)) (x1251 x1658) (x909 x1658)))
(define-fun x1169 ((x1658 x538)) Real (ite (and (not x1369) x1086) (x1764 x1658) (x279 x1658)))
(define-fun x552 ((x1658 Real)) Real (ite (= x1658 x1797) x1179 (x1795 x1658)))
(define-fun x715 ((x1658 Real)) Real (ite (= x680 x1658) x1773 (x55 x1658)))
(define-fun x1321 ((x1658 x538)) Real (ite (= x445 x1658) x1142 (x102 x1658)))
(define-fun x275 ((x1658 Real)) Real (ite (= x1658 x710) x381 (x1748 x1658)))
(define-fun x539 ((x1658 Real)) Real (ite (= x1658 x1856) x925 (x275 x1658)))
(define-fun x311 ((x1658 Real)) Real (ite (= x1658 x1794) x1694 (x1403 x1658)))
(define-fun x1104 ((x1658 Real)) Real (ite (= x648 x1658) x197 (x539 x1658)))
(define-fun x1262 ((x1658 Real)) Real (ite (= x1658 x907) x766 (x1089 x1658)))
(define-fun x1775 ((x1658 Real)) Real (ite (= x1015 x1658) 0 (x1322 x1658)))
(define-fun x821 ((x1658 Real)) Real (ite (and (not x1091) x425 (not x385)) (x1322 x1658) (x1775 x1658)))
(define-fun x1807 ((x1658 Real)) Real (ite (= 0 x1658) 1 (x628 x1658)))
(define-fun x1893 ((x1658 x538)) Real (ite (= x1658 x706) x1464 (x951 x1658)))
(define-fun x1689 ((x1658 x538)) Real (ite (= x595 x1658) x760 (x1893 x1658)))
(define-fun x630 ((x1658 x538)) Real (ite x130 (ite (and x835 x819) (x1689 x1658) (x951 x1658)) (x951 x1658)))
(define-fun x1474 ((x1658 x538)) Real (ite (= x1658 x1907) x612 (x1378 x1658)))
(define-fun x1478 ((x1658 x538)) Real (ite (= x1827 x1658) x683 (x1474 x1658)))
(define-fun x67 ((x1658 x538)) Real (ite x130 (ite (and x819 x835) (x1378 x1658) (x1478 x1658)) (x1378 x1658)))
(define-fun x671 ((x1658 x538)) Real (ite (and x1335 (not x614)) (x1321 x1658) (x102 x1658)))
(define-fun x212 ((x1658 Real)) Real (ite (= x1449 x1658) x1163 (x916 x1658)))
(define-fun x1048 ((x1658 Real)) Real (ite (= x1658 x213) x679 (x212 x1658)))
(define-fun x1484 ((x1658 Real)) Real (ite (= x1658 x1286) x218 (x846 x1658)))
(define-fun x1128 ((x1658 Real)) Real (ite (= x1658 x570) x85 (x1048 x1658)))
(define-fun x1531 ((x1658 Real)) Real (ite (= x1658 x482) x25 (x150 x1658)))
(define-fun x737 ((x1658 Real)) Real (ite (= x1658 x774) 0 (x752 x1658)))
(define-fun x410 ((x1658 Real)) Real (ite (and (not x1046) x1714 (not x591)) (x752 x1658) (x737 x1658)))
(define-fun x1304 ((x1658 x538)) Real (ite (= x1658 (x1617 274184521717934524641157099916833587206)) x804 (x1266 x1658)))
(define-fun x611 ((x1658 x538)) Real (ite (= x1658 (x1617 x1568)) x46 (x1304 x1658)))
(define-fun x1725 ((x1658 Real)) Real (ite (= x1658 0) 1 (x34 x1658)))
(define-fun x735 ((x1658 Real)) Real (ite (= 128 x1658) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x489 x1658)))
(define-fun x1036 ((x1658 Real)) Real (ite (= x1658 0) x1821 (x653 x1658)))
(define-fun x642 ((x1658 Real)) Real (ite (= 128 x1658) x1821 (x1189 x1658)))
(define-fun x105 ((x1658 Real)) Real (ite (= 4 x1658) x1371 (x176 x1658)))
(define-fun x824 ((x1658 Real)) Real (ite (= x1658 36) x1480 (x105 x1658)))
(define-fun x397 ((x1658 Real)) Real (ite (= x1658 68) x339 (x824 x1658)))
(define-fun x1667 ((x1658 Real)) Real (ite (= x1658 100) 128 (x397 x1658)))
(define-fun x540 ((x1658 Real)) Real (ite (= 132 x1658) x1854 (x1667 x1658)))
(define-fun x1475 ((x1658 Real)) Real (ite (= x1658 128) x220 (x989 x1658)))
(define-fun x1636 ((x1658 Real)) Real (ite (and (>= x1658 160) (< x1658 (+ x465 160))) (x283 (+ (- x1658 160) 164)) (x1475 x1658)))
(define-fun x1535 ((x1658 Real)) Real (ite (= x1452 x1658) 0 (x1636 x1658)))
(define-fun x1426 ((x1658 Real)) Real (ite (and (> (+ x1716 x1469) x1658) (<= x1716 x1658)) (x283 (+ x1472 (- x1658 x1716))) (x882 x1658)))
(define-fun x1885 ((x1658 Real)) Real (ite (= x315 x1658) x81 (x1115 x1658)))
(define-fun x1643 ((x1658 Real)) Real (ite (= x1649 x1658) x336 (x1885 x1658)))
(define-fun x1645 ((x1658 Real)) Real (ite (and x1137 (not x584) x850) (x1115 x1658) (x1643 x1658)))
(define-fun x337 ((x1658 Real)) Real (ite (= x1285 x1658) x1055 (x1645 x1658)))
(define-fun x448 ((x1658 Real)) Real (ite (= x1382 x1658) x1040 (x724 x1658)))
(define-fun x1090 ((x1658 Real)) Real (ite (= x1658 x769) x349 (x535 x1658)))
(define-fun x224 ((x1658 Real)) Real (ite (= x1658 x1353) x1822 (x1090 x1658)))
(define-fun x1817 ((x1658 Real)) Real (ite (and (not x584) (not x298) (not x874) (not x490) x1137) (x224 x1658) (ite (and x490 (not x874) x1137 (not x584) (not x298)) (x224 x1658) (x535 x1658))))
(define-fun x1081 ((x1658 Real)) Real (ite (= x1658 x1693) x1019 (x1817 x1658)))
(define-fun x996 ((x1658 Real)) Real (ite (= x1658 x1401) x1058 (x31 x1658)))
(define-fun x1392 ((x1658 Real)) Real (ite (and x1047 (not x1061) x1137 (not x584) (not x1898) (not x298)) (x31 x1658) (ite (and x1137 (not x584) (not x1898) (not x1047) (not x298)) (x911 x1658) (x996 x1658))))
(define-fun x250 ((x1658 Real)) Real (ite (and x1137 x298 (not x584)) (x535 x1658) (ite (and x584 x1137) (x1115 x1658) (ite (and x1137 (not x584) (not x1898) (not x298)) (x1392 x1658) (x911 x1658)))))
(define-fun x1808 ((x1658 Real)) Real (ite (= x1658 x1900) x295 (x250 x1658)))
(define-fun x1106 ((x1658 Real)) Real (ite (= x1405 x1658) x1483 (x1808 x1658)))
(define-fun x1882 ((x1658 Real)) Real (ite (= x1658 x320) x1761 (x1106 x1658)))
(define-fun x1702 ((x1658 Real)) Real (ite (= x522 x1658) x1427 (x1882 x1658)))
(define-fun x918 ((x1658 Real)) Real (ite (= x1658 x1461) 32 (x1702 x1658)))
(define-fun x399 ((x1658 Real)) Real (ite (= x1658 x1810) x1117 (x1279 x1658)))
(define-fun x471 ((x1658 Real)) Real (ite (= x1362 x1658) 0 (x1518 x1658)))
(define-fun x1229 ((x1658 x538)) Real (ite (= x739 x1658) x1651 (x1067 x1658)))
(define-fun x1445 ((x1658 x538)) Real (ite (= x934 x1658) x1526 (x1229 x1658)))
(define-fun x1906 ((x1658 x538)) Real (ite (= x1658 x241) x891 (x251 x1658)))
(define-fun x1669 ((x1658 x538)) Real (ite (= x1658 x351) x316 (x1906 x1658)))
(define-fun x1298 ((x1658 x538)) Real (ite (and x738 (not x1105)) (x251 x1658) (ite (and x1618 (not x1198)) (x1067 x1658) (ite (and x442 x240) (x1669 x1658) (x251 x1658)))))
(define-fun x263 ((x1658 x538)) Real (ite (= x313 x1658) x1818 (x61 x1658)))
(define-fun x631 ((x1658 x538)) Real (ite (= x1682 x1658) x1908 (x263 x1658)))
(define-fun x1752 ((x1658 x538)) Real (ite (= x955 x1658) x1132 (x229 x1658)))
(define-fun x1503 ((x1658 x538)) Real (ite (= x1658 x950) x1223 (x1752 x1658)))
(define-fun x394 ((x1658 x538)) Real (ite (and (not x1105) x738) (x229 x1658) (ite (and x1618 (not x1198)) (x61 x1658) (ite (and x240 x442) (x229 x1658) (x1503 x1658)))))
(define-fun x856 ((x1658 Real)) Real (ite (= 0 x1658) 1 (x371 x1658)))
(define-fun x487 ((x1658 Real)) Real (ite (= 0 x1658) 1 (x371 x1658)))
(define-fun x795 ((x1658 Real)) Real (ite (and x868 x800) (x856 x1658) (x487 x1658)))
(define-fun x1441 ((x1658 Real)) Real (ite (= x770 x1658) x576 (x688 x1658)))
(define-fun x583 ((x1658 Real)) Real (ite (= x1658 x770) x1433 (x688 x1658)))
(define-fun x993 ((x1658 Real)) Real (ite (= x770 x1658) x1131 (x531 x1658)))
(define-fun x449 ((x1658 Real)) Real (ite (and (<= x649 x1658) (> (+ x649 x1131) x1658)) (x795 (+ 0 (- x1658 x649))) (x993 x1658)))
(define-fun x1232 ((x1658 Real)) Real (ite (and (not x1196) x1041) (x449 x1658) (x531 x1658)))
(define-fun x1513 ((x1658 Real)) Real (ite (= x1863 x1658) x295 (x1232 x1658)))
(define-fun x1494 ((x1658 Real)) Real (ite (= x1658 x499) x1495 (x1513 x1658)))
(define-fun x848 ((x1658 Real)) Real (ite (= x1528 x1658) x1661 (x1494 x1658)))
(define-fun x84 ((x1658 Real)) Real (ite (= x1658 x777) x19 (x848 x1658)))
(define-fun x1146 ((x1658 Real)) Real (ite (= x1658 x1108) 32 (x84 x1658)))
(define-fun x1707 ((x1658 Real)) Real (ite (= x1658 x546) x272 (x1554 x1658)))
(define-fun x1772 ((x1658 Real)) Real (ite (= x288 x1658) 0 (x1093 x1658)))
(define-fun x1625 ((x1658 x538)) Real (ite (= (x1617 274184521717934524641157099916833587206) x1658) x1756 (x492 x1658)))
(define-fun x1713 ((x1658 x538)) Real (ite (= (x1617 x956) x1658) x400 (x1625 x1658)))
(define-fun x1844 ((x1658 x538)) Real (ite (= x1658 (x1617 x956)) x112 (x1713 x1658)))
(define-fun x1035 ((x1658 x538)) Real (ite (= x1658 (x1617 274184521717934524641157099916833587206)) x1295 (x1844 x1658)))
(define-fun x132 ((x1658 x538)) Real (ite (= (x1617 274184521717934524641157099916833587206) x1658) x355 (x1035 x1658)))
(define-fun x1728 ((x1658 x538)) Real (ite (= (x1617 x248) x1658) x415 (x132 x1658)))
(define-fun x548 ((x1658 Real)) Real (ite (= x1658 0) 1 (x284 x1658)))
(define-fun x1719 ((x1658 Real)) Real (ite (= x1658 x1804) x506 (x210 x1658)))
(define-fun x898 ((x1658 Real)) Real (ite (= x1658 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x269 x1658)))
(define-fun x290 ((x1658 Real)) Real (ite (= 0 x1658) x1084 (x393 x1658)))
(define-fun x48 ((x1658 Real)) Real (ite (= x1658 128) x1084 (x11 x1658)))
(define-fun x1255 ((x1658 Real)) Real (ite (= x1658 0) 1 (x628 x1658)))
(define-fun x1825 ((x1658 Real)) Real (ite (= 0 x1658) 1 (x34 x1658)))
(define-fun x285 ((x1658 Real)) Real (ite (= x1658 0) x1375 (x653 x1658)))
(define-fun x616 ((x1658 Real)) Real (ite (= x1658 128) x1375 (x1189 x1658)))
(define-fun x1349 ((x1658 Real)) Real (ite (= 0 x1658) 1 (x284 x1658)))
(define-fun x696 ((x1658 Real)) Real (ite (= x1804 x1658) x348 (x210 x1658)))
(define-fun x1706 ((x1658 Real)) Real (ite (= x1658 0) x1525 (x393 x1658)))
(define-fun x675 ((x1658 Real)) Real (ite (= x1658 128) x1525 (x11 x1658)))
(define-fun x49 ((x1658 Real)) Real (ite (and x1833 x472) (x1807 x1658) (x1255 x1658)))
(define-fun x483 ((x1658 Real)) Real (ite (= x1415 x1658) x932 (x389 x1658)))
(define-fun x430 ((x1658 Real)) Real (ite (and (< x1658 (+ x932 x700)) (>= x1658 x700)) (x49 (+ (- x1658 x700) 0)) (x775 x1658)))
(define-fun x1212 ((x1658 Real)) Real (ite (and x239 x1858) (x775 x1658) (x430 x1658)))
(define-fun x1671 ((x1658 Real)) Real (ite (and x239 x1858) (x389 x1658) (x483 x1658)))
(define-fun x45 ((x1658 Real)) Real (ite (and x819 x835) (x1725 x1658) (x1825 x1658)))
(define-fun x321 ((x1658 x538)) Real (ite (= (x1617 x1568) x1658) x1165 (x611 x1658)))
(define-fun x1205 ((x1658 Real)) Real (ite (= x1442 x1658) x944 (x1017 x1658)))
(define-fun x1638 ((x1658 Real)) Real (ite (and (< x1658 (+ x757 x944)) (<= x757 x1658)) (x45 (+ 0 (- x1658 x757))) (x598 x1658)))
(define-fun x16 ((x1658 Real)) Real (ite (and x358 x130) (x1017 x1658) (x1205 x1658)))
(define-fun x1800 ((x1658 Real)) Real (ite (and x130 x358) (x598 x1658) (x1638 x1658)))
(define-fun x309 ((x1658 Real)) Real (ite (and x1739 x1715) (x642 x1658) (x616 x1658)))
(define-fun x262 ((x1658 Real)) Real (x1195 x1658))
(define-fun x1736 ((x1658 x538)) Real (ite (= x575 x1658) x1607 (x204 x1658)))
(define-fun x1287 ((x1658 x538)) Real (ite (= x1658 x1646) x558 (x808 x1658)))
(define-fun x1152 ((x1658 x538)) Real (ite (= x1658 x134) x1607 (x204 x1658)))
(define-fun x553 ((x1658 x538)) Real (ite (= x1184 x1658) x1607 (x204 x1658)))
(define-fun x1098 ((x1658 x538)) Real (ite (and x1137 x850 (not x584)) (x1736 x1658) (ite (and (not x850) (not x584) x1137 x1780) (x553 x1658) (x1152 x1658))))
(define-fun x787 ((x1658 x538)) Real (ite (= x1658 x254) x1459 (x1389 x1658)))
(define-fun x829 ((x1658 x538)) Real (ite (= x1658 x1192) x1607 (x56 x1658)))
(define-fun x123 ((x1658 x538)) Real (ite (= x169 x1658) x1607 (x56 x1658)))
(define-fun x477 ((x1658 x538)) Real (ite (and x113 x1137 (not x584)) (x123 x1658) (x829 x1658)))
(define-fun x1504 ((x1658 x538)) Real (ite (= x143 x1658) x1064 (x1569 x1658)))
(define-fun x1332 ((x1658 x538)) Real (ite (and (not x490) (not x584) x1137 (not x874) (not x298)) (x1504 x1658) (x1569 x1658)))
(define-fun x119 ((x1658 x538)) Real (ite (= x1658 x1864) x1785 (x1297 x1658)))
(define-fun x443 ((x1658 x538)) Real (ite (and x1137 (not x298) (not x584) (not x1680)) (x119 x1658) (x1297 x1658)))
(define-fun x668 ((x1658 Real)) Real (ite (and x442 x240) (x548 x1658) (x1349 x1658)))
(define-fun x1274 ((x1658 x538)) Real (ite (= (x1617 x248) x1658) x1225 (x1728 x1658)))
(define-fun x728 ((x1658 Real)) Real (ite (= x1658 x1804) x1208 (x1210 x1658)))
(define-fun x447 ((x1658 Real)) Real (ite (and (>= x1658 x698) (> (+ x698 x1208) x1658)) (x668 (+ (- x1658 x698) 0)) (x728 x1658)))
(define-fun x326 ((x1658 Real)) Real (ite (and x491 x500) (x1210 x1658) (x447 x1658)))
(define-fun x60 ((x1658 Real)) Real (ite (and x1099 x892) (x48 x1658) (x675 x1658)))
(define-fun x1500 ((x1284 Real)) Bool (=> (and (not (= x1284 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x1284 1461501637330902918203684832716283019655932542976)) (not (= x1284 2258409472)) (not (= x1284 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 2835717307 x1284)) (not (= x1284 649617121)) (not (= 274184521717934524641157099916833587214 x1284)) (not (= x1284 1968616202)) (not (= x1284 468353030)) (not (= 2514000705 x1284)) (not (= 1000000000000000000 x1284)) (not (= 2960351575 x1284)) (not (= x1284 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x1284 2690754053)) (not (= 604800 x1284)) (not (= x1284 87118632)) (not (= 1461501637330902918203684832716283019655932542975 x1284)) (not (= x1284 1986467848)) (not (= 2061678023 x1284)) (not (= 115792089237316195423570985008687907853269984665640564039457 x1284)) (> x1284 10000) (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1284)) (not (= 26959946667150639794667015087019630673637144422540572481103610249215 x1284)) (not (= 2798343961 x1284)) (not (= x1284 826074471)) (not (= x1284 18446744073709551615)) (not (= 142201243 x1284)) (not (= 2764855426 x1284)) (not (= x1284 37714057306076988483118529490347679105585116642029194716945419020321082336612)) (not (= 2743102681 x1284)) (not (= 911411945 x1284)) (not (= 1889567281 x1284)) (not (= 243137395 x1284)) (not (= x1284 759532456)) (not (= x1284 274184521717934524641157099916833587218)) (not (= 635128645 x1284)) (not (= 274184521717934524641157099916833587206 x1284)) (not (= 2293535753 x1284)) (not (= 2211524764 x1284)) (not (= 69947311 x1284))) (not ((_ is x1666) (x1617 x1284)))))
(assert (axiom_frac_bound (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1318 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 1000000000000000000 x1644 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x220 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 32 x523 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1070 x27 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1144 x536 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1145 x837 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1164 x1596 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1214 1000000000000000000 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1358 x1101 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1596 x1164 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1599 x1372 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1603 x593 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1854 32 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x191 x293 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x202 x889 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220 32 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249 x837 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x27 x1070 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x536 x1144 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x582 x722 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x718 x915 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x582 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x722 x899 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x785 1000000000000000000 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 x968 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x837 x1145 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x899 x722 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x915 x718 (uninterp_frac (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound x1014 x784))
(assert (axiom_frac_zero x1014 x784 1000000000000000000 x1318 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 1000000000000000000 x1644 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 32 x220 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 32 x523 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1070 x27 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1144 x536 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1145 x837 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1164 x1596 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1214 1000000000000000000 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1358 x1101 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1596 x1164 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1599 x1372 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1603 x593 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x1854 32 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x191 x293 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x202 x889 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x220 32 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x249 x837 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x27 x1070 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x536 x1144 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x582 x722 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x718 x915 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x722 x582 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x722 x899 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x785 1000000000000000000 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x788 x968 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x837 x1145 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x899 x722 (uninterp_frac x1014 x784)))
(assert (axiom_frac_zero x1014 x784 x915 x718 (uninterp_frac x1014 x784)))
(assert (axiom_frac_bound x1154 1000000000000000000))
(assert (axiom_frac_zero x1154 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 32 x220 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 32 x523 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1070 x27 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1144 x536 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1145 x837 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1164 x1596 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1358 x1101 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1596 x1164 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1599 x1372 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1603 x593 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x1854 32 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x191 x293 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x202 x889 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x220 32 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x249 x837 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x27 x1070 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x536 x1144 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x582 x722 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x718 x915 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x722 x582 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x722 x899 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x785 1000000000000000000 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x788 x968 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x837 x1145 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x899 x722 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_zero x1154 1000000000000000000 x915 x718 (uninterp_frac x1154 1000000000000000000)))
(assert (axiom_frac_bound x1202 1000000000000000000))
(assert (axiom_frac_zero x1202 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 32 x220 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 32 x523 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1070 x27 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1144 x536 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1145 x837 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1164 x1596 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1358 x1101 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1596 x1164 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1599 x1372 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1603 x593 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x1854 32 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x191 x293 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x202 x889 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x220 32 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x249 x837 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x27 x1070 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x536 x1144 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x582 x722 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x718 x915 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x722 x582 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x722 x899 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x785 1000000000000000000 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x788 x968 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x837 x1145 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x899 x722 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_zero x1202 1000000000000000000 x915 x718 (uninterp_frac x1202 1000000000000000000)))
(assert (axiom_frac_bound x131 1000000000000000000))
(assert (axiom_frac_zero x131 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 32 x220 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 32 x523 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1070 x27 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1144 x536 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1145 x837 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1164 x1596 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1358 x1101 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1596 x1164 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1599 x1372 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1603 x593 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x1854 32 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x191 x293 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x202 x889 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x220 32 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x249 x837 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x27 x1070 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x536 x1144 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x582 x722 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x718 x915 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x722 x582 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x722 x899 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x785 1000000000000000000 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x788 x968 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x837 x1145 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x899 x722 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_zero x131 1000000000000000000 x915 x718 (uninterp_frac x131 1000000000000000000)))
(assert (axiom_frac_bound x1351 1000000000000000000))
(assert (axiom_frac_zero x1351 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 32 x220 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 32 x523 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1070 x27 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1144 x536 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1145 x837 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1164 x1596 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1358 x1101 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1596 x1164 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1599 x1372 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1603 x593 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x1854 32 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x191 x293 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x202 x889 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x220 32 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x249 x837 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x27 x1070 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x536 x1144 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x582 x722 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x718 x915 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x722 x582 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x722 x899 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x785 1000000000000000000 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x788 x968 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x837 x1145 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x899 x722 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_zero x1351 1000000000000000000 x915 x718 (uninterp_frac x1351 1000000000000000000)))
(assert (axiom_frac_bound x1623 x825))
(assert (axiom_frac_zero x1623 x825 1000000000000000000 x1318 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 1000000000000000000 x1644 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 32 x220 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 32 x523 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1070 x27 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1144 x536 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1145 x837 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1164 x1596 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1214 1000000000000000000 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1358 x1101 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1596 x1164 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1599 x1372 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1603 x593 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x1854 32 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x191 x293 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x202 x889 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x220 32 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x249 x837 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x27 x1070 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x536 x1144 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x582 x722 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x718 x915 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x722 x582 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x722 x899 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x785 1000000000000000000 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x788 x968 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x837 x1145 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x899 x722 (uninterp_frac x1623 x825)))
(assert (axiom_frac_zero x1623 x825 x915 x718 (uninterp_frac x1623 x825)))
(assert (axiom_frac_bound x1683 x305))
(assert (axiom_frac_zero x1683 x305 1000000000000000000 x1318 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 1000000000000000000 x1644 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 32 x220 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 32 x523 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1070 x27 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1144 x536 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1145 x837 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1164 x1596 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1214 1000000000000000000 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1358 x1101 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1596 x1164 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1599 x1372 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1603 x593 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x1854 32 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x191 x293 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x202 x889 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x220 32 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x249 x837 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x27 x1070 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x536 x1144 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x582 x722 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x718 x915 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x722 x582 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x722 x899 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x785 1000000000000000000 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x788 x968 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x837 x1145 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x899 x722 (uninterp_frac x1683 x305)))
(assert (axiom_frac_zero x1683 x305 x915 x718 (uninterp_frac x1683 x305)))
(assert (axiom_frac_bound x713 1000000000000000000))
(assert (axiom_frac_zero x713 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 32 x220 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 32 x523 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1070 x27 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1144 x536 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1145 x837 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1164 x1596 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1358 x1101 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1596 x1164 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1599 x1372 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1603 x593 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x1854 32 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x191 x293 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x202 x889 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x220 32 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x249 x837 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x27 x1070 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x536 x1144 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x582 x722 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x718 x915 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x722 x582 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x722 x899 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x785 1000000000000000000 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x788 x968 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x837 x1145 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x899 x722 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_zero x713 1000000000000000000 x915 x718 (uninterp_frac x713 1000000000000000000)))
(assert (axiom_frac_bound x818 x1275))
(assert (axiom_frac_zero x818 x1275 1000000000000000000 x1318 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 1000000000000000000 x1644 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 32 x220 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 32 x523 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1070 x27 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1144 x536 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1145 x837 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1164 x1596 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1214 1000000000000000000 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1358 x1101 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1596 x1164 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1599 x1372 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1603 x593 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x1854 32 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x191 x293 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x202 x889 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x220 32 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x249 x837 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x27 x1070 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x536 x1144 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x582 x722 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x718 x915 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x722 x582 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x722 x899 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x785 1000000000000000000 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x788 x968 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x837 x1145 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x899 x722 (uninterp_frac x818 x1275)))
(assert (axiom_frac_zero x818 x1275 x915 x718 (uninterp_frac x818 x1275)))
(assert (axiom_frac_bound x836 1000000000000000000))
(assert (axiom_frac_zero x836 1000000000000000000 1000000000000000000 x1318 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 1000000000000000000 x1644 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 32 x220 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 32 x523 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1070 x27 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1144 x536 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1145 x837 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1164 x1596 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1214 1000000000000000000 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1358 x1101 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1596 x1164 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1599 x1372 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1603 x593 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x1854 32 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x191 x293 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x202 x889 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x220 32 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x249 x837 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x27 x1070 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x536 x1144 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x582 x722 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x718 x915 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x722 x582 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x722 x899 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x785 1000000000000000000 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x788 x968 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x837 x1145 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x899 x722 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_frac_zero x836 1000000000000000000 x915 x718 (uninterp_frac x836 1000000000000000000)))
(assert (axiom_int_approximation x1))
(assert (axiom_int_approximation x10))
(assert (axiom_int_approximation x1002))
(assert (axiom_int_approximation x1005))
(assert (axiom_int_approximation x1006))
(assert (axiom_int_approximation x1007))
(assert (axiom_int_approximation x1008))
(assert (axiom_int_approximation x1009))
(assert (axiom_int_approximation x101))
(assert (axiom_int_approximation x1010))
(assert (axiom_int_approximation x1014))
(assert (axiom_int_approximation x1015))
(assert (axiom_int_approximation x1018))
(assert (axiom_int_approximation x1019))
(assert (axiom_int_approximation x1023))
(assert (axiom_int_approximation x1025))
(assert (axiom_int_approximation x1026))
(assert (axiom_int_approximation x103))
(assert (axiom_int_approximation x1030))
(assert (axiom_int_approximation x1031))
(assert (axiom_int_approximation x1032))
(assert (axiom_int_approximation x1034))
(assert (axiom_int_approximation x1039))
(assert (axiom_int_approximation x1040))
(assert (axiom_int_approximation x1042))
(assert (axiom_int_approximation x1043))
(assert (axiom_int_approximation x1044))
(assert (axiom_int_approximation x1045))
(assert (axiom_int_approximation x1051))
(assert (axiom_int_approximation x1054))
(assert (axiom_int_approximation x1055))
(assert (axiom_int_approximation x1056))
(assert (axiom_int_approximation x1058))
(assert (axiom_int_approximation x106))
(assert (axiom_int_approximation x1063))
(assert (axiom_int_approximation x1064))
(assert (axiom_int_approximation x1065))
(assert (axiom_int_approximation x1069))
(assert (axiom_int_approximation x1070))
(assert (axiom_int_approximation x1075))
(assert (axiom_int_approximation x1076))
(assert (axiom_int_approximation x1077))
(assert (axiom_int_approximation x1078))
(assert (axiom_int_approximation x1079))
(assert (axiom_int_approximation x108))
(assert (axiom_int_approximation x1084))
(assert (axiom_int_approximation x1085))
(assert (axiom_int_approximation x1087))
(assert (axiom_int_approximation x109))
(assert (axiom_int_approximation x1095))
(assert (axiom_int_approximation x1101))
(assert (axiom_int_approximation x1107))
(assert (axiom_int_approximation x1108))
(assert (axiom_int_approximation x1109))
(assert (axiom_int_approximation x111))
(assert (axiom_int_approximation x1110))
(assert (axiom_int_approximation x1111))
(assert (axiom_int_approximation x1113))
(assert (axiom_int_approximation x1117))
(assert (axiom_int_approximation x1118))
(assert (axiom_int_approximation x1119))
(assert (axiom_int_approximation x112))
(assert (axiom_int_approximation x1121))
(assert (axiom_int_approximation x1122))
(assert (axiom_int_approximation x1126))
(assert (axiom_int_approximation x1127))
(assert (axiom_int_approximation x1130))
(assert (axiom_int_approximation x1131))
(assert (axiom_int_approximation x1132))
(assert (axiom_int_approximation x1133))
(assert (axiom_int_approximation x1134))
(assert (axiom_int_approximation x1135))
(assert (axiom_int_approximation x1136))
(assert (axiom_int_approximation x1139))
(assert (axiom_int_approximation x114))
(assert (axiom_int_approximation x1140))
(assert (axiom_int_approximation x1142))
(assert (axiom_int_approximation x1144))
(assert (axiom_int_approximation x1145))
(assert (axiom_int_approximation x1147))
(assert (axiom_int_approximation x1149))
(assert (axiom_int_approximation x1151))
(assert (axiom_int_approximation x1154))
(assert (axiom_int_approximation x1156))
(assert (axiom_int_approximation x1163))
(assert (axiom_int_approximation x1164))
(assert (axiom_int_approximation x1165))
(assert (axiom_int_approximation x1166))
(assert (axiom_int_approximation x1167))
(assert (axiom_int_approximation x1168))
(assert (axiom_int_approximation x1170))
(assert (axiom_int_approximation x1173))
(assert (axiom_int_approximation x1174))
(assert (axiom_int_approximation x1175))
(assert (axiom_int_approximation x1177))
(assert (axiom_int_approximation x1178))
(assert (axiom_int_approximation x1179))
(assert (axiom_int_approximation x118))
(assert (axiom_int_approximation x1183))
(assert (axiom_int_approximation x1185))
(assert (axiom_int_approximation x1187))
(assert (axiom_int_approximation x1191))
(assert (axiom_int_approximation x1193))
(assert (axiom_int_approximation x1197))
(assert (axiom_int_approximation x1199))
(assert (axiom_int_approximation x12))
(assert (axiom_int_approximation x1200))
(assert (axiom_int_approximation x1201))
(assert (axiom_int_approximation x1202))
(assert (axiom_int_approximation x1203))
(assert (axiom_int_approximation x1204))
(assert (axiom_int_approximation x1206))
(assert (axiom_int_approximation x1208))
(assert (axiom_int_approximation x1209))
(assert (axiom_int_approximation x1214))
(assert (axiom_int_approximation x1218))
(assert (axiom_int_approximation x1219))
(assert (axiom_int_approximation x122))
(assert (axiom_int_approximation x1220))
(assert (axiom_int_approximation x1221))
(assert (axiom_int_approximation x1223))
(assert (axiom_int_approximation x1224))
(assert (axiom_int_approximation x1225))
(assert (axiom_int_approximation x1227))
(assert (axiom_int_approximation x1231))
(assert (axiom_int_approximation x1233))
(assert (axiom_int_approximation x1234))
(assert (axiom_int_approximation x1236))
(assert (axiom_int_approximation x1237))
(assert (axiom_int_approximation x1238))
(assert (axiom_int_approximation x1240))
(assert (axiom_int_approximation x1241))
(assert (axiom_int_approximation x1242))
(assert (axiom_int_approximation x1243))
(assert (axiom_int_approximation x1245))
(assert (axiom_int_approximation x1247))
(assert (axiom_int_approximation x1249))
(assert (axiom_int_approximation x125))
(assert (axiom_int_approximation x1253))
(assert (axiom_int_approximation x1256))
(assert (axiom_int_approximation x1257))
(assert (axiom_int_approximation x1260))
(assert (axiom_int_approximation x1263))
(assert (axiom_int_approximation x1267))
(assert (axiom_int_approximation x1268))
(assert (axiom_int_approximation x1269))
(assert (axiom_int_approximation x127))
(assert (axiom_int_approximation x1270))
(assert (axiom_int_approximation x1275))
(assert (axiom_int_approximation x1276))
(assert (axiom_int_approximation x1277))
(assert (axiom_int_approximation x1278))
(assert (axiom_int_approximation x128))
(assert (axiom_int_approximation x1280))
(assert (axiom_int_approximation x1282))
(assert (axiom_int_approximation x1283))
(assert (axiom_int_approximation x1285))
(assert (axiom_int_approximation x1286))
(assert (axiom_int_approximation x1290))
(assert (axiom_int_approximation x1292))
(assert (axiom_int_approximation x1293))
(assert (axiom_int_approximation x1294))
(assert (axiom_int_approximation x1295))
(assert (axiom_int_approximation x1301))
(assert (axiom_int_approximation x1302))
(assert (axiom_int_approximation x1303))
(assert (axiom_int_approximation x1306))
(assert (axiom_int_approximation x1307))
(assert (axiom_int_approximation x1308))
(assert (axiom_int_approximation x1309))
(assert (axiom_int_approximation x131))
(assert (axiom_int_approximation x1310))
(assert (axiom_int_approximation x1312))
(assert (axiom_int_approximation x1316))
(assert (axiom_int_approximation x1318))
(assert (axiom_int_approximation x1319))
(assert (axiom_int_approximation x1320))
(assert (axiom_int_approximation x1324))
(assert (axiom_int_approximation x1327))
(assert (axiom_int_approximation x1328))
(assert (axiom_int_approximation x1330))
(assert (axiom_int_approximation x1334))
(assert (axiom_int_approximation x1336))
(assert (axiom_int_approximation x1337))
(assert (axiom_int_approximation x1341))
(assert (axiom_int_approximation x1342))
(assert (axiom_int_approximation x1345))
(assert (axiom_int_approximation x1346))
(assert (axiom_int_approximation x1347))
(assert (axiom_int_approximation x1351))
(assert (axiom_int_approximation x1353))
(assert (axiom_int_approximation x1356))
(assert (axiom_int_approximation x1358))
(assert (axiom_int_approximation x136))
(assert (axiom_int_approximation x1361))
(assert (axiom_int_approximation x1362))
(assert (axiom_int_approximation x1363))
(assert (axiom_int_approximation x1364))
(assert (axiom_int_approximation x1367))
(assert (axiom_int_approximation x137))
(assert (axiom_int_approximation x1370))
(assert (axiom_int_approximation x1371))
(assert (axiom_int_approximation x1372))
(assert (axiom_int_approximation x1374))
(assert (axiom_int_approximation x1375))
(assert (axiom_int_approximation x1376))
(assert (axiom_int_approximation x1377))
(assert (axiom_int_approximation x1379))
(assert (axiom_int_approximation x1382))
(assert (axiom_int_approximation x1385))
(assert (axiom_int_approximation x1387))
(assert (axiom_int_approximation x139))
(assert (axiom_int_approximation x1390))
(assert (axiom_int_approximation x1397))
(assert (axiom_int_approximation x1399))
(assert (axiom_int_approximation x140))
(assert (axiom_int_approximation x1400))
(assert (axiom_int_approximation x1401))
(assert (axiom_int_approximation x1402))
(assert (axiom_int_approximation x1404))
(assert (axiom_int_approximation x1405))
(assert (axiom_int_approximation x1407))
(assert (axiom_int_approximation x1408))
(assert (axiom_int_approximation x1409))
(assert (axiom_int_approximation x1410))
(assert (axiom_int_approximation x1411))
(assert (axiom_int_approximation x1414))
(assert (axiom_int_approximation x1415))
(assert (axiom_int_approximation x1417))
(assert (axiom_int_approximation x1418))
(assert (axiom_int_approximation x142))
(assert (axiom_int_approximation x1423))
(assert (axiom_int_approximation x1425))
(assert (axiom_int_approximation x1427))
(assert (axiom_int_approximation x1428))
(assert (axiom_int_approximation x1431))
(assert (axiom_int_approximation x1432))
(assert (axiom_int_approximation x1433))
(assert (axiom_int_approximation x1434))
(assert (axiom_int_approximation x1437))
(assert (axiom_int_approximation x144))
(assert (axiom_int_approximation x1442))
(assert (axiom_int_approximation x1443))
(assert (axiom_int_approximation x1446))
(assert (axiom_int_approximation x1448))
(assert (axiom_int_approximation x1449))
(assert (axiom_int_approximation x1451))
(assert (axiom_int_approximation x1452))
(assert (axiom_int_approximation x1454))
(assert (axiom_int_approximation x1455))
(assert (axiom_int_approximation x1458))
(assert (axiom_int_approximation x1459))
(assert (axiom_int_approximation x146))
(assert (axiom_int_approximation x1461))
(assert (axiom_int_approximation x1463))
(assert (axiom_int_approximation x1464))
(assert (axiom_int_approximation x1466))
(assert (axiom_int_approximation x1468))
(assert (axiom_int_approximation x1469))
(assert (axiom_int_approximation x147))
(assert (axiom_int_approximation x1471))
(assert (axiom_int_approximation x1472))
(assert (axiom_int_approximation x1473))
(assert (axiom_int_approximation x1479))
(assert (axiom_int_approximation x1480))
(assert (axiom_int_approximation x1481))
(assert (axiom_int_approximation x1482))
(assert (axiom_int_approximation x1483))
(assert (axiom_int_approximation x1485))
(assert (axiom_int_approximation x1486))
(assert (axiom_int_approximation x1487))
(assert (axiom_int_approximation x1488))
(assert (axiom_int_approximation x1490))
(assert (axiom_int_approximation x1493))
(assert (axiom_int_approximation x1495))
(assert (axiom_int_approximation x1497))
(assert (axiom_int_approximation x1499))
(assert (axiom_int_approximation x15))
(assert (axiom_int_approximation x1501))
(assert (axiom_int_approximation x1502))
(assert (axiom_int_approximation x1507))
(assert (axiom_int_approximation x1510))
(assert (axiom_int_approximation x1511))
(assert (axiom_int_approximation x1512))
(assert (axiom_int_approximation x1515))
(assert (axiom_int_approximation x1516))
(assert (axiom_int_approximation x1517))
(assert (axiom_int_approximation x1521))
(assert (axiom_int_approximation x1524))
(assert (axiom_int_approximation x1525))
(assert (axiom_int_approximation x1526))
(assert (axiom_int_approximation x1527))
(assert (axiom_int_approximation x1528))
(assert (axiom_int_approximation x1530))
(assert (axiom_int_approximation x1533))
(assert (axiom_int_approximation x1536))
(assert (axiom_int_approximation x154))
(assert (axiom_int_approximation x1541))
(assert (axiom_int_approximation x1542))
(assert (axiom_int_approximation x1543))
(assert (axiom_int_approximation x1545))
(assert (axiom_int_approximation x1547))
(assert (axiom_int_approximation x1548))
(assert (axiom_int_approximation x1549))
(assert (axiom_int_approximation x1552))
(assert (axiom_int_approximation x1555))
(assert (axiom_int_approximation x1556))
(assert (axiom_int_approximation x1560))
(assert (axiom_int_approximation x1561))
(assert (axiom_int_approximation x1563))
(assert (axiom_int_approximation x1568))
(assert (axiom_int_approximation x157))
(assert (axiom_int_approximation x1570))
(assert (axiom_int_approximation x1571))
(assert (axiom_int_approximation x1572))
(assert (axiom_int_approximation x1577))
(assert (axiom_int_approximation x158))
(assert (axiom_int_approximation x1580))
(assert (axiom_int_approximation x1585))
(assert (axiom_int_approximation x1586))
(assert (axiom_int_approximation x159))
(assert (axiom_int_approximation x1592))
(assert (axiom_int_approximation x1595))
(assert (axiom_int_approximation x1596))
(assert (axiom_int_approximation x1598))
(assert (axiom_int_approximation x1599))
(assert (axiom_int_approximation x160))
(assert (axiom_int_approximation x1600))
(assert (axiom_int_approximation x1601))
(assert (axiom_int_approximation x1602))
(assert (axiom_int_approximation x1603))
(assert (axiom_int_approximation x1607))
(assert (axiom_int_approximation x1608))
(assert (axiom_int_approximation x1609))
(assert (axiom_int_approximation x161))
(assert (axiom_int_approximation x1610))
(assert (axiom_int_approximation x1611))
(assert (axiom_int_approximation x1614))
(assert (axiom_int_approximation x1616))
(assert (axiom_int_approximation x1619))
(assert (axiom_int_approximation x162))
(assert (axiom_int_approximation x1620))
(assert (axiom_int_approximation x1621))
(assert (axiom_int_approximation x1623))
(assert (axiom_int_approximation x1624))
(assert (axiom_int_approximation x1626))
(assert (axiom_int_approximation x1627))
(assert (axiom_int_approximation x1628))
(assert (axiom_int_approximation x1630))
(assert (axiom_int_approximation x1632))
(assert (axiom_int_approximation x1633))
(assert (axiom_int_approximation x1634))
(assert (axiom_int_approximation x1637))
(assert (axiom_int_approximation x1639))
(assert (axiom_int_approximation x1640))
(assert (axiom_int_approximation x1641))
(assert (axiom_int_approximation x1642))
(assert (axiom_int_approximation x1644))
(assert (axiom_int_approximation x1649))
(assert (axiom_int_approximation x1651))
(assert (axiom_int_approximation x1652))
(assert (axiom_int_approximation x1653))
(assert (axiom_int_approximation x1654))
(assert (axiom_int_approximation x1656))
(assert (axiom_int_approximation x1659))
(assert (axiom_int_approximation x1660))
(assert (axiom_int_approximation x1661))
(assert (axiom_int_approximation x1665))
(assert (axiom_int_approximation x1668))
(assert (axiom_int_approximation x167))
(assert (axiom_int_approximation x1673))
(assert (axiom_int_approximation x1675))
(assert (axiom_int_approximation x1676))
(assert (axiom_int_approximation x1677))
(assert (axiom_int_approximation x1679))
(assert (axiom_int_approximation x1683))
(assert (axiom_int_approximation x1686))
(assert (axiom_int_approximation x1691))
(assert (axiom_int_approximation x1693))
(assert (axiom_int_approximation x1694))
(assert (axiom_int_approximation x1695))
(assert (axiom_int_approximation x1698))
(assert (axiom_int_approximation x1699))
(assert (axiom_int_approximation x170))
(assert (axiom_int_approximation x1703))
(assert (axiom_int_approximation x1704))
(assert (axiom_int_approximation x1710))
(assert (axiom_int_approximation x1711))
(assert (axiom_int_approximation x1712))
(assert (axiom_int_approximation x1716))
(assert (axiom_int_approximation x1717))
(assert (axiom_int_approximation x172))
(assert (axiom_int_approximation x1722))
(assert (axiom_int_approximation x1723))
(assert (axiom_int_approximation x1729))
(assert (axiom_int_approximation x1730))
(assert (axiom_int_approximation x1735))
(assert (axiom_int_approximation x1737))
(assert (axiom_int_approximation x1740))
(assert (axiom_int_approximation x1741))
(assert (axiom_int_approximation x1742))
(assert (axiom_int_approximation x1743))
(assert (axiom_int_approximation x1745))
(assert (axiom_int_approximation x1746))
(assert (axiom_int_approximation x1747))
(assert (axiom_int_approximation x1751))
(assert (axiom_int_approximation x1753))
(assert (axiom_int_approximation x1756))
(assert (axiom_int_approximation x1757))
(assert (axiom_int_approximation x1760))
(assert (axiom_int_approximation x1761))
(assert (axiom_int_approximation x1762))
(assert (axiom_int_approximation x1773))
(assert (axiom_int_approximation x1776))
(assert (axiom_int_approximation x1779))
(assert (axiom_int_approximation x1781))
(assert (axiom_int_approximation x1782))
(assert (axiom_int_approximation x1783))
(assert (axiom_int_approximation x1785))
(assert (axiom_int_approximation x1786))
(assert (axiom_int_approximation x1787))
(assert (axiom_int_approximation x1789))
(assert (axiom_int_approximation x1790))
(assert (axiom_int_approximation x1791))
(assert (axiom_int_approximation x1793))
(assert (axiom_int_approximation x1794))
(assert (axiom_int_approximation x1796))
(assert (axiom_int_approximation x1797))
(assert (axiom_int_approximation x1799))
(assert (axiom_int_approximation x1803))
(assert (axiom_int_approximation x1804))
(assert (axiom_int_approximation x1809))
(assert (axiom_int_approximation x1810))
(assert (axiom_int_approximation x1812))
(assert (axiom_int_approximation x1816))
(assert (axiom_int_approximation x1818))
(assert (axiom_int_approximation x1819))
(assert (axiom_int_approximation x1820))
(assert (axiom_int_approximation x1821))
(assert (axiom_int_approximation x1822))
(assert (axiom_int_approximation x1823))
(assert (axiom_int_approximation x1824))
(assert (axiom_int_approximation x1826))
(assert (axiom_int_approximation x1828))
(assert (axiom_int_approximation x183))
(assert (axiom_int_approximation x1834))
(assert (axiom_int_approximation x1835))
(assert (axiom_int_approximation x1836))
(assert (axiom_int_approximation x1837))
(assert (axiom_int_approximation x184))
(assert (axiom_int_approximation x1840))
(assert (axiom_int_approximation x1841))
(assert (axiom_int_approximation x1845))
(assert (axiom_int_approximation x1846))
(assert (axiom_int_approximation x1848))
(assert (axiom_int_approximation x1849))
(assert (axiom_int_approximation x185))
(assert (axiom_int_approximation x1852))
(assert (axiom_int_approximation x1854))
(assert (axiom_int_approximation x1855))
(assert (axiom_int_approximation x1856))
(assert (axiom_int_approximation x1857))
(assert (axiom_int_approximation x1859))
(assert (axiom_int_approximation x1861))
(assert (axiom_int_approximation x1863))
(assert (axiom_int_approximation x1870))
(assert (axiom_int_approximation x1871))
(assert (axiom_int_approximation x1872))
(assert (axiom_int_approximation x1873))
(assert (axiom_int_approximation x1876))
(assert (axiom_int_approximation x1878))
(assert (axiom_int_approximation x1883))
(assert (axiom_int_approximation x1888))
(assert (axiom_int_approximation x1889))
(assert (axiom_int_approximation x1892))
(assert (axiom_int_approximation x1894))
(assert (axiom_int_approximation x1897))
(assert (axiom_int_approximation x19))
(assert (axiom_int_approximation x190))
(assert (axiom_int_approximation x1900))
(assert (axiom_int_approximation x1901))
(assert (axiom_int_approximation x1903))
(assert (axiom_int_approximation x1905))
(assert (axiom_int_approximation x1908))
(assert (axiom_int_approximation x191))
(assert (axiom_int_approximation x195))
(assert (axiom_int_approximation x197))
(assert (axiom_int_approximation x198))
(assert (axiom_int_approximation x199))
(assert (axiom_int_approximation x2))
(assert (axiom_int_approximation x200))
(assert (axiom_int_approximation x201))
(assert (axiom_int_approximation x202))
(assert (axiom_int_approximation x208))
(assert (axiom_int_approximation x21))
(assert (axiom_int_approximation x213))
(assert (axiom_int_approximation x215))
(assert (axiom_int_approximation x216))
(assert (axiom_int_approximation x218))
(assert (axiom_int_approximation x219))
(assert (axiom_int_approximation x220))
(assert (axiom_int_approximation x222))
(assert (axiom_int_approximation x226))
(assert (axiom_int_approximation x228))
(assert (axiom_int_approximation x23))
(assert (axiom_int_approximation x230))
(assert (axiom_int_approximation x231))
(assert (axiom_int_approximation x232))
(assert (axiom_int_approximation x234))
(assert (axiom_int_approximation x236))
(assert (axiom_int_approximation x237))
(assert (axiom_int_approximation x24))
(assert (axiom_int_approximation x242))
(assert (axiom_int_approximation x244))
(assert (axiom_int_approximation x248))
(assert (axiom_int_approximation x249))
(assert (axiom_int_approximation x25))
(assert (axiom_int_approximation x252))
(assert (axiom_int_approximation x257))
(assert (axiom_int_approximation x258))
(assert (axiom_int_approximation x26))
(assert (axiom_int_approximation x267))
(assert (axiom_int_approximation x27))
(assert (axiom_int_approximation x270))
(assert (axiom_int_approximation x271))
(assert (axiom_int_approximation x272))
(assert (axiom_int_approximation x273))
(assert (axiom_int_approximation x277))
(assert (axiom_int_approximation x278))
(assert (axiom_int_approximation x282))
(assert (axiom_int_approximation x286))
(assert (axiom_int_approximation x287))
(assert (axiom_int_approximation x288))
(assert (axiom_int_approximation x293))
(assert (axiom_int_approximation x294))
(assert (axiom_int_approximation x295))
(assert (axiom_int_approximation x299))
(assert (axiom_int_approximation x300))
(assert (axiom_int_approximation x304))
(assert (axiom_int_approximation x305))
(assert (axiom_int_approximation x306))
(assert (axiom_int_approximation x307))
(assert (axiom_int_approximation x314))
(assert (axiom_int_approximation x315))
(assert (axiom_int_approximation x316))
(assert (axiom_int_approximation x32))
(assert (axiom_int_approximation x320))
(assert (axiom_int_approximation x323))
(assert (axiom_int_approximation x324))
(assert (axiom_int_approximation x327))
(assert (axiom_int_approximation x328))
(assert (axiom_int_approximation x329))
(assert (axiom_int_approximation x330))
(assert (axiom_int_approximation x333))
(assert (axiom_int_approximation x334))
(assert (axiom_int_approximation x335))
(assert (axiom_int_approximation x336))
(assert (axiom_int_approximation x338))
(assert (axiom_int_approximation x339))
(assert (axiom_int_approximation x340))
(assert (axiom_int_approximation x342))
(assert (axiom_int_approximation x344))
(assert (axiom_int_approximation x345))
(assert (axiom_int_approximation x346))
(assert (axiom_int_approximation x347))
(assert (axiom_int_approximation x348))
(assert (axiom_int_approximation x349))
(assert (axiom_int_approximation x352))
(assert (axiom_int_approximation x354))
(assert (axiom_int_approximation x355))
(assert (axiom_int_approximation x356))
(assert (axiom_int_approximation x361))
(assert (axiom_int_approximation x367))
(assert (axiom_int_approximation x369))
(assert (axiom_int_approximation x37))
(assert (axiom_int_approximation x370))
(assert (axiom_int_approximation x372))
(assert (axiom_int_approximation x373))
(assert (axiom_int_approximation x376))
(assert (axiom_int_approximation x378))
(assert (axiom_int_approximation x379))
(assert (axiom_int_approximation x381))
(assert (axiom_int_approximation x382))
(assert (axiom_int_approximation x383))
(assert (axiom_int_approximation x387))
(assert (axiom_int_approximation x388))
(assert (axiom_int_approximation x390))
(assert (axiom_int_approximation x395))
(assert (axiom_int_approximation x396))
(assert (axiom_int_approximation x4))
(assert (axiom_int_approximation x40))
(assert (axiom_int_approximation x400))
(assert (axiom_int_approximation x401))
(assert (axiom_int_approximation x402))
(assert (axiom_int_approximation x404))
(assert (axiom_int_approximation x405))
(assert (axiom_int_approximation x406))
(assert (axiom_int_approximation x408))
(assert (axiom_int_approximation x41))
(assert (axiom_int_approximation x412))
(assert (axiom_int_approximation x413))
(assert (axiom_int_approximation x415))
(assert (axiom_int_approximation x42))
(assert (axiom_int_approximation x420))
(assert (axiom_int_approximation x424))
(assert (axiom_int_approximation x427))
(assert (axiom_int_approximation x432))
(assert (axiom_int_approximation x433))
(assert (axiom_int_approximation x434))
(assert (axiom_int_approximation x436))
(assert (axiom_int_approximation x438))
(assert (axiom_int_approximation x44))
(assert (axiom_int_approximation x444))
(assert (axiom_int_approximation x446))
(assert (axiom_int_approximation x450))
(assert (axiom_int_approximation x455))
(assert (axiom_int_approximation x456))
(assert (axiom_int_approximation x458))
(assert (axiom_int_approximation x459))
(assert (axiom_int_approximation x46))
(assert (axiom_int_approximation x464))
(assert (axiom_int_approximation x465))
(assert (axiom_int_approximation x466))
(assert (axiom_int_approximation x467))
(assert (axiom_int_approximation x468))
(assert (axiom_int_approximation x47))
(assert (axiom_int_approximation x470))
(assert (axiom_int_approximation x474))
(assert (axiom_int_approximation x475))
(assert (axiom_int_approximation x478))
(assert (axiom_int_approximation x479))
(assert (axiom_int_approximation x481))
(assert (axiom_int_approximation x482))
(assert (axiom_int_approximation x486))
(assert (axiom_int_approximation x488))
(assert (axiom_int_approximation x493))
(assert (axiom_int_approximation x494))
(assert (axiom_int_approximation x499))
(assert (axiom_int_approximation x50))
(assert (axiom_int_approximation x501))
(assert (axiom_int_approximation x505))
(assert (axiom_int_approximation x506))
(assert (axiom_int_approximation x507))
(assert (axiom_int_approximation x508))
(assert (axiom_int_approximation x509))
(assert (axiom_int_approximation x510))
(assert (axiom_int_approximation x513))
(assert (axiom_int_approximation x514))
(assert (axiom_int_approximation x517))
(assert (axiom_int_approximation x519))
(assert (axiom_int_approximation x520))
(assert (axiom_int_approximation x522))
(assert (axiom_int_approximation x523))
(assert (axiom_int_approximation x525))
(assert (axiom_int_approximation x527))
(assert (axiom_int_approximation x528))
(assert (axiom_int_approximation x530))
(assert (axiom_int_approximation x536))
(assert (axiom_int_approximation x537))
(assert (axiom_int_approximation x54))
(assert (axiom_int_approximation x542))
(assert (axiom_int_approximation x546))
(assert (axiom_int_approximation x547))
(assert (axiom_int_approximation x549))
(assert (axiom_int_approximation x554))
(assert (axiom_int_approximation x558))
(assert (axiom_int_approximation x559))
(assert (axiom_int_approximation x570))
(assert (axiom_int_approximation x571))
(assert (axiom_int_approximation x572))
(assert (axiom_int_approximation x574))
(assert (axiom_int_approximation x576))
(assert (axiom_int_approximation x578))
(assert (axiom_int_approximation x580))
(assert (axiom_int_approximation x582))
(assert (axiom_int_approximation x586))
(assert (axiom_int_approximation x587))
(assert (axiom_int_approximation x588))
(assert (axiom_int_approximation x589))
(assert (axiom_int_approximation x593))
(assert (axiom_int_approximation x594))
(assert (axiom_int_approximation x596))
(assert (axiom_int_approximation x597))
(assert (axiom_int_approximation x6))
(assert (axiom_int_approximation x600))
(assert (axiom_int_approximation x601))
(assert (axiom_int_approximation x602))
(assert (axiom_int_approximation x603))
(assert (axiom_int_approximation x604))
(assert (axiom_int_approximation x606))
(assert (axiom_int_approximation x610))
(assert (axiom_int_approximation x612))
(assert (axiom_int_approximation x615))
(assert (axiom_int_approximation x617))
(assert (axiom_int_approximation x618))
(assert (axiom_int_approximation x620))
(assert (axiom_int_approximation x621))
(assert (axiom_int_approximation x624))
(assert (axiom_int_approximation x635))
(assert (axiom_int_approximation x637))
(assert (axiom_int_approximation x639))
(assert (axiom_int_approximation x641))
(assert (axiom_int_approximation x644))
(assert (axiom_int_approximation x648))
(assert (axiom_int_approximation x649))
(assert (axiom_int_approximation x65))
(assert (axiom_int_approximation x652))
(assert (axiom_int_approximation x654))
(assert (axiom_int_approximation x657))
(assert (axiom_int_approximation x658))
(assert (axiom_int_approximation x66))
(assert (axiom_int_approximation x660))
(assert (axiom_int_approximation x661))
(assert (axiom_int_approximation x667))
(assert (axiom_int_approximation x673))
(assert (axiom_int_approximation x676))
(assert (axiom_int_approximation x677))
(assert (axiom_int_approximation x678))
(assert (axiom_int_approximation x679))
(assert (axiom_int_approximation x680))
(assert (axiom_int_approximation x681))
(assert (axiom_int_approximation x683))
(assert (axiom_int_approximation x684))
(assert (axiom_int_approximation x685))
(assert (axiom_int_approximation x686))
(assert (axiom_int_approximation x690))
(assert (axiom_int_approximation x691))
(assert (axiom_int_approximation x692))
(assert (axiom_int_approximation x698))
(assert (axiom_int_approximation x700))
(assert (axiom_int_approximation x702))
(assert (axiom_int_approximation x705))
(assert (axiom_int_approximation x708))
(assert (axiom_int_approximation x709))
(assert (axiom_int_approximation x71))
(assert (axiom_int_approximation x710))
(assert (axiom_int_approximation x712))
(assert (axiom_int_approximation x713))
(assert (axiom_int_approximation x716))
(assert (axiom_int_approximation x717))
(assert (axiom_int_approximation x718))
(assert (axiom_int_approximation x719))
(assert (axiom_int_approximation x722))
(assert (axiom_int_approximation x725))
(assert (axiom_int_approximation x726))
(assert (axiom_int_approximation x727))
(assert (axiom_int_approximation x729))
(assert (axiom_int_approximation x731))
(assert (axiom_int_approximation x733))
(assert (axiom_int_approximation x74))
(assert (axiom_int_approximation x743))
(assert (axiom_int_approximation x744))
(assert (axiom_int_approximation x745))
(assert (axiom_int_approximation x747))
(assert (axiom_int_approximation x748))
(assert (axiom_int_approximation x749))
(assert (axiom_int_approximation x750))
(assert (axiom_int_approximation x755))
(assert (axiom_int_approximation x756))
(assert (axiom_int_approximation x757))
(assert (axiom_int_approximation x759))
(assert (axiom_int_approximation x76))
(assert (axiom_int_approximation x760))
(assert (axiom_int_approximation x761))
(assert (axiom_int_approximation x765))
(assert (axiom_int_approximation x766))
(assert (axiom_int_approximation x768))
(assert (axiom_int_approximation x769))
(assert (axiom_int_approximation x77))
(assert (axiom_int_approximation x770))
(assert (axiom_int_approximation x773))
(assert (axiom_int_approximation x774))
(assert (axiom_int_approximation x776))
(assert (axiom_int_approximation x777))
(assert (axiom_int_approximation x778))
(assert (axiom_int_approximation x779))
(assert (axiom_int_approximation x78))
(assert (axiom_int_approximation x783))
(assert (axiom_int_approximation x784))
(assert (axiom_int_approximation x785))
(assert (axiom_int_approximation x786))
(assert (axiom_int_approximation x788))
(assert (axiom_int_approximation x790))
(assert (axiom_int_approximation x791))
(assert (axiom_int_approximation x792))
(assert (axiom_int_approximation x799))
(assert (axiom_int_approximation x8))
(assert (axiom_int_approximation x80))
(assert (axiom_int_approximation x801))
(assert (axiom_int_approximation x802))
(assert (axiom_int_approximation x804))
(assert (axiom_int_approximation x805))
(assert (axiom_int_approximation x807))
(assert (axiom_int_approximation x81))
(assert (axiom_int_approximation x812))
(assert (axiom_int_approximation x814))
(assert (axiom_int_approximation x816))
(assert (axiom_int_approximation x817))
(assert (axiom_int_approximation x818))
(assert (axiom_int_approximation x82))
(assert (axiom_int_approximation x820))
(assert (axiom_int_approximation x823))
(assert (axiom_int_approximation x825))
(assert (axiom_int_approximation x827))
(assert (axiom_int_approximation x83))
(assert (axiom_int_approximation x830))
(assert (axiom_int_approximation x831))
(assert (axiom_int_approximation x836))
(assert (axiom_int_approximation x837))
(assert (axiom_int_approximation x838))
(assert (axiom_int_approximation x849))
(assert (axiom_int_approximation x85))
(assert (axiom_int_approximation x851))
(assert (axiom_int_approximation x852))
(assert (axiom_int_approximation x853))
(assert (axiom_int_approximation x854))
(assert (axiom_int_approximation x855))
(assert (axiom_int_approximation x86))
(assert (axiom_int_approximation x861))
(assert (axiom_int_approximation x864))
(assert (axiom_int_approximation x867))
(assert (axiom_int_approximation x869))
(assert (axiom_int_approximation x870))
(assert (axiom_int_approximation x875))
(assert (axiom_int_approximation x876))
(assert (axiom_int_approximation x880))
(assert (axiom_int_approximation x884))
(assert (axiom_int_approximation x888))
(assert (axiom_int_approximation x889))
(assert (axiom_int_approximation x89))
(assert (axiom_int_approximation x890))
(assert (axiom_int_approximation x891))
(assert (axiom_int_approximation x899))
(assert (axiom_int_approximation x9))
(assert (axiom_int_approximation x90))
(assert (axiom_int_approximation x900))
(assert (axiom_int_approximation x902))
(assert (axiom_int_approximation x904))
(assert (axiom_int_approximation x905))
(assert (axiom_int_approximation x906))
(assert (axiom_int_approximation x907))
(assert (axiom_int_approximation x908))
(assert (axiom_int_approximation x91))
(assert (axiom_int_approximation x910))
(assert (axiom_int_approximation x914))
(assert (axiom_int_approximation x915))
(assert (axiom_int_approximation x917))
(assert (axiom_int_approximation x92))
(assert (axiom_int_approximation x920))
(assert (axiom_int_approximation x921))
(assert (axiom_int_approximation x922))
(assert (axiom_int_approximation x923))
(assert (axiom_int_approximation x925))
(assert (axiom_int_approximation x926))
(assert (axiom_int_approximation x927))
(assert (axiom_int_approximation x930))
(assert (axiom_int_approximation x931))
(assert (axiom_int_approximation x932))
(assert (axiom_int_approximation x933))
(assert (axiom_int_approximation x935))
(assert (axiom_int_approximation x937))
(assert (axiom_int_approximation x938))
(assert (axiom_int_approximation x939))
(assert (axiom_int_approximation x94))
(assert (axiom_int_approximation x941))
(assert (axiom_int_approximation x943))
(assert (axiom_int_approximation x944))
(assert (axiom_int_approximation x945))
(assert (axiom_int_approximation x949))
(assert (axiom_int_approximation x95))
(assert (axiom_int_approximation x952))
(assert (axiom_int_approximation x953))
(assert (axiom_int_approximation x956))
(assert (axiom_int_approximation x957))
(assert (axiom_int_approximation x958))
(assert (axiom_int_approximation x96))
(assert (axiom_int_approximation x961))
(assert (axiom_int_approximation x962))
(assert (axiom_int_approximation x967))
(assert (axiom_int_approximation x968))
(assert (axiom_int_approximation x97))
(assert (axiom_int_approximation x970))
(assert (axiom_int_approximation x971))
(assert (axiom_int_approximation x972))
(assert (axiom_int_approximation x973))
(assert (axiom_int_approximation x976))
(assert (axiom_int_approximation x979))
(assert (axiom_int_approximation x98))
(assert (axiom_int_approximation x981))
(assert (axiom_int_approximation x983))
(assert (axiom_int_approximation x984))
(assert (axiom_int_approximation x985))
(assert (axiom_int_approximation x987))
(assert (axiom_int_approximation x988))
(assert (axiom_int_approximation x99))
(assert (axiom_int_approximation x990))
(assert (axiom_int_approximation x992))
(assert (axiom_int_approximation x994))
(assert (axiom_int_approximation x997))
(assert (axiom_int_approximation x998))
(assert (= (x1666 26959946667150639794667015087019630673637144422540572481103610249215) (x1617 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x29 x506))
(assert (x29 x1149))
(assert (x29 x1595))
(assert (x29 x507))
(assert (= x340 (x5 (x1617 x340))))
(assert (x1500 x103))
(assert (x29 x315))
(assert (x29 x66))
(assert (= (x1617 2690754053) (x1666 2690754053)))
(assert (x29 x1585))
(assert (x29 x1208))
(assert (= x252 (x5 (x1617 x252))))
(assert (x29 x1147))
(assert (= (ite (= x420 x571) x1621 (x1003 x571)) (x724 x571)))
(assert (x29 x493))
(assert (= (ite (= x1078 x420) x1621 (x1003 x1078)) (x724 x1078)))
(assert (x29 x1840))
(assert (x29 x1841))
(assert (x29 x523))
(assert (x1500 x1568))
(assert (= (x724 x777) (ite (= x420 x777) x1621 (x1003 x777))))
(assert (= x425 x1086))
(assert (= (ite (= x1493 x1278) x686 (x1081 x1493)) (x911 x1493)))
(assert (= 0 (x989 x1493)))
(assert (= (x283 (+ 164 (- x300 160))) (ite (and (<= 164 (+ 164 (- x300 160))) (< (+ 164 (- x300 160)) (+ x1665 164))) (x1195 (- (+ 164 (- x300 160)) 164)) (x540 (+ 164 (- x300 160))))))
(assert (x29 x1362))
(assert (x29 x827))
(assert (x29 x1428))
(assert (= x367 (x5 (x1617 x367))))
(assert (x1470 x9))
(assert (= (ite (= x1008 x1425) x220 (x1535 x1425)) (x882 x1425)))
(assert (x29 x1552))
(assert (=> (< (- x1107 1) 10000) (= (x1666 x1107) (x1617 x1107))))
(assert (x29 x1481))
(assert (= (x1115 x1425) (ite (and x1398 x1137) (x882 x1425) (x1426 x1425))))
(assert (= (x5 (x1617 x1147)) x1147))
(assert (x29 x679))
(assert (x29 x1234))
(assert (= x299 (x5 (x1617 x299))))
(assert (= (ite (and x800 x868) (x1445 x363) (x1067 x363)) (x251 x363)))
(assert (x29 x354))
(assert (x29 x1218))
(assert (= (x535 x777) (ite (and (not x584) x1137 x1073) (x1003 x777) (ite (and (not x584) (not x259) x1181 (not x1073) x1137) (x724 x777) (ite (and (not x1181) (not x584) (not x1073) x1137) (x1003 x777) (x448 x777))))))
(assert (x1033 x799 x786))
(assert (x29 x294))
(assert (x29 x1495))
(assert (x29 x508))
(assert (= x1679 (x5 (x1617 x1679))))
(assert (x1033 x1443 x1560))
(assert (= (x911 x184) (ite (= x1278 x184) x686 (x1081 x184))))
(assert (x29 x709))
(assert (=> (< (- x406 1) 10000) (= (x1617 x406) (x1666 x406))))
(assert (x29 x1796))
(assert (=> (< (- x1530 1) 10000) (= (x1666 x1530) (x1617 x1530))))
(assert (x29 x26))
(assert (= (x535 x215) (ite (and x1137 x1073 (not x584)) (x1003 x215) (ite (and (not x1073) x1181 x1137 (not x584) (not x259)) (x724 x215) (ite (and (not x584) (not x1073) (not x1181) x1137) (x1003 x215) (x448 x215))))))
(assert (x29 x519))
(assert (x29 x456))
(assert (= (x1880 x1428) (ite (= x1428 x935) x1302 (x1230 x1428))))
(assert (=> (< (- x1782 1) 10000) (= (x1666 x1782) (x1617 x1782))))
(assert (x29 x1649))
(assert (= (x5 (x1617 x1872)) x1872))
(assert (x29 x1133))
(assert (= (x1230 x1493) (ite (= x1493 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1493))))
(assert (x29 x761))
(assert (= (ite (and x800 x868) (x1441 x1008) (x583 x1008)) (x531 x1008)))
(assert (x29 x327))
(assert (x29 x570))
(assert (x29 x390))
(assert (x29 x1110))
(assert (= x852 (x5 (x1617 x852))))
(assert (= (x1666 87118632) (x1617 87118632)))
(assert (x1470 x744))
(assert (= x484 (=> (and (not (= x938 87118632)) (< x938 2293535753) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1448) (= x1060 (x495 (x1617 x1819) (x1666 1) 0)) (<= x1717 1461501637330902918203684832716283019655932542975) (not (> x1819 x231)) (>= 1461501637330902918203684832716283019655932542975 x990) (= (= x1596 0) x883) (= x1819 x1292) (not (= x938 142201243)) (or (and (= (x495 (x1617 x1819) (x1666 5) 0) x256) (= (x366 1461501637330902918203684832716283019655932542975 x990) x1691) (not x614) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1070 x27)) (= x709 (x366 1461501637330902918203684832716283019655932542975 x990)) (= x604 x1142) (= x604 (* x27 x1070)) (= (x495 (x1617 x1691) x256 0) x445)) (and (= x335 (x366 1461501637330902918203684832716283019655932542975 x990)) x614)) (<= x1773 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> x1819 x231)) (<= 0 x1596) (= x1773 (x163 x771)) (= 243137395 x938) (= (x1648 x1060) x1179) (or (and (or (and (= (x715 x680) x86) x1250 (= x1026 x86)) (and (not x1250) (= x1026 x1607))) x503 (= (= x1448 0) x694) (= (< x1174 x1607) x1250) (= (x715 x680) x1174) (or (and (= x481 (x552 x1797)) (not (> x481 x1026)) (= (x860 (- x1026 x481)) x294) (= x294 x27) x694) (and (= x1639 x27) (not x694) (= 604800 x1293) (= x596 (x860 (- x1026 x1448))) (not (< x1026 x1448)) (= (ite (< x596 604800) x596 604800) x1639)))) (and (not x503) (= x27 0))) (>= x817 0) (= x1286 (x1368 (+ x1797 64))) (= (x495 (x1617 x1443) x460 0) x569) (= 0 x388) (< 0 x1079) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1650 x622) x1070) (= (x878 x569) x1596) (= x1079 (x414 (x1617 274184521717934524641157099916833587206))) (= (x374 x1060 1) x771) (= x323 x817) (= x460 (x495 (x1617 x990) x995 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (>= x231 0) (= (x495 (x1617 x1819) (x1666 6) 0) x1912) (= (x1368 (+ 32 x1797)) x680) (<= 0 x1773) (= x323 x1451) (= (x495 (x1617 x1571) x1860 0) x622) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1596) (= x390 x388) (= x295 x1717) (= x1388 (x495 (x1617 x953) x1912 0)) (< x1819 x231) (< x938 911411945) (= x1735 x1294) (= (= x27 0) x614) (<= x681 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1735) (>= 1461501637330902918203684832716283019655932542975 x1443) (= x995 (x495 (x1617 x1819) (x1666 9) 0)) (>= x231 0) (= x953 (x366 1461501637330902918203684832716283019655932542975 x990)) (<= 0 x681) (>= 1461501637330902918203684832716283019655932542975 x817) (<= x1070 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x1179 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1136 x990) (>= x1717 0) (> 468353030 x938) (<= 0 x231) (= (< x1448 x1267) x503) (= x1571 (x366 1461501637330902918203684832716283019655932542975 x990)) (= x1267 (x715 x680)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (= (x1169 x1388) x1448) (>= x1179 0) (>= x1070 0) (>= x1448 0) (not (= x938 69947311)) (= x1607 x587) (or (and (= x1699 (x366 1461501637330902918203684832716283019655932542975 x1443)) x883 (= x216 (x366 1461501637330902918203684832716283019655932542975 x990)) (= 128 x1797)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1220) (or (and (or (and (= x1555 x1607) (not x674)) (and (= x1870 x1555) (= (x3 160) x1870) x674)) (or (and (= x1164 x888) x1296 (= (x253 128) x42) (= x888 (x860 (- x1555 x42))) (not (< x1555 x42))) (and (= x444 (ite (> 604800 x586) x586 604800)) (= x444 x1164) (not x1296) (not (< x1555 x185)) (= (x860 (- x1555 x185)) x586) (= x1170 604800))) (= (< x101 x1607) x674) (= (x3 160) x101) x182 (= (= 0 x185) x1296)) (and (not x182) (= 0 x1164))) (= x1594 (x495 (x1617 x1819) (x1666 1) 0)) (<= 0 x185) (or (and (= (* x1596 x1164) x920) (= x1797 192) (= x352 (x366 1461501637330902918203684832716283019655932542975 x1443)) (= x114 x920) (= (x495 (x1617 x1819) (x1666 3) 0) x568) (= (x366 1461501637330902918203684832716283019655932542975 x990) x83) (= x753 (x495 (x1617 x1753) x1000 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1164 x1596)) (= x1000 (x495 (x1617 x83) x568 0)) (= (x366 1461501637330902918203684832716283019655932542975 x990) x396) (not x439) (= x1753 (x366 1461501637330902918203684832716283019655932542975 x1443))) (and x439 (= x1409 (x366 1461501637330902918203684832716283019655932542975 x1443)) (= x1797 192) (= x236 (x366 1461501637330902918203684832716283019655932542975 x990)))) (= (x366 1461501637330902918203684832716283019655932542975 x1443) x635) (<= 0 x1220) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x185) (= (x495 (x1617 x1819) (x1666 7) 0) x43) (>= x237 0) (not x883) (= (x1246 x1226) x185) (= (x3 160) x1609) (= (x374 x1594 1) x36) (= (x163 x36) x1220) (= x1013 (x495 (x1617 x478) x43 0)) (= (x1648 x1594) x237) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x237) (= (< x185 x1609) x182) (= (x495 (x1617 x635) x1013 0) x1226) (= x439 (= x1164 0)) (= (x366 1461501637330902918203684832716283019655932542975 x990) x478))) (= x1860 (x495 (x1617 x1819) (x1666 10) 0)) (= x1443 x559)) x634)))
(assert (= (ite (= x1135 x1382) x1127 (x337 x1382)) (x1003 x1382)))
(assert (x29 x505))
(assert (x29 x349))
(assert (=> (< (- x953 1) 10000) (= (x1666 x953) (x1617 x953))))
(assert (= (ite (= x1493 x1367) x1370 (x1880 x1493)) (x1435 x1493)))
(assert (x29 x1616))
(assert (x29 x1599))
(assert (x29 x1219))
(assert (x1033 x1848 x644))
(assert (= (x5 (x1666 2211524764)) 2211524764))
(assert (x29 x1142))
(assert (x1500 x902))
(assert (x29 x501))
(assert (x29 x1187))
(assert (= (x1125 (- (+ x1472 (- x1425 x1716)) 164)) (x1195 (- (+ (- x1425 x1716) x1472) 164))))
(assert (x29 x258))
(assert (= (x531 x184) (ite (and x800 x868) (x1441 x184) (x583 x184))))
(assert (= (x283 164) (ite (< 164 (+ x1665 164)) (x1195 0) (x540 164))))
(assert (x29 x1469))
(assert (x29 x1134))
(assert (= (x1003 x505) (ite (= x1135 x505) x1127 (x337 x505))))
(assert (= (x989 x1425) 0))
(assert (= (ite (and x1618 x1198 (not x895)) (x1518 x1425) (x471 x1425)) (x688 x1425)))
(assert (x1500 x1679))
(assert (x29 x594))
(assert (= (x5 (x1666 142201243)) 142201243))
(assert (x29 x1561))
(assert (x29 x606))
(assert (= (ite (and x1137 (not x584) x850) (x808 x1913) (ite (and x1780 (not x584) (not x850) x1137) (x808 x1913) (x1287 x1913))) (x1569 x1913)))
(assert (= x1828 (x5 (x1617 x1828))))
(assert (x29 x408))
(assert (x29 x1197))
(assert (x29 x1781))
(assert (= 0 (x989 x507)))
(assert (=> (< (- x990 1) 10000) (= (x1617 x990) (x1666 x990))))
(assert (x29 x278))
(assert (x1500 x956))
(assert (x29 x1698))
(assert (x29 x1177))
(assert (x29 x1510))
(assert (x29 x1418))
(assert (= (+ 1 (x5 x1557)) (x5 (x374 x1557 1))))
(assert (x29 x765))
(assert (x29 x1353))
(assert (= (x951 x796) (ite x1858 (ite (and x1833 x472) (x174 x796) (x1067 x796)) (x1067 x796))))
(assert (= x1256 (x5 (x1617 x1256))))
(assert (= 2514000705 (x5 (x1666 2514000705))))
(assert (x1033 x1002 x257))
(assert (x29 x459))
(assert (= x1582 x1647))
(assert (x1500 x1076))
(assert (x29 x779))
(assert (x29 x1729))
(assert (= (x1435 x184) (ite (= x184 x1367) x1370 (x1880 x184))))
(assert (= (x1435 x144) (ite (= x144 x1367) x1370 (x1880 x144))))
(assert (=> (> (+ 10000 1) x1753) (= (x1666 x1753) (x1617 x1753))))
(assert (= (x1115 x1008) (ite (and x1398 x1137) (x882 x1008) (x1426 x1008))))
(assert (= (=> (= x1150 (= x1568 274184521717934524641157099916833587214)) (and (=> (not x1150) x115) (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1156) (= x1031 2835717307) (= (x1474 x357) x1156) (<= 0 x1156) (= 68 x346) (= 1 x1065) (= x748 (x1378 x1028)) (= x1241 274184521717934524641157099916833587206) (= x750 x1746) (= x1789 x1110) (not x650) (= (< x748 x1110) x87) (not (< x1031 649617121)) (= (x860 (- x346 4)) x705) (<= x750 1461501637330902918203684832716283019655932542975) (= x650 (> x1789 x748)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1156 x1789)) x1150 (not x1788) (= x1431 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= x679 x1110) (= x1511 274184521717934524641157099916833587206) (not x1657) (not (= x1031 1889567281)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x1028) (= x683 (+ x1499 x159)) (= x1156 x1499) (not (< x346 4)) (not (= 649617121 x1031)) (< 0 x1747) (= x612 (x860 (- x748 x1110))) (= x357 (x495 (x1617 x750) (x1666 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x748) (= x1163 x750) (= x904 x346) (not (= x1031 826074471)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x1907) (= x1789 x159) (not x87) (= x1747 (x414 (x1617 274184521717934524641157099916833587214))) (= x1827 (x495 (x1617 x750) (x1666 1) 0)) (= x1788 (or (> x705 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x705)) (> 64 x705)))) (= x1657 (>= (+ x1789 x1156) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x944 32) (<= 0 x748) (not (= 2514000705 x1031))) x1020))) x1172))
(assert (x29 x1006))
(assert (= (x1696 x673) (ite (= x673 x1458) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x673))))
(assert (x29 x542))
(assert (x29 x1043))
(assert (=> (> (+ 10000 1) x1280) (= (x1617 x1280) (x1666 x1280))))
(assert (x29 x698))
(assert (x29 x1108))
(assert (= (ite (= x792 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x792)) (x1230 x792)))
(assert (= (=> (= x742 (= 274184521717934524641157099916833587214 x1118)) (and (=> (not x742) x155) (=> (and (= x646 (x495 (x1617 x307) (x1666 1) 0)) (= x12 1889567281) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x404) (= (or (> x1783 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x1783 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1783) true))) x1373) (= (x414 (x1617 274184521717934524641157099916833587214)) x1487) (= (x394 x646) x1525) (= x66 36) (<= x1525 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 36 x66) (= x1653 32) (not (< x12 649617121)) (= 1 x639) (= x1783 (x860 (- x66 4))) (< 0 x1487) (not (= x12 826074471)) (not (= x12 649617121)) (<= x588 1461501637330902918203684832716283019655932542975) (not (< x66 4)) (= x307 x588) x742 (not x1373) (<= 0 x1525)) x1519))) x832))
(assert (= (ite (= x320 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x320)) (x1230 x320)))
(assert (= (x5 (x1617 x957)) x957))
(assert (= (not (and (= (= x1796 x161) x1709) (= x1712 x1542) (= x910 x1796) (= x161 x1542))) x1171))
(assert (x29 x1526))
(assert (= (x31 x507) (ite (= x931 x507) x10 (x911 x507))))
(assert (= x62 true))
(assert (x29 x922))
(assert (x29 x658))
(assert (x29 x232))
(assert (= (ite (= x1008 x1278) x686 (x1081 x1008)) (x911 x1008)))
(assert (x1500 x273))
(assert (x29 x470))
(assert (= 1461501637330902918203684832716283019655932542976 (x5 (x1666 1461501637330902918203684832716283019655932542976))))
(assert (x29 x1863))
(assert (= (x1666 1986467848) (x1617 1986467848)))
(assert (x29 x731))
(assert (= 0 (x989 x215)))
(assert (x1500 x1342))
(assert (x1500 x1642))
(assert (= (ite (= x420 x522) x1621 (x1003 x522)) (x724 x522)))
(assert (= (x535 x1425) (ite (and x1137 (not x584) x1073) (x1003 x1425) (ite (and (not x1073) (not x584) x1181 (not x259) x1137) (x724 x1425) (ite (and (not x1073) (not x1181) (not x584) x1137) (x1003 x1425) (x448 x1425))))))
(assert (= (x989 x777) 0))
(assert (x29 x1883))
(assert (x1500 x1002))
(assert (x1881 x434 x1903))
(assert (= (x911 x1425) (ite (= x1278 x1425) x686 (x1081 x1425))))
(assert (= (x531 x507) (ite (and x800 x868) (x1441 x507) (x583 x507))))
(assert (=> (< (- x80 1) 10000) (= (x1666 x80) (x1617 x80))))
(assert (x29 x949))
(assert (= (ite (= x1515 x144) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x144)) (x1230 x144)))
(assert (= (x724 x1493) (ite (= x420 x1493) x1621 (x1003 x1493))))
(assert (x29 x718))
(assert (x1500 x154))
(assert (x29 x1901))
(assert (x29 x450))
(assert (x29 x582))
(assert (x29 x814))
(assert (x29 x1164))
(assert (x29 x1007))
(assert (= (+ 1 (x5 x1289)) (x5 (x374 x1289 1))))
(assert (= (x1230 x300) (ite (= x300 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x300))))
(assert (x29 x743))
(assert (x29 x522))
(assert (= (x283 (+ (- x420 x1716) x1472)) (ite (and (<= 164 (+ (- x420 x1716) x1472)) (< (+ x1472 (- x420 x1716)) (+ x1665 164))) (x1195 (- (+ x1472 (- x420 x1716)) 164)) (x540 (+ (- x420 x1716) x1472)))))
(assert (x29 x1900))
(assert (= (x5 (x1617 x812)) x812))
(assert (x29 x1746))
(assert (x29 x413))
(assert (x29 x1872))
(assert (x1500 x127))
(assert (x29 x558))
(assert (x1500 x1626))
(assert (x29 x330))
(assert (x1500 x971))
(assert (x29 x1292))
(assert (x1500 x1219))
(assert (x29 x1577))
(assert (x29 x1199))
(assert (x29 x83))
(assert (x29 x554))
(assert (x29 x943))
(assert (= (x1115 x571) (ite (and x1137 x1398) (x882 x571) (x1426 x571))))
(assert (x29 x1009))
(assert (x29 x849))
(assert (x29 x1173))
(assert (x52 x602 x356))
(assert (x29 x641))
(assert (= 0 (x989 x144)))
(assert (x29 x1849))
(assert (=> (> (+ 10000 1) x1626) (= (x1666 x1626) (x1617 x1626))))
(assert (= (x1666 142201243) (x1617 142201243)))
(assert (x29 x970))
(assert (= (ite (= x1278 x1852) x686 (x1081 x1852)) (x911 x1852)))
(assert (x29 x587))
(assert (=> (> (+ 10000 1) x338) (= (x1617 x338) (x1666 x338))))
(assert (x1500 x468))
(assert (x29 x361))
(assert (x1470 x1206))
(assert (x1500 x89))
(assert (x29 x1516))
(assert (= (x5 (x1617 x1107)) x1107))
(assert (x29 x908))
(assert (x29 x1269))
(assert (= 2743102681 (x5 (x1666 2743102681))))
(assert (x29 x370))
(assert (=> (< (- x1308 1) 10000) (= (x1666 x1308) (x1617 x1308))))
(assert (= (x1696 x184) (ite (= x1458 x184) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x184))))
(assert (x29 x1087))
(assert (x29 x1168))
(assert (x29 x465))
(assert (= x750 (x5 (x1617 x750))))
(assert (x1500 x530))
(assert (x29 x1260))
(assert (= x1519 (=> (and (not (= x639 0)) (= x1404 x1712) (= (x60 128) x1404) (not (or (and (< x1653 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1653))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1653)))) x1171)))
(assert (x29 x1878))
(assert (x29 x1136))
(assert (x29 x147))
(assert (= (x1748 x1238) 0))
(assert (x29 x676))
(assert (= (x5 (x1617 x273)) x273))
(assert (x29 x1640))
(assert (x29 x1356))
(assert (= (x283 (+ x1472 (- x144 x1716))) (ite (and (> (+ x1665 164) (+ (- x144 x1716) x1472)) (>= (+ (- x144 x1716) x1472) 164)) (x1195 (- (+ (- x144 x1716) x1472) 164)) (x540 (+ (- x144 x1716) x1472)))))
(assert (=> (> (+ 10000 1) x267) (= (x1617 x267) (x1666 x267))))
(assert (= (x1617 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x1666 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= 0 (x989 x1428)))
(assert (x29 x127))
(assert (x29 x652))
(assert (x1500 x876))
(assert (= (x5 (x1617 x958)) x958))
(assert (= (x5 (x1617 x1307)) x1307))
(assert (= x1543 (x5 (x1617 x1543))))
(assert (= (x1617 2798343961) (x1666 2798343961)))
(assert (= (x1617 115792089237316195423570985008687907853269984665640564039457) (x1666 115792089237316195423570985008687907853269984665640564039457)))
(assert (x29 x136))
(assert (= x707 (and (not x1150) x1896)))
(assert (= x1086 x797))
(assert (x29 x677))
(assert (x29 x933))
(assert (= x1801 x64))
(assert (x29 x530))
(assert (x29 x603))
(assert (=> (> (+ 10000 1) x47) (= (x1666 x47) (x1617 x47))))
(assert (= (x5 (x374 x1092 1)) (+ (x5 x1092) 1)))
(assert (x29 x324))
(assert (x29 x252))
(assert (= (ite (= x1586 x507) x922 (x1435 x507)) (x1279 x507)))
(assert (=> (> (+ 10000 1) x1776) (= (x1666 x1776) (x1617 x1776))))
(assert (x1500 x372))
(assert (x29 x1493))
(assert (= (x1748 x648) 0))
(assert (x29 x998))
(assert (x29 x344))
(assert (= (x5 (x1617 x306)) x306))
(assert (= (x535 x792) (ite (and x1073 x1137 (not x584)) (x1003 x792) (ite (and (not x584) (not x1073) x1137 (not x259) x1181) (x724 x792) (ite (and x1137 (not x1181) (not x584) (not x1073)) (x1003 x792) (x448 x792))))))
(assert (x29 x1214))
(assert (= 274184521717934524641157099916833587206 (x5 (x1617 274184521717934524641157099916833587206))))
(assert (x29 x1712))
(assert (= (ite (and x1073 x1137 (not x584)) (x1003 x1852) (ite (and (not x584) x1181 (not x1073) (not x259) x1137) (x724 x1852) (ite (and x1137 (not x1181) (not x584) (not x1073)) (x1003 x1852) (x448 x1852)))) (x535 x1852)))
(assert (=> (< (- x597 1) 10000) (= (x1617 x597) (x1666 x597))))
(assert (= x1909 x1099))
(assert (x29 x270))
(assert (= (x1125 (- (+ (- x507 x1716) x1472) 164)) (x1195 (- (+ (- x507 x1716) x1472) 164))))
(assert (x29 x65))
(assert (x29 x329))
(assert (x1500 x1151))
(assert (x1500 x1803))
(assert (= (x5 (x374 x1060 1)) (+ (x5 x1060) 1)))
(assert (=> (> (+ 10000 1) x1277) (= (x1666 x1277) (x1617 x1277))))
(assert (x29 x1320))
(assert (=> (> (+ 10000 1) x1307) (= (x1666 x1307) (x1617 x1307))))
(assert (x29 x1549))
(assert (x29 x21))
(assert (x1500 x340))
(assert (x1500 x1501))
(assert (= (x5 (x1666 87118632)) 87118632))
(assert (x29 x685))
(assert (= (ite (= x507 x1008) x220 (x1535 x507)) (x882 x507)))
(assert (x29 x1644))
(assert (x29 x899))
(assert (= (ite (= x1135 x420) x1127 (x337 x420)) (x1003 x420)))
(assert (= (x535 x1078) (ite (and x1137 (not x584) x1073) (x1003 x1078) (ite (and x1137 (not x259) (not x584) (not x1073) x1181) (x724 x1078) (ite (and (not x1073) (not x584) (not x1181) x1137) (x1003 x1078) (x448 x1078))))))
(assert (x29 x923))
(assert (= (x1378 x1028) (ite x1858 (ite (and x1833 x472) (x61 x1028) (x633 x1028)) (x61 x1028))))
(assert (= (ite (and x868 x800) (x1441 x1428) (x583 x1428)) (x531 x1428)))
(assert (x29 x1193))
(assert (x29 x1848))
(assert (= (ite (= x420 x215) x1621 (x1003 x215)) (x724 x215)))
(assert (= (x5 (x1617 x1695)) x1695))
(assert (x29 x1633))
(assert (x29 x1404))
(assert (= (x1125 (- (+ x1472 (- x792 x1716)) 164)) (x1195 (- (+ x1472 (- x792 x1716)) 164))))
(assert (x29 x1487))
(assert (= (x1518 x777) (ite (and x1198 x669 x485 (not x794) x419 x1618) (x1279 x777) (ite (and x1198 x485 (not x419) x1618 x669) (x1435 x777) (ite (and x1618 (not x669) x485 x1198) (x1880 x777) (ite (and (not x485) x1198 x1618) (x1230 x777) (x399 x777)))))))
(assert (x29 x1797))
(assert (= (ite (and x800 x868) (x1441 x571) (x583 x571)) (x531 x571)))
(assert (= x1138 (=> (= x173 (= x198 274184521717934524641157099916833587214)) (and (=> (not x173) x62) (=> (and (not (> 649617121 x1894)) (= x900 (x414 (x1617 274184521717934524641157099916833587214))) (= (x67 x1100) x1375) (= 32 x1334) (= x1610 1) (not (= 826074471 x1894)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1375) (= 36 x1745) (= x1745 36) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1075) (>= x1375 0) (<= x1600 1461501637330902918203684832716283019655932542975) (= x1100 (x495 (x1617 x597) (x1666 1) 0)) (= (x860 (- x1745 4)) x1799) (< 0 x900) (= x196 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1799) true) (< x1799 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1799))) (not (> 4 x1745)) (not (= x1894 649617121)) x173 (= x1600 x597) (not x196) (= x1894 1889567281)) x1899)))))
(assert (= (x911 x571) (ite (= x571 x1278) x686 (x1081 x571))))
(assert (= (x5 (x1666 274184521717934524641157099916833587214)) 274184521717934524641157099916833587214))
(assert (x29 x976))
(assert (x29 x1079))
(assert (= (ite (= x1458 x1425) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x1425)) (x1696 x1425)))
(assert (x29 x1691))
(assert (= (x1666 69947311) (x1617 69947311)))
(assert (x1470 x1888))
(assert (= (ite (= x1008 x1367) x1370 (x1880 x1008)) (x1435 x1008)))
(assert (x29 x823))
(assert (x29 x971))
(assert (= (x1115 x1401) (ite (and x1137 x1398) (x882 x1401) (x1426 x1401))))
(assert (= (ite (= x935 x1493) x1302 (x1230 x1493)) (x1880 x1493)))
(assert (= (x5 (x1617 x1501)) x1501))
(assert (= (ite (and (< (+ 164 (- x792 160)) (+ 164 x1665)) (<= 164 (+ (- x792 160) 164))) (x1195 (- (+ 164 (- x792 160)) 164)) (x540 (+ (- x792 160) 164))) (x283 (+ 164 (- x792 160)))))
(assert (x29 x1405))
(assert (=> (< (- x750 1) 10000) (= (x1666 x750) (x1617 x750))))
(assert (= 1461501637330902918203684832716283019655932542975 (x5 (x1666 1461501637330902918203684832716283019655932542975))))
(assert (= (ite (and (> (+ 164 x1665) (+ 164 (- x931 160))) (<= 164 (+ 164 (- x931 160)))) (x1195 (- (+ 164 (- x931 160)) 164)) (x540 (+ 164 (- x931 160)))) (x283 (+ (- x931 160) 164))))
(assert (= (x5 (x1666 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x29 x81))
(assert (= (x1279 x777) (ite (= x1586 x777) x922 (x1435 x777))))
(assert (x1470 x339))
(assert (x1500 x733))
(assert (x29 x601))
(assert (x29 x1247))
(assert (x1500 274184521717934524641157099916833587214))
(assert (x1470 x1443))
(assert (= (x5 (x1617 x691)) x691))
(assert (x29 x1282))
(assert (x29 x1651))
(assert (x29 x1307))
(assert (x29 x1694))
(assert (= (x5 (x1617 x91)) x91))
(assert (=> (< (- x917 1) 10000) (= (x1666 x917) (x1617 x917))))
(assert (x29 x1382))
(assert (= (x31 x1493) (ite (= x931 x1493) x10 (x911 x1493))))
(assert (x1500 x790))
(assert (x29 x984))
(assert (=> (< (- x852 1) 10000) (= (x1617 x852) (x1666 x852))))
(assert (x29 x838))
(assert (= (x5 (x374 x1447 1)) (+ (x5 x1447) 1)))
(assert (x29 x92))
(assert (x1470 x258))
(assert (= (and (not x819) x835) x1896))
(assert (= (x5 (x1666 243137395)) 243137395))
(assert (= x1618 x1137))
(assert (x1470 x1673))
(assert (x29 x1542))
(assert (= (x1195 (- (+ (- x931 x1716) x1472) 164)) (x1125 (- (+ (- x931 x1716) x1472) 164))))
(assert (=> (> (+ 10000 1) x1820) (= (x1666 x1820) (x1617 x1820))))
(assert (x29 x620))
(assert (= (ite (= x1008 x1382) x220 (x1535 x1382)) (x882 x1382)))
(assert (x1500 x37))
(assert (= 2061678023 (x5 (x1666 2061678023))))
(assert (x1500 x1652))
(assert (=> (< (- x8 1) 10000) (= (x1666 x8) (x1617 x8))))
(assert (x29 x716))
(assert (= x220 (x882 x1008)))
(assert (= x1833 (and (not x1091) x425)))
(assert (x29 x1280))
(assert (x1500 x248))
(assert (= (=> (and x913 (= x1766 (< (x1625 (x1617 x956)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1374 x328) (= (= 274184521717934524641157099916833587218 x956) x868) (= (x492 (x1617 274184521717934524641157099916833587206)) x1756) (= (x1625 (x1617 x956)) x400) x1766 (= x589 (x492 (x1617 x956))) (= (< x589 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1830) x1830 (= x913 (>= x1063 0)) (= (x492 (x1617 274184521717934524641157099916833587206)) x1063)) (and (=> (and (= 274184521717934524641157099916833587206 x708) (= x1855 (x1067 x165)) (= (x366 1461501637330902918203684832716283019655932542975 x641) x47) (<= 0 x1855) (not x741) (not x1072) x868 (= x79 (< x1855 x1502)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1855) (= 68 x458) (= x1628 x641) (not (= x1616 826074471)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x739) (= x1454 274184521717934524641157099916833587206) (= x501 1) (= x328 x458) (= (x860 (- x458 4)) x1779) (= x789 (< x1855 x510)) (not (= x1616 1889567281)) (= x510 x1502) (not (= x1616 649617121)) (= x1835 x1025) (= x1483 x510) (= x1025 (x1229 x811)) (= x741 (or (and (= (<= x1779 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 64 x1779)) (> x1779 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x1502 x667) (<= x641 1461501637330902918203684832716283019655932542975) (= (x366 1461501637330902918203684832716283019655932542975 x641) x917) (not x789) (not (> 649617121 x1616)) (<= 0 x1025) (= x118 76450787359836037641860180984291677749980919077056822294353438043884394381312) (<= x1025 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1526 (+ x1835 x667)) (< 0 x1561) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x165) (= x1561 (x414 (x1617 274184521717934524641157099916833587218))) (= x1072 (>= (+ x1502 x1025) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (= 2514000705 x1616)) (< (+ x1025 x1502) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x495 (x1617 x917) (x1666 1) 0) x934) (= (x860 (- x1855 x510)) x1651) (= x1598 x576) (not x79) (= 2835717307 x1616) (not (< x458 4)) (= 32 x1131) (= x811 (x495 (x1617 x47) (x1666 1) 0))) x1904) (=> (not x868) x608))) x1692))
(assert (x29 x637))
(assert (x29 x1018))
(assert (x1500 274184521717934524641157099916833587206))
(assert (x1500 x1443))
(assert (x1500 x957))
(assert (x29 x208))
(assert (x29 x1704))
(assert (x29 x236))
(assert (x29 x1145))
(assert (x29 x1665))
(assert (x29 x925))
(assert (x29 x1414))
(assert (=> (> (+ 10000 1) x1543) (= (x1617 x1543) (x1666 x1543))))
(assert (x29 x1085))
(assert (x29 x657))
(assert (x29 x1823))
(assert (= x1020 (=> (and (or (and (= x1442 x1397) (not x358) (= x757 (x1368 (+ 96 x1570)))) (and x358 (= 96 x1397))) (or (not x70) (and (= x200 x1740) (= x1228 (not x763)) (= (= x1740 0) x763) (= x494 (x1368 (+ 32 x1397))) (= x200 (ite x1228 1 0)) (< 0 x1740) (= (x16 x1397) x676) (not (or (and (> 32 x676) (= true (<= x676 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x676))) x70 (= x1740 (x1800 x494)))) (= x70 (< 0 x1201)) (= x1165 (x611 (x1617 x1568))) x264 (= x1201 (x16 x1397)) (not (= 0 x1065)) (= x358 (= x944 0)) (= x264 (< (x321 (x1617 274184521717934524641157099916833587206)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x512)))
(assert (x52 x258 x1536))
(assert (x29 x287))
(assert (x29 x770))
(assert (= (x1125 (- (+ (- x1382 x1716) x1472) 164)) (x1195 (- (+ x1472 (- x1382 x1716)) 164))))
(assert (= (ite (= x300 x1008) x220 (x1535 x300)) (x882 x300)))
(assert (= (ite (= x1135 x215) x1127 (x337 x215)) (x1003 x215)))
(assert (x1500 x1280))
(assert (x29 x1411))
(assert (=> (< (- x1872 1) 10000) (= (x1666 x1872) (x1617 x1872))))
(assert (x29 x1290))
(assert (=> (> (+ 10000 1) x691) (= (x1617 x691) (x1666 x691))))
(assert (= (ite (and x1398 x1137) (x882 x505) (x1426 x505)) (x1115 x505)))
(assert (x29 x1409))
(assert (x29 x904))
(assert (x29 x760))
(assert (=> (> (+ 10000 1) x1407) (= (x1617 x1407) (x1666 x1407))))
(assert (x29 x1183))
(assert (= (x31 x1008) (ite (= x931 x1008) x10 (x911 x1008))))
(assert (= (x5 (x1617 x190)) x190))
(assert (= (ite (> (+ 164 x1665) 196) (x1195 32) (x540 196)) (x283 196)))
(assert (=> (< (- x1656 1) 10000) (= (x1617 x1656) (x1666 x1656))))
(assert (= (=> (and (= x1006 x904) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x615) x518) (= (x1266 (x1617 274184521717934524641157099916833587206)) x271) (= x1258 (< (x1304 (x1617 x1568)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x518 x1258 (= (x1304 (x1617 x1568)) x46) x428 (= x804 (x1266 (x1617 274184521717934524641157099916833587206))) (= (<= 0 x271) x428) (= (x1266 (x1617 x1568)) x615) (= x819 (= x1568 274184521717934524641157099916833587218))) (and (=> (not x819) x1172) (=> (and (= x334 (x951 x796)) x819 (= x679 x244) (= (< x334 x1) x1539) (= (x495 (x1617 x768) (x1666 1) 0) x595) (= x908 68) (= x1065 1) (= x905 x731) (= x796 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (= x731 (x1893 x1758)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x706) (= x1163 x768) (= (< x334 x244) x1567) (= x853 x1) (<= x334 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x1356 2514000705)) (not x834) (= 274184521717934524641157099916833587206 x805) (not (< x1356 649617121)) (= x768 x436) (= x908 x904) (> x520 0) (<= x768 1461501637330902918203684832716283019655932542975) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x387) true) (< x387 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x387)) x834) (= (x860 (- x334 x244)) x1464) (<= x731 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not x1567) (= (>= (+ x1 x731) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1838) (< (+ x731 x1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1758 (x495 (x1617 x768) (x1666 1) 0)) (not x1838) (not (= x1356 1889567281)) (not (= x1356 826074471)) (= x387 (x860 (- x908 4))) (= (x414 (x1617 274184521717934524641157099916833587218)) x520) (not (< x908 4)) (not x1539) (= 2835717307 x1356) (>= x731 0) (not (= 649617121 x1356)) (= 32 x944) (>= x334 0) (= x1 x244) (= x760 (+ x905 x853)) (= x1337 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= 274184521717934524641157099916833587206 x1309)) x1020))) x640))
(assert (=> (< (- x1256 1) 10000) (= (x1617 x1256) (x1666 x1256))))
(assert (x29 x1740))
(assert (= (x1617 2293535753) (x1666 2293535753)))
(assert (x29 x891))
(assert (x29 x1779))
(assert (x29 x1166))
(assert (x29 x683))
(assert (= (x283 (+ x1472 (- x1078 x1716))) (ite (and (>= (+ x1472 (- x1078 x1716)) 164) (> (+ x1665 164) (+ (- x1078 x1716) x1472))) (x1195 (- (+ (- x1078 x1716) x1472) 164)) (x540 (+ x1472 (- x1078 x1716))))))
(assert (x29 x1852))
(assert (x29 x267))
(assert (x29 x1490))
(assert (x29 x1306))
(assert (x29 x1639))
(assert (= (x882 x1852) (ite (= x1008 x1852) x220 (x1535 x1852))))
(assert (= (x1279 x1493) (ite (= x1586 x1493) x922 (x1435 x1493))))
(assert (=> (> (+ 10000 1) x1679) (= (x1617 x1679) (x1666 x1679))))
(assert (x29 x660))
(assert (x29 x1548))
(assert (x29 x1723))
(assert (=> (< (- x89 1) 10000) (= (x1666 x89) (x1617 x89))))
(assert (x29 x1293))
(assert (x29 x1608))
(assert (x29 x306))
(assert (x29 x831))
(assert (x29 x997))
(assert (= x768 (x5 (x1617 x768))))
(assert (= (ite (and (< (+ x1472 (- x673 x1716)) (+ x1665 164)) (<= 164 (+ x1472 (- x673 x1716)))) (x1195 (- (+ x1472 (- x673 x1716)) 164)) (x540 (+ x1472 (- x673 x1716)))) (x283 (+ (- x673 x1716) x1472))))
(assert (x29 x1555))
(assert (x1500 x338))
(assert (= (x1195 (- (+ (- x420 x1716) x1472) 164)) (x1125 (- (+ x1472 (- x420 x1716)) 164))))
(assert (= (x724 x673) (ite (= x673 x420) x1621 (x1003 x673))))
(assert (x29 x939))
(assert (= x89 (x5 (x1617 x89))))
(assert (x1500 x1473))
(assert (= (x5 (x1666 2258409472)) 2258409472))
(assert (x29 x1623))
(assert (x29 x1607))
(assert (=> (> (+ 10000 1) x530) (= (x1666 x530) (x1617 x530))))
(assert (x29 x830))
(assert (= (x1195 (- (+ (- x1493 x1716) x1472) 164)) (x1125 (- (+ (- x1493 x1716) x1472) 164))))
(assert (x29 x1111))
(assert (x29 x1908))
(assert (x29 x1710))
(assert (x1500 x1695))
(assert (=> (> (+ 10000 1) x1410) (= (x1666 x1410) (x1617 x1410))))
(assert (= 1889567281 (x5 (x1666 1889567281))))
(assert (x29 x488))
(assert (x1033 x232 x927))
(assert (x29 x85))
(assert (x29 x617))
(assert (x29 x382))
(assert (x29 x1301))
(assert (x29 x888))
(assert (= (x5 (x1617 x1753)) x1753))
(assert (= 0 (x989 x931)))
(assert (= (=> (= (= 274184521717934524641157099916833587214 x248) x1672) (and (=> (and (not (= 649617121 x1269)) (= (x366 1461501637330902918203684832716283019655932542975 x1206) x1820) (not x656) (= x955 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (= x780 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1889)) (> 64 x1889)) (> x1889 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x1269 826074471)) (<= x111 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (+ x111 x354) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (> x354 x725) x193) (= (+ x32 x717) x1223) (not (< x1269 649617121)) (not x193) (not x211) (= x208 68) (>= x111 0) (not (= 1889567281 x1269)) (= x208 x1283) (= x1547 x354) (= x1837 274184521717934524641157099916833587206) (> x1741 0) (not (> 4 x208)) (= (x860 (- x208 4)) x1889) (not (= 2514000705 x1269)) (= x1381 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (= x725 (x229 x1381)) (= x921 274184521717934524641157099916833587206) (= x376 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= (x860 (- x725 x1547)) x1132) (<= x1206 1461501637330902918203684832716283019655932542975) (= x1604 (x495 (x1617 x1417) (x1666 1) 0)) (= x1417 (x366 1461501637330902918203684832716283019655932542975 x1206)) (= x1206 x1628) x1672 (= x211 (> x1547 x725)) (= x1495 x1547) (= (x1752 x1604) x111) (= x945 1) (= x1175 x348) (<= 0 x725) (= x656 (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x111 x354))) (not x780) (= 2835717307 x1269) (= x717 x354) (= (x414 (x1617 274184521717934524641157099916833587214)) x1741) (= (x495 (x1617 x1820) (x1666 1) 0) x950) (= x1208 32) (= x32 x111) (<= x725 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x411) (=> (not x1672) x529))) x496))
(assert (x1470 x513))
(assert (x29 x1055))
(assert (x29 x1014))
(assert (= (x5 (x1666 2690754053)) 2690754053))
(assert (= (x1617 468353030) (x1666 468353030)))
(assert (x29 x1135))
(assert (=> (< (- x140 1) 10000) (= (x1666 x140) (x1617 x140))))
(assert (x1470 x602))
(assert (x29 x293))
(assert (= (ite (and x1073 (not x584) x1137) (x1003 x1008) (ite (and x1181 (not x1073) x1137 (not x584) (not x259)) (x724 x1008) (ite (and x1137 (not x1073) (not x1181) (not x584)) (x1003 x1008) (x448 x1008)))) (x535 x1008)))
(assert (=> (> (+ 10000 1) x578) (= (x1666 x578) (x1617 x578))))
(assert (x1470 1461501637330902918203684832716283019655932542975))
(assert (x29 x195))
(assert (x1500 x660))
(assert (=> (> (+ 10000 1) x635) (= (x1617 x635) (x1666 x635))))
(assert (x29 x1223))
(assert (x29 x514))
(assert (= (x989 x792) 0))
(assert (x29 x938))
(assert (x29 x1185))
(assert (x29 x1468))
(assert (x29 x773))
(assert (= x1819 (x5 (x1617 x1819))))
(assert (x29 x1295))
(assert (x29 x618))
(assert (= x1843 (=> (and (not (= 468353030 x1245)) (< x1245 911411945) (= x1245 759532456) (= x1550 (x495 (x1617 x1679) x623 0)) (<= x1679 1461501637330902918203684832716283019655932542975) (not (> 468353030 x1245)) (= x345 (x204 x695)) (= x695 (x495 (x1617 x91) x1550 0)) (>= x345 0) (not (= x1245 635128645)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x345) (<= x91 1461501637330902918203684832716283019655932542975) (= (x495 (x1617 x1308) (x1666 7) 0) x623) (< x1245 2293535753) (= x479 x345) (= (x414 (x1617 274184521717934524641157099916833587206)) x488) (> x488 0)) (=> (and (= x949 x1294) (or (and (= (x495 (x1617 x252) x980 0) x133) (= (x366 1461501637330902918203684832716283019655932542975 x1848) x252) (= (x495 (x1617 x578) (x1666 6) 0) x980) x1369) (and (= x1277 (x366 1461501637330902918203684832716283019655932542975 x1848)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x202 x889)) (not x1369) (= x1704 x1109) (= (* x202 x889) x1109) (= (x366 1461501637330902918203684832716283019655932542975 x1848) x1236) (= (x495 (x1617 x1277) x1477 0) x662) (= (x495 (x1617 x578) (x1666 5) 0) x1727) (= x1477 (x495 (x1617 x578) (x1666 6) 0)) (= x1254 (x495 (x1617 x1236) x1727 0)))) (<= 0 x1512) (= 243137395 x1166) (= (> x1611 x456) x1386) (<= x1002 1461501637330902918203684832716283019655932542975) (= x1878 x1294) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1809) (>= 1461501637330902918203684832716283019655932542975 x776) (= 0 x580) (= x1292 x578) (= (x495 (x1617 x578) (x1666 9) 0) x643) x963 (= x1347 2) (>= x456 0) (= (x495 (x1617 x8) x1355 0) x693) (>= x1358 0) (= x456 (x56 x1631)) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1517 0) (= (x374 x1289 1) x515) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1517) (or (and x153 (= (x366 1461501637330902918203684832716283019655932542975 x1848) x1385) (= (x495 (x1617 x530) x1393 0) x135) (= (x366 1461501637330902918203684832716283019655932542975 x1002) x530) (= 128 x405) (= (x495 (x1617 x1385) x533 0) x1393) (= x533 (x495 (x1617 x578) (x1666 7) 0))) (and (<= 0 x92) (= x1760 (x1648 x1557)) (<= x1883 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1557 (x495 (x1617 x578) (x1666 1) 0)) (= (x204 x138) x92) (<= x92 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1760) (or (and (= x638 (< x1668 x1607)) (= (= 0 x92) x1161) x858 (or (and (= x1607 x618) (not x638)) (and (= x761 x618) (= x761 (x809 160)) x638)) (or (and (not (> x1197 x618)) (= x1840 x1101) (= x1197 (x1562 128)) (= (x860 (- x618 x1197)) x1840) x1161) (and (= 604800 x50) (not x1161) (not (> x92 x618)) (= x1402 (ite (> 604800 x654) x654 604800)) (= x654 (x860 (- x618 x92))) (= x1402 x1101))) (= x1668 (x809 160))) (and (not x858) (= 0 x1101))) (= (x366 1461501637330902918203684832716283019655932542975 x1848) x958) (= (x495 (x1617 x578) (x1666 7) 0) x1016) (= x1883 (x163 x1141)) (= x858 (< x92 x1824)) (not x153) (>= x1760 0) (>= x1883 0) (= x138 (x495 (x1617 x1107) x350 0)) (or (and (= x372 (x366 1461501637330902918203684832716283019655932542975 x1002)) x1395 (= 192 x405) (= (x495 (x1617 x1473) x879 0) x1037) (= x1062 (x495 (x1617 x372) x1037 0)) (= x1473 (x366 1461501637330902918203684832716283019655932542975 x1848)) (= (x495 (x1617 x578) (x1666 7) 0) x879)) (and (= x1151 (x366 1461501637330902918203684832716283019655932542975 x1002)) (= x1377 (* x1358 x1101)) (= x854 x1377) (= (x495 (x1617 x802) x187 0) x1877) (= x187 (x495 (x1617 x578) (x1666 3) 0)) (= (x366 1461501637330902918203684832716283019655932542975 x1002) x1316) (= x802 (x366 1461501637330902918203684832716283019655932542975 x1848)) (= x1103 (x495 (x1617 x1151) x1877 0)) (= (x495 (x1617 x1342) x1866 0) x1506) (= (x366 1461501637330902918203684832716283019655932542975 x1848) x1342) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1358 x1101)) (not x1395) (= 192 x405) (= (x495 (x1617 x578) (x1666 7) 0) x1866) (= x1749 (x495 (x1617 x1316) x1506 0)))) (= (x495 (x1617 x958) x1016 0) x350) (= (x809 160) x1824) (= x1107 (x366 1461501637330902918203684832716283019655932542975 x1002)) (= (x374 x1557 1) x1141) (= x1395 (= x1101 0)))) (>= x202 0) (>= 1461501637330902918203684832716283019655932542975 x1848) x1440 (> 468353030 x1166) (= x1652 (x366 1461501637330902918203684832716283019655932542975 x1848)) (<= x202 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x923) (= (= x889 0) x1369) (<= x1512 1461501637330902918203684832716283019655932542975) (= x726 x559) (not (= x1166 69947311)) (not (> x578 x231)) (= x1841 x523) (= x759 (x1368 (+ x405 32))) (= x559 x1002) (= x459 x657) (>= x231 0) (= (x495 (x1617 x1002) x556 0) x1059) (= (x495 (x1617 x578) (x1666 10) 0) x1355) (> x1677 0) (<= 0 x231) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1358) (= x849 x1607) (> x231 x578) (= x1611 (x18 x759)) (= x1136 x1848) (= x459 x1481) (>= 1461501637330902918203684832716283019655932542975 x949) (= (= x1007 x1878) x963) (= 32 x1602) (= x776 x1729) (= x1180 (= x1390 x726)) x57 (< x1166 2293535753) (= (x365 0) x1552) (< x1166 911411945) (= (x1368 (+ x405 64)) x1794) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x456) (or (and (= x889 0) (not x1386)) (and (= (> x1607 x408) x28) (= x408 (x18 x759)) x1386 (or (and (not x28) (= x172 x1607)) (and (= x1901 x172) x28 (= x1901 (x18 x759)))) (or (and (not (< x172 x572)) (= (x860 (- x172 x572)) x1400) (= x572 (x461 x405)) (= x889 x1400) x310) (and (= 604800 x1185) (not (< x172 x456)) (not x310) (= (ite (> 604800 x926) x926 604800) x861) (= x861 x889) (= (x860 (- x172 x456)) x926))) (= (= 0 x456) x310))) (not (< x231 x578)) (< x1552 1461501637330902918203684832716283019655932542976) (= x1289 (x495 (x1617 x578) (x1666 1) 0)) (= (x495 (x1617 x1652) x368 0) x1631) (= x1440 (= x1841 2)) (= (< 0 x1069) x561) x1186 (= (x495 (x1617 x1848) x643 0) x556) (= x57 (= (uninterp_mod (* 32 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x459)) (= x1729 x1451) (= (x163 x515) x1517) x561 (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x1358 0) x153) (>= x923 0) (= x1294 x15) (= x479 x1069) (= (x1648 x1289) x1809) (= x1379 0) (>= x1809 0) (<= 0 x231) (= (x414 (x1617 274184521717934524641157099916833587206)) x1677) (not (= x1166 87118632)) (not (= x1166 142201243)) (> 1461501637330902918203684832716283019655932542976 x1007) (= (x878 x1059) x1358) (= (x107 32) x1007) (= x1034 x523) (= (x495 (x1617 x578) (x1666 6) 0) x368) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (= x295 x1512) (= x295 x1390) (= x122 x523) (= x390 x580) (= (x366 1461501637330902918203684832716283019655932542975 x1848) x8) (= (x1650 x693) x202) x1180 (= 0 x1240) (>= x776 0) (= x1186 (= x15 x1552))) x1655))))
(assert (= (ite x1858 (ite (and x1833 x472) (x174 x1758) (x1067 x1758)) (x1067 x1758)) (x951 x1758)))
(assert (= (x882 x144) (ite (= x144 x1008) x220 (x1535 x144))))
(assert (x29 x1127))
(assert (= (or (and x868 x800) (and x1777 x551)) x1041))
(assert (= (=> (and (= x1294 x198) (= x559 x597)) x1681) x512))
(assert (x29 x213))
(assert (x29 x1132))
(assert (x29 x600))
(assert (= (x1125 (- (+ 164 (- x522 160)) 164)) (x1195 (- (+ (- x522 160) 164) 164))))
(assert (= (x1748 x1698) 0))
(assert (= (x229 x1604) (ite (and x800 x868) (x61 x1604) (x631 x1604))))
(assert (= (ite (and (< (+ 164 (- x777 160)) (+ x1665 164)) (>= (+ (- x777 160) 164) 164)) (x1195 (- (+ (- x777 160) 164) 164)) (x540 (+ 164 (- x777 160)))) (x283 (+ 164 (- x777 160)))))
(assert (= (x1003 x144) (ite (= x144 x1135) x1127 (x337 x144))))
(assert (= (x1115 x1493) (ite (and x1398 x1137) (x882 x1493) (x1426 x1493))))
(assert (x29 x1200))
(assert (x29 x1139))
(assert (= 0 (x989 x1401)))
(assert (x29 x271))
(assert (= (ite (= x1177 x673) x226 (x1696 x673)) (x151 x673)))
(assert (= (and x1198 x1618) x800))
(assert (= (x5 (x1617 x1002)) x1002))
(assert (x29 x778))
(assert (= x1655 (=> (and (= x1348 (x495 (x1617 x578) (x1666 4) 0)) (= x1438 (x495 (x1617 x812) x555 0)) (= x691 (x366 1461501637330902918203684832716283019655932542975 x1848)) (<= x4 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x831 0) (<= x831 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x495 (x1617 x578) (x1666 3) 0) x1839) (= (x495 (x1617 x1256) x1685 0) x969) (= x812 (x366 1461501637330902918203684832716283019655932542975 x1848)) (= x1685 (x495 (x1617 x691) x1839 0)) (<= 0 x4) (= (x495 (x1617 x1407) x1348 0) x1272) (= x4 (x909 x969)) (= x1091 (= x1644 0)) (= x305 (x102 x1438)) (= x831 (x319 x736)) (= (x495 (x1617 x406) x116 0) x736) (= x1256 (x366 1461501637330902918203684832716283019655932542975 x1002)) (= (x495 (x1617 x1410) x1272 0) x116) (= (x366 1461501637330902918203684832716283019655932542975 x1002) x1410) (not (> x831 x4)) (= (x495 (x1617 x578) (x1666 5) 0) x555) (= x1407 (x366 1461501637330902918203684832716283019655932542975 x1848)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x305) (<= 0 x305) (= (x860 (- x4 x831)) x1644) (= x406 (x366 1461501637330902918203684832716283019655932542975 x949))) (and (=> (and (or (not x385) (and x385 (= x1015 (x1368 (+ x1415 x1660))))) (= x1490 (x366 1461501637330902918203684832716283019655932542975 x1848)) (= (- (/ x1351 1000000000000000000) (uninterp_frac x1351 1000000000000000000)) x925) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x788 x968)) (= (x1368 (+ x405 100)) x710) (= (x1368 (+ 76450787359836037641860180984291677749980919077056822294353438043884394381312 x147)) x197) (= (x1368 (+ 96 x405)) x648) (= x147 (x366 26959946667150639794667015087019630673637144422540572481103610249215 x258)) (= (x1368 (+ x1794 68)) x1856) (> x305 0) (= x117 (x495 (x1617 x1490) x164 0)) (= x1193 (x414 (x1617 x1828))) (= x560 (x495 (x1617 x338) x1429 0)) (= x730 (x495 (x1617 x80) x117 0)) (= x997 (x860 (- x450 x1794))) (= (x366 x1218 x195) x1580) (= x80 (x366 1461501637330902918203684832716283019655932542975 x949)) (= 1 x1218) (= x1217 (x495 (x1617 x578) (x1666 4) 0)) (= (- (/ x1683 x305) (uninterp_frac x1683 x305)) x788) (= x1042 0) (= (> x1193 0) x247) (= x957 (x366 1461501637330902918203684832716283019655932542975 x1848)) (not x1091) (= (x495 (x1617 x578) (x1666 11) 0) x164) (= x195 (ite (< 115792089237316195423570985008687907853269984665640564039457 x1644) 1 0)) (= (x495 (x1617 x96) x1875 0) x1429) (= x1875 (x495 (x1617 x957) x1217 0)) (= (x366 1461501637330902918203684832716283019655932542975 x949) x1828) (= x96 (x366 1461501637330902918203684832716283019655932542975 x1002)) (>= x968 0) (= x968 (x149 x730)) x247 (= (> x278 x1660) x385) (= (x539 x648) x258) (= x1004 (> x1660 0)) (= (x1368 (+ 128 x710)) x1415) (= (x366 1461501637330902918203684832716283019655932542975 x1002) x381) (= (x860 (- x997 32)) x1694) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x968) (= (x311 x1794) x1660) (= (x366 1461501637330902918203684832716283019655932542975 x949) x338) (= (* x788 x968) x1351) (or (and (= x1190 (> x1660 32)) (= x1199 (x1104 x1516)) (= x1516 x648) (= x1233 x1415) x1004 (or (and x1190 (= x1376 (x1104 x1698)) (= (x1368 (+ 64 x1794)) x1698) (= x541 (> x1660 64)) (or (and (or (and (= x907 (x1368 (+ x450 160))) (= x626 (< 128 x1660)) (not x626) (= x278 128) x261 (= x1238 (x1368 (+ x1794 128))) (= (x1104 x1238) x766)) (and (= x278 96) (not x261))) (= (x1368 (+ 96 x1794)) x1524) (= (x1368 (+ 128 x450)) x967) (= (x1104 x1524) x976) x541 (= x261 (< 96 x1660))) (and (not x541) (= 64 x278))) (= (x1368 (+ x450 96)) x1032)) (and (= 32 x278) (not x1190)))) (and (not x1004) (= x278 0))) (= (x1368 (+ 100 x1794)) x450) (= x1580 0) (= (uninterp_mod (* 1000000000000000000 x1644) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1683)) x893) (=> x1091 x484)))))
(assert (x29 x1761))
(assert (x29 x1857))
(assert (x29 x468))
(assert (= (x1230 x1008) (ite (= x1515 x1008) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1008))))
(assert (= (x5 (x1617 x1410)) x1410))
(assert (= (x1125 (- (+ x1472 (- x777 x1716)) 164)) (x1195 (- (+ x1472 (- x777 x1716)) 164))))
(assert (x29 x1783))
(assert (x29 x1527))
(assert (x1500 x812))
(assert (= (x535 x673) (ite (and x1137 (not x584) x1073) (x1003 x673) (ite (and x1137 (not x259) (not x584) (not x1073) x1181) (x724 x673) (ite (and x1137 (not x584) (not x1181) (not x1073)) (x1003 x673) (x448 x673))))))
(assert (x29 x820))
(assert (=> (> (+ 10000 1) x547) (= (x1617 x547) (x1666 x547))))
(assert (x29 x314))
(assert (x29 x799))
(assert (x29 x436))
(assert (= (ite (= x1428 x1278) x686 (x1081 x1428)) (x911 x1428)))
(assert (x29 x288))
(assert (x29 x1482))
(assert (= 0 (x389 x1823)))
(assert (x29 x520))
(assert (x29 x1459))
(assert (= (x1696 x1493) (ite (= x1458 x1493) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x1493))))
(assert (= (ite (and (not x895) x1618 x1198) (x1518 x571) (x471 x571)) (x688 x571)))
(assert (= (ite (= x1078 x935) x1302 (x1230 x1078)) (x1880 x1078)))
(assert (= (x724 x300) (ite (= x300 x420) x1621 (x1003 x300))))
(assert (=> (< (- x379 1) 10000) (= (x1666 x379) (x1617 x379))))
(assert (x29 x170))
(assert (x29 x1119))
(assert (x29 x1602))
(assert (x1500 x140))
(assert (x29 x1253))
(assert (x29 x316))
(assert (x29 x1627))
(assert (= (ite (= x571 x1177) x226 (x1696 x571)) (x151 x571)))
(assert (x29 x37))
(assert (= (x1518 x673) (ite (and x485 x1198 (not x794) x1618 x669 x419) (x1279 x673) (ite (and x669 (not x419) x485 x1198 x1618) (x1435 x673) (ite (and x1618 (not x669) x485 x1198) (x1880 x673) (ite (and x1198 (not x485) x1618) (x1230 x673) (x399 x673)))))))
(assert (= x245 (=> (= (= x1828 274184521717934524641157099916833587214) x235) (and (=> (not x235) x497) (=> (and (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x1167) (not (= 649617121 x1341)) (= x1675 274184521717934524641157099916833587206) (= x972 (x860 (- x779 4))) (= x381 x790) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1577) (not (= x1341 826074471)) (= x779 68) (= (x860 (- x1577 x952)) x1247) (= x402 x139) x235 (not (= x1341 1889567281)) (= x692 (x414 (x1617 274184521717934524641157099916833587214))) (= x223 (or (> x972 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x972 64) (= (<= x972 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not (= 2514000705 x1341)) (= x952 x925) (= x1891 (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x402 x201))) (= (+ x1224 x139) x606) (= x1577 (x61 x651)) (= x1259 (> x952 x1577)) (< 0 x692) (not x223) (not x1259) (<= 0 x1577) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) (= x1336 x779) (= (x495 (x1617 x790) (x1666 1) 0) x1416) (not (> 4 x779)) (= x402 (x1159 x1416)) (<= x790 1461501637330902918203684832716283019655932542975) (not (< x1341 649617121)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x651) (>= x402 0) (= 32 x932) (= x201 x952) (= x1087 1) (= x30 (< x1577 x201)) (not x1891) (= x734 (x495 (x1617 x790) (x1666 1) 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x201 x402)) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x704) (= 2835717307 x1341) (= x790 x157) (not x30) (= x201 x1224) (= x158 274184521717934524641157099916833587206)) x1811)))))
(assert (x29 x1458))
(assert (x29 x710))
(assert (= (ite (= x1425 x1051) x1276 (x1829 x1425)) (x1554 x1425)))
(assert (x29 x528))
(assert (= (x1518 x571) (ite (and x485 x1198 x419 (not x794) x669 x1618) (x1279 x571) (ite (and (not x419) x1618 x1198 x485 x669) (x1435 x571) (ite (and x485 x1618 x1198 (not x669)) (x1880 x571) (ite (and x1198 x1618 (not x485)) (x1230 x571) (x399 x571)))))))
(assert (= (ite (= x1278 x931) x686 (x1081 x931)) (x911 x931)))
(assert (= (ite (= x1515 x507) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x507)) (x1230 x507)))
(assert (= (x5 (x1617 x953)) x953))
(assert (=> (< (- x340 1) 10000) (= (x1617 x340) (x1666 x340))))
(assert (x29 x1227))
(assert (x29 x1434))
(assert (x29 x825))
(assert (= (x5 (x1617 x1227)) x1227))
(assert (x29 x1619))
(assert (x1500 x1147))
(assert (= (x5 (x1617 x1270)) x1270))
(assert (x29 x1556))
(assert (x29 x994))
(assert (x29 x1064))
(assert (x29 x40))
(assert (= (x31 x184) (ite (= x931 x184) x10 (x911 x184))))
(assert (= (ite (= x1135 x1401) x1127 (x337 x1401)) (x1003 x1401)))
(assert (x29 x1799))
(assert (= (ite (= x1008 x571) x220 (x1535 x571)) (x882 x571)))
(assert (x29 x2))
(assert (x29 x1525))
(assert (x29 x1773))
(assert (x29 x376))
(assert (x29 x1743))
(assert (= x1568 (x5 (x1617 x1568))))
(assert (x1500 x1256))
(assert (x29 x342))
(assert (x29 x1008))
(assert (x29 x774))
(assert (x29 x1220))
(assert (= (x5 (x1617 x1820)) x1820))
(assert (x29 x1058))
(assert (= x1530 (x5 (x1617 x1530))))
(assert (x29 x792))
(assert (x29 x1170))
(assert (x29 x78))
(assert (x29 x479))
(assert (x1500 x1410))
(assert (= (ite (and (> (+ x1665 164) (+ (- x522 160) 164)) (>= (+ 164 (- x522 160)) 164)) (x1195 (- (+ 164 (- x522 160)) 164)) (x540 (+ (- x522 160) 164))) (x283 (+ (- x522 160) 164))))
(assert (x29 x339))
(assert (x29 x777))
(assert (x29 x95))
(assert (x29 x610))
(assert (x1500 x1385))
(assert (= (ite (= x1008 x1401) x220 (x1535 x1401)) (x882 x1401)))
(assert (=> (> (+ 10000 1) x1342) (= (x1666 x1342) (x1617 x1342))))
(assert (x29 x378))
(assert (= (ite (= x1008 x935) x1302 (x1230 x1008)) (x1880 x1008)))
(assert (x29 x1803))
(assert (= (x1125 (- (+ (- x673 160) 164) 164)) (x1195 (- (+ 164 (- x673 160)) 164))))
(assert (x29 x757))
(assert (= (x1125 (- (+ 164 (- x1428 160)) 164)) (x1195 (- (+ (- x1428 160) 164) 164))))
(assert (x29 x1319))
(assert (= (x283 (+ (- x1428 160) 164)) (ite (and (>= (+ 164 (- x1428 160)) 164) (< (+ 164 (- x1428 160)) (+ x1665 164))) (x1195 (- (+ (- x1428 160) 164) 164)) (x540 (+ (- x1428 160) 164)))))
(assert (x29 x1267))
(assert (x29 x1417))
(assert (= 2293535753 (x5 (x1666 2293535753))))
(assert (= (ite (= x300 x1135) x1127 (x337 x300)) (x1003 x300)))
(assert (= (ite (= x1586 x792) x922 (x1435 x792)) (x1279 x792)))
(assert (= (ite (and x1618 x669 (not x794) x485 x419 x1198) (x1279 x507) (ite (and x1198 x485 (not x419) x669 x1618) (x1435 x507) (ite (and x1198 x1618 (not x669) x485) (x1880 x507) (ite (and x1198 x1618 (not x485)) (x1230 x507) (x399 x507))))) (x1518 x507)))
(assert (x29 x458))
(assert (x1500 x96))
(assert (= (x151 x184) (ite (= x184 x1177) x226 (x1696 x184))))
(assert (=> (< (- x733 1) 10000) (= (x1666 x733) (x1617 x733))))
(assert (x1500 x1659))
(assert (x29 x231))
(assert (= (x1748 x1524) 0))
(assert (x29 x748))
(assert (x29 x1820))
(assert (= 0 (x989 x420)))
(assert (x29 x776))
(assert (x29 x1042))
(assert (= (ite (and x738 x699 (not x429) x1105 x227 x225) (x1554 x571) (ite (and x1105 x227 x738 x225 (not x699)) (x1829 x571) (ite (and x1105 x738 (not x225) x227) (x151 x571) (ite (and x1105 x738 (not x227)) (x1696 x571) (x1707 x571))))) (x1093 x571)))
(assert (= 2835717307 (x5 (x1666 2835717307))))
(assert (x29 x184))
(assert (x29 x160))
(assert (= (x5 (x1617 x1642)) x1642))
(assert (= (x1666 649617121) (x1617 649617121)))
(assert (= (x283 (+ (- x1425 x1716) x1472)) (ite (and (> (+ x1665 164) (+ (- x1425 x1716) x1472)) (>= (+ x1472 (- x1425 x1716)) 164)) (x1195 (- (+ x1472 (- x1425 x1716)) 164)) (x540 (+ x1472 (- x1425 x1716))))))
(assert (x1500 x578))
(assert (x29 x910))
(assert (= (x229 x1381) (ite (and x868 x800) (x61 x1381) (x631 x1381))))
(assert (x29 x1346))
(assert (= (ite (= x931 x505) x10 (x911 x505)) (x31 x505)))
(assert (= (=> (and (= x1549 (x414 (x1617 274184521717934524641157099916833587206))) (>= x1585 0) (>= 1461501637330902918203684832716283019655932542975 x1543) (not (= 2690754053 x1414)) (> 2960351575 x1414) (= x1413 (x495 (x1617 x1543) x332 0)) (< 0 x1549) (not (< x1414 2293535753)) (not (> 2690754053 x1414)) (= x332 (x495 (x1617 x902) (x1666 5) 0)) (not (= x1414 2743102681)) (= x1585 (x1389 x1413)) (= x1585 x1030) (not (= 2764855426 x1414)) (= x1414 2798343961) (<= x1585 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (=> (and (= x1076 x1292) (= x324 1) (= x127 x1136) (= x559 x267) (= x1005 x1030) x625 (= (= 1 x1005) x625)) x1129)) x1806))
(assert (= (x724 x507) (ite (= x507 x420) x1621 (x1003 x507))))
(assert (= (x1666 604800) (x1617 604800)))
(assert (x29 x108))
(assert (x1500 x295))
(assert (x29 x1789))
(assert (= (x151 x1425) (ite (= x1177 x1425) x226 (x1696 x1425))))
(assert (x29 x1586))
(assert (=> (> (+ 10000 1) x1371) (= (x1617 x1371) (x1666 x1371))))
(assert (x29 x1751))
(assert (= (x1195 (- (+ (- x1382 160) 164) 164)) (x1125 (- (+ (- x1382 160) 164) 164))))
(assert (=> (> (+ 10000 1) x395) (= (x1666 x395) (x1617 x395))))
(assert (x29 x1819))
(assert (x29 x24))
(assert (= (ite (= x1515 x673) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x673)) (x1230 x673)))
(assert (x29 x1341))
(assert (=> (> (+ 10000 1) x248) (= (x1617 x248) (x1666 x248))))
(assert (x29 x1401))
(assert (x29 x10))
(assert (= (x989 x505) 0))
(assert (x29 x1632))
(assert (x29 x1056))
(assert (= (x535 x522) (ite (and (not x584) x1073 x1137) (x1003 x522) (ite (and (not x259) (not x584) x1137 (not x1073) x1181) (x724 x522) (ite (and (not x584) (not x1073) x1137 (not x1181)) (x1003 x522) (x448 x522))))))
(assert (= (x283 (+ (- x505 x1716) x1472)) (ite (and (>= (+ (- x505 x1716) x1472) 164) (> (+ x1665 164) (+ x1472 (- x505 x1716)))) (x1195 (- (+ x1472 (- x505 x1716)) 164)) (x540 (+ (- x505 x1716) x1472)))))
(assert (= x797 x168))
(assert (= x802 (x5 (x1617 x802))))
(assert (x29 x352))
(assert (x29 x9))
(assert (x29 x282))
(assert (= (and (not x173) x991) x1222))
(assert (x29 x190))
(assert (=> (< (- x142 1) 10000) (= (x1666 x142) (x1617 x142))))
(assert (= (x531 x1493) (ite (and x800 x868) (x1441 x1493) (x583 x1493))))
(assert (x29 x1610))
(assert (= (x1115 x931) (ite (and x1137 x1398) (x882 x931) (x1426 x931))))
(assert (x29 x952))
(assert (=> (> (+ 10000 1) x1361) (= (x1617 x1361) (x1666 x1361))))
(assert (= (ite (and x1073 (not x584) x1137) (x1003 x1493) (ite (and (not x259) x1181 (not x584) (not x1073) x1137) (x724 x1493) (ite (and (not x1181) (not x584) (not x1073) x1137) (x1003 x1493) (x448 x1493)))) (x535 x1493)))
(assert (= (+ 1 (x5 x1143)) (x5 (x374 x1143 1))))
(assert (x29 x237))
(assert (x29 x1479))
(assert (x29 x222))
(assert (x29 x1716))
(assert (x1500 x1753))
(assert (x29 x944))
(assert (= (x1195 (- (+ (- x505 160) 164) 164)) (x1125 (- (+ 164 (- x505 160)) 164))))
(assert (= 0 (x598 x494)))
(assert (x29 x1870))
(assert (x29 x99))
(assert (x29 x1837))
(assert (x1500 x1023))
(assert (= (x1666 635128645) (x1617 635128645)))
(assert (x29 x684))
(assert (x29 x1637))
(assert (= (ite (= x1515 x777) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x777)) (x1230 x777)))
(assert (x29 x1410))
(assert (= (x5 (x1617 x1280)) x1280))
(assert (x29 x25))
(assert (x29 x1905))
(assert (x29 x242))
(assert (x29 x142))
(assert (= (ite (and (>= (+ x1472 (- x507 x1716)) 164) (< (+ (- x507 x1716) x1472) (+ x1665 164))) (x1195 (- (+ x1472 (- x507 x1716)) 164)) (x540 (+ x1472 (- x507 x1716)))) (x283 (+ (- x507 x1716) x1472))))
(assert (= (x1115 x522) (ite (and x1398 x1137) (x882 x522) (x1426 x522))))
(assert (= (ite (= x1278 x505) x686 (x1081 x505)) (x911 x505)))
(assert (x29 x1511))
(assert (x29 x817))
(assert (= (ite (= x931 x1078) x10 (x911 x1078)) (x31 x1078)))
(assert (= (ite (and x1137 x1398) (x882 x1382) (x1426 x1382)) (x1115 x1382)))
(assert (x29 x580))
(assert (=> (> (+ 10000 1) x1312) (= (x1617 x1312) (x1666 x1312))))
(assert (x29 x1834))
(assert (x29 x446))
(assert (x29 x1861))
(assert (x29 x128))
(assert (x29 x1310))
(assert (= (x5 (x1617 x1407)) x1407))
(assert (= x1052 true))
(assert (= (x911 x1693) (ite (= x1693 x1278) x686 (x1081 x1693))))
(assert (= (x283 (+ x1472 (- x184 x1716))) (ite (and (>= (+ (- x184 x1716) x1472) 164) (> (+ 164 x1665) (+ x1472 (- x184 x1716)))) (x1195 (- (+ (- x184 x1716) x1472) 164)) (x540 (+ x1472 (- x184 x1716))))))
(assert (=> (> (+ 10000 1) x1219) (= (x1617 x1219) (x1666 x1219))))
(assert (x29 x1563))
(assert (x29 x1521))
(assert (= 1968616202 (x5 (x1666 1968616202))))
(assert (x29 x1747))
(assert (x29 x201))
(assert (= x1627 (x5 (x1617 x1627))))
(assert (x1500 x1361))
(assert (x29 x875))
(assert (x29 x1040))
(assert (x29 x992))
(assert (x1500 x547))
(assert (x29 x930))
(assert (x29 x1570))
(assert (=> (> (+ 10000 1) x74) (= (x1666 x74) (x1617 x74))))
(assert (x29 x140))
(assert (x29 x1238))
(assert (x29 x323))
(assert (=> (> (+ 10000 1) x1803) (= (x1666 x1803) (x1617 x1803))))
(assert (= (x1880 x673) (ite (= x673 x935) x1302 (x1230 x673))))
(assert (= (ite (= x1852 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1852)) (x1230 x1852)))
(assert (= x130 (or (and x835 x819) (and x1150 x1896))))
(assert (= x1385 (x5 (x1617 x1385))))
(assert (= x1335 (or x1858 (and x425 x1091))))
(assert (x29 x467))
(assert (x29 x1054))
(assert (= x103 (x5 (x1617 x103))))
(assert (x29 x1358))
(assert (= (x283 (+ (- x505 160) 164)) (ite (and (< (+ (- x505 160) 164) (+ x1665 164)) (>= (+ (- x505 160) 164) 164)) (x1195 (- (+ 164 (- x505 160)) 164)) (x540 (+ (- x505 160) 164)))))
(assert (= 0 (x775 x1846)))
(assert (= (x688 x507) (ite (and x1198 x1618 (not x895)) (x1518 x507) (x471 x507))))
(assert (x29 x589))
(assert (x29 x1809))
(assert (= (x283 (+ (- x777 x1716) x1472)) (ite (and (> (+ x1665 164) (+ (- x777 x1716) x1472)) (<= 164 (+ (- x777 x1716) x1472))) (x1195 (- (+ x1472 (- x777 x1716)) 164)) (x540 (+ (- x777 x1716) x1472)))))
(assert (= (x1125 (- (+ x1472 (- x505 x1716)) 164)) (x1195 (- (+ x1472 (- x505 x1716)) 164))))
(assert (x29 x1277))
(assert (x29 x759))
(assert (= (x1230 x1078) (ite (= x1515 x1078) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1078))))
(assert (x29 x1402))
(assert (x1500 x1776))
(assert (= (x5 (x1666 911411945)) 911411945))
(assert (x29 x1257))
(assert (x29 x1039))
(assert (x1500 x80))
(assert (x29 x1283))
(assert (= (x31 x792) (ite (= x931 x792) x10 (x911 x792))))
(assert (=> (> (+ 10000 1) x1002) (= (x1617 x1002) (x1666 x1002))))
(assert (x29 x624))
(assert (= 0 (x989 224)))
(assert (x29 x1209))
(assert (= (ite (= x1008 x1493) x220 (x1535 x1493)) (x882 x1493)))
(assert (= (x1195 (- (+ x1472 (- x300 x1716)) 164)) (x1125 (- (+ x1472 (- x300 x1716)) 164))))
(assert (= (x1880 x184) (ite (= x935 x184) x1302 (x1230 x184))))
(assert (= x276 (and x1777 (not x551))))
(assert (x1500 x1307))
(assert (= x406 (x5 (x1617 x406))))
(assert (= (x688 x673) (ite (and (not x895) x1198 x1618) (x1518 x673) (x471 x673))))
(assert (= (ite (= x420 x1425) x1621 (x1003 x1425)) (x724 x1425)))
(assert (= (ite (= x420 x1401) x1621 (x1003 x1401)) (x724 x1401)))
(assert (x29 x661))
(assert (= (x989 x571) 0))
(assert (= x1720 (and (not x240) x442)))
(assert (= (=> (= (< 1 x220) x1105) (and (=> (not x1105) x1344) (=> (and (= (x1232 x144) x1495) (= x1673 (x848 x777)) (= (x1368 (+ x1328 76450787359836037641860180984291677749980919077056822294353438043884394381312)) x19) (= (x1232 x1008) x1632) (= (x1368 (+ x1528 68)) x499) (<= x248 1461501637330902918203684832716283019655932542975) (> x1632 1) (= x1328 (x366 26959946667150639794667015087019630673637144422540572481103610249215 x1673)) (= (x1368 (+ x1863 128)) x1804) (= x1812 (x414 (x1617 x248))) (> x220 1) (= (x1696 x1528) x1183) x564 (= x1863 (x1368 (+ x1528 36))) (= x227 (< 0 x1183)) (= x1661 (x860 (- x1231 32))) (= x777 (x1368 (+ x1528 32))) (= 0 x727) (or (and (= (x1368 (+ x1804 x1183)) x288) x1215) (not x1215)) (= (> x1812 0) x564) (= x1108 (x1368 (+ 100 x1528))) (= (x1368 (+ 96 x1863)) x1458) (= (x283 196) x248) (or (and (= 0 x1221) (not x227)) (and (= x225 (> x1183 32)) (= (x1696 x1078) x226) x227 (or (and (= 32 x1221) (not x225)) (and (or (and (= (x1829 x184) x1276) (= x1051 (x1368 (+ 128 x1108))) (= x184 (x1368 (+ x1528 96))) (= (< 96 x1183) x429) x699 (or (and (= x673 (x1368 (+ x1528 128))) (= (x1368 (+ 160 x1108)) x546) (not x1357) x429 (= 128 x1221) (= (< 128 x1183) x1357) (= (x1554 x673) x272)) (and (not x429) (= x1221 96)))) (and (= x1221 64) (not x699))) (= x1493 (x1368 (+ x1528 64))) (= (x151 x1493) x600) (= x783 (x1368 (+ 96 x1108))) (= x699 (< 64 x1183)) x225)) (= x1804 x1177) (= x777 x1078))) (= (x1368 (+ 192 x1710)) x144) x1105 (= (x860 (- x1108 x1528)) x1231) (= (< x1183 x1221) x1215)) x343))) x866))
(assert (= (ite (and (<= 164 (+ 164 (- x1493 160))) (< (+ 164 (- x1493 160)) (+ x1665 164))) (x1195 (- (+ (- x1493 160) 164) 164)) (x540 (+ (- x1493 160) 164))) (x283 (+ (- x1493 160) 164))))
(assert (x29 x1270))
(assert (x1500 x83))
(assert (x29 x932))
(assert (= (x31 x673) (ite (= x931 x673) x10 (x911 x673))))
(assert (= (x1617 1968616202) (x1666 1968616202)))
(assert (x29 x1285))
(assert (x29 x517))
(assert (= (ite (= x935 x792) x1302 (x1230 x792)) (x1880 x792)))
(assert (x1500 x1139))
(assert (x29 x525))
(assert (= x307 (x5 (x1617 x307))))
(assert (x1470 x1113))
(assert (=> (> (+ 10000 1) x273) (= (x1666 x273) (x1617 x273))))
(assert (x29 x747))
(assert (x29 x559))
(assert (= 604800 (x5 (x1666 604800))))
(assert (= (x5 (x1617 x37)) x37))
(assert (x29 x1894))
(assert (x1500 x91))
(assert (x1470 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (=> (> (+ 10000 1) x773) (= (x1617 x773) (x1666 x773))))
(assert (x29 x277))
(assert (= (x1666 1461501637330902918203684832716283019655932542976) (x1617 1461501637330902918203684832716283019655932542976)))
(assert (= (x1279 x1428) (ite (= x1428 x1586) x922 (x1435 x1428))))
(assert (= (x1666 18446744073709551615) (x1617 18446744073709551615)))
(assert (x29 x990))
(assert (x29 x733))
(assert (= (x5 (x1617 x1219)) x1219))
(assert (x29 x1385))
(assert (x29 x400))
(assert (x29 x1364))
(assert (= (x283 (+ x1472 (- x522 x1716))) (ite (and (>= (+ (- x522 x1716) x1472) 164) (> (+ 164 x1665) (+ (- x522 x1716) x1472))) (x1195 (- (+ (- x522 x1716) x1472) 164)) (x540 (+ x1472 (- x522 x1716))))))
(assert (= (x1125 (- (+ x1472 (- x1078 x1716)) 164)) (x1195 (- (+ x1472 (- x1078 x1716)) 164))))
(assert (= (x5 (x1617 x917)) x917))
(assert (x1500 x47))
(assert (x29 x1174))
(assert (= x627 (or x130 (and x591 x1714))))
(assert (x29 x1656))
(assert (x29 x745))
(assert (x29 x837))
(assert (= (ite (= x1135 x571) x1127 (x337 x571)) (x1003 x571)))
(assert (= (x5 (x1617 x1656)) x1656))
(assert (= (ite (= x571 x935) x1302 (x1230 x571)) (x1880 x571)))
(assert (= (x1003 x184) (ite (= x184 x1135) x1127 (x337 x184))))
(assert (= (ite (and x800 x868) (x1441 x1425) (x583 x1425)) (x531 x1425)))
(assert (x29 x1334))
(assert (= (ite (= x1425 x935) x1302 (x1230 x1425)) (x1880 x1425)))
(assert (x1500 x1782))
(assert (= (x1125 (- (+ (- x507 160) 164) 164)) (x1195 (- (+ (- x507 160) 164) 164))))
(assert (x29 x1308))
(assert (= (x5 (x1617 x530)) x530))
(assert (x29 x8))
(assert (x29 x379))
(assert (x29 x957))
(assert (= x984 (x5 (x1617 x984))))
(assert (= 0 (x1748 x1516)))
(assert (x29 x161))
(assert (x29 x346))
(assert (= 0 (x989 160)))
(assert (=> (> (+ 10000 1) x1848) (= (x1617 x1848) (x1666 x1848))))
(assert (= (x5 (x1617 x1417)) x1417))
(assert (= (x5 (x1617 x372)) x372))
(assert (= (x5 (x1617 x1626)) x1626))
(assert (x29 x27))
(assert (x29 x249))
(assert (= (x1435 x777) (ite (= x777 x1367) x1370 (x1880 x777))))
(assert (x29 x1236))
(assert (x1500 x1312))
(assert (= x248 (x5 (x1617 x248))))
(assert (x29 x300))
(assert (=> (< (- x971 1) 10000) (= (x1666 x971) (x1617 x971))))
(assert (= x947 (and (not x472) x1833)))
(assert (x29 x546))
(assert (x29 x1345))
(assert (= x835 (and (not x591) x1714)))
(assert (= (x5 (x1666 826074471)) 826074471))
(assert (x1500 x1237))
(assert (= (x1115 x1078) (ite (and x1398 x1137) (x882 x1078) (x1426 x1078))))
(assert (x29 x870))
(assert (x29 x1541))
(assert (x1500 x1656))
(assert (=> (> (+ 10000 1) x1237) (= (x1617 x1237) (x1666 x1237))))
(assert (= (ite (= x300 x935) x1302 (x1230 x300)) (x1880 x300)))
(assert (x29 x1163))
(assert (x29 x1533))
(assert (x29 x444))
(assert (x29 x906))
(assert (x29 x876))
(assert (x29 x854))
(assert (x29 x1276))
(assert (= (or x491 (and (not x1198) x1618) (and x738 (not x1105))) x1909))
(assert (x29 x244))
(assert (= (x5 (x1617 x1776)) x1776))
(assert (= x104 x168))
(assert (= (x283 (+ (- x1493 x1716) x1472)) (ite (and (>= (+ (- x1493 x1716) x1472) 164) (< (+ x1472 (- x1493 x1716)) (+ 164 x1665))) (x1195 (- (+ (- x1493 x1716) x1472) 164)) (x540 (+ (- x1493 x1716) x1472)))))
(assert (= (ite (= x1425 x1135) x1127 (x337 x1425)) (x1003 x1425)))
(assert (x29 x367))
(assert (= (x1125 (- (+ x1472 (- x215 x1716)) 164)) (x1195 (- (+ x1472 (- x215 x1716)) 164))))
(assert (x29 x768))
(assert (x1500 x1490))
(assert (x1500 x517))
(assert (x29 x956))
(assert (= (ite (= x777 x1008) x220 (x1535 x777)) (x882 x777)))
(assert (x29 x1443))
(assert (x29 x744))
(assert (x29 x1318))
(assert (x29 x907))
(assert (= (ite (= x1135 x1852) x1127 (x337 x1852)) (x1003 x1852)))
(assert (= 0 (x989 192)))
(assert (x29 x1113))
(assert (x29 x1626))
(assert (x29 x1201))
(assert (x29 x547))
(assert (= (x1435 x1425) (ite (= x1425 x1367) x1370 (x1880 x1425))))
(assert (x29 x1699))
(assert (= x1277 (x5 (x1617 x1277))))
(assert (= (=> (and (= (> x1301 0) x960) x721 (= x500 (= x1208 0)) (= (< 2 x220) x592) (not x592) (or (not x960) (and x960 (= x826 (= 0 x401)) (not (or (and (< x943 32) (= (<= x943 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x943 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x326 x1425) x943) (= x401 x6) (= (ite x1261 1 0) x6) (= (x1368 (+ x1425 32)) x571) (= x1261 (not x826)) (= x401 (x326 x571)) (< 0 x401))) (or (and (= 96 x1425) x500) (and (not x500) (= x698 (x1368 (+ x1108 96))) (= x1425 x1804))) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1274 (x1617 274184521717934524641157099916833587206))) x721) (not (= x945 0)) (= x1225 (x1728 (x1617 x248))) (= (x326 x1425) x1301)) x1344) x411))
(assert (x29 x15))
(assert (x1500 x1418))
(assert (x1470 x195))
(assert (= (x1617 243137395) (x1666 243137395)))
(assert (x29 x299))
(assert (= (x989 x300) 0))
(assert (= x1308 (x5 (x1617 x1308))))
(assert (= (x1125 (- (+ (- x300 160) 164) 164)) (x1195 (- (+ 164 (- x300 160)) 164))))
(assert (x29 x1785))
(assert (= (x1617 2960351575) (x1666 2960351575)))
(assert (= x893 (=> (and (= x1757 (x492 (x1617 274184521717934524641157099916833587206))) (= (= 274184521717934524641157099916833587218 x1828) x472) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x433) x1314) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x297 (x1617 x1828))) x1559) (= (x492 (x1617 x1828)) x433) x1239 (= x1790 (x492 (x1617 274184521717934524641157099916833587206))) (= x1793 (x297 (x1617 x1828))) (= x1336 x1660) (= x1239 (<= 0 x1757)) x1559 x1314) (and (=> (not x472) x245) (=> (and (= x381 x74) (= 32 x932) (<= 0 x814) (not (= x601 1889567281)) (= x1593 (< x637 x183)) (< (+ x183 x814) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> x678 0) (not x1593) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x928) (not (< x1327 4)) (= (or (and (> 64 x791) (= (<= x791 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x791)) x1726) (= 274184521717934524641157099916833587206 x508) (= x601 2835717307) (= x1527 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= 68 x1327) (not x1726) (= x1446 x183) (not x545) (= x1336 x1327) (= (x495 (x1617 x74) (x1666 1) 0) x544) (= 274184521717934524641157099916833587206 x820) (= x545 (< x637 x617)) (<= x74 1461501637330902918203684832716283019655932542975) (= (x22 x1123) x814) (<= x637 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1087 1) (not (= 826074471 x601)) (not (> 649617121 x601)) (= (x414 (x1617 274184521717934524641157099916833587218)) x678) x472 (= (x1067 x1424) x637) (= x838 (x860 (- x637 x617))) (not (= x601 649617121)) (not (= 2514000705 x601)) (<= 0 x637) (= x1537 (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x814 x183))) (= x814 x1786) (= x791 (x860 (- x1327 4))) (= x183 x617) (= x1424 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (= x1257 x74) (= x925 x617) (not x1537) (= (x495 (x1617 x74) (x1666 1) 0) x1123) (= x1249 (+ x1446 x1786)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x814)) x1811)))))
(assert (= (ite (and (not x1395) x1086 (not x153)) (x1778 x969) (x808 x969)) (x909 x969)))
(assert (x29 x1571))
(assert (x29 x1379))
(assert (= (x1115 x1852) (ite (and x1137 x1398) (x882 x1852) (x1426 x1852))))
(assert (x29 x1515))
(assert (x1500 x953))
(assert (= (ite (= x1008 x522) x220 (x1535 x522)) (x882 x522)))
(assert (= (or (and x173 x991) (and x1715 x1739)) x1137))
(assert (= (x5 (x1617 x1571)) x1571))
(assert (x1500 x142))
(assert (x29 x712))
(assert (x29 x137))
(assert (= (x1518 x1008) (ite (and (not x794) x419 x669 x485 x1198 x1618) (x1279 x1008) (ite (and x485 (not x419) x1618 x1198 x669) (x1435 x1008) (ite (and x485 x1198 (not x669) x1618) (x1880 x1008) (ite (and x1198 x1618 (not x485)) (x1230 x1008) (x399 x1008)))))))
(assert (x29 x801))
(assert (x29 x1051))
(assert (= x876 (x5 (x1617 x876))))
(assert (= (x1666 2743102681) (x1617 2743102681)))
(assert (=> (< (- x1076 1) 10000) (= (x1666 x1076) (x1617 x1076))))
(assert (x29 x1312))
(assert (= (x1617 274184521717934524641157099916833587206) (x1666 274184521717934524641157099916833587206)))
(assert (x29 x4))
(assert (= (x5 (x1666 274184521717934524641157099916833587206)) 274184521717934524641157099916833587206))
(assert (= 0 (x989 x184)))
(assert (= x529 true))
(assert (= (x283 (+ (- x571 x1716) x1472)) (ite (and (< (+ (- x571 x1716) x1472) (+ x1665 164)) (>= (+ (- x571 x1716) x1472) 164)) (x1195 (- (+ x1472 (- x571 x1716)) 164)) (x540 (+ (- x571 x1716) x1472)))))
(assert (= (ite x1858 (ite (and x472 x1833) (x61 x1100) (x633 x1100)) (x61 x1100)) (x1378 x1100)))
(assert (x29 x945))
(assert (x29 x1121))
(assert (x29 x98))
(assert (= (x1195 (- (+ 164 (- x420 160)) 164)) (x1125 (- (+ (- x420 160) 164) 164))))
(assert (= (x688 x1493) (ite (and x1618 (not x895) x1198) (x1518 x1493) (x471 x1493))))
(assert (x29 x967))
(assert (=> (> (+ 10000 1) x1270) (= (x1666 x1270) (x1617 x1270))))
(assert (= 0 (x989 x673)))
(assert (= (ite (= x777 x1278) x686 (x1081 x777)) (x911 x777)))
(assert (= (x688 x1008) (ite (and (not x895) x1198 x1618) (x1518 x1008) (x471 x1008))))
(assert (= (x1518 x1493) (ite (and x1198 (not x794) x1618 x419 x485 x669) (x1279 x1493) (ite (and (not x419) x1198 x1618 x669 x485) (x1435 x1493) (ite (and (not x669) x1198 x1618 x485) (x1880 x1493) (ite (and x1198 x1618 (not x485)) (x1230 x1493) (x399 x1493)))))))
(assert (= 2764855426 (x5 (x1666 2764855426))))
(assert (= (x882 x420) (ite (= x420 x1008) x220 (x1535 x420))))
(assert (x29 x1084))
(assert (x29 x602))
(assert (x29 x185))
(assert (=> (> (+ 10000 1) x876) (= (x1617 x876) (x1666 x876))))
(assert (x29 x1676))
(assert (x1500 x1676))
(assert (= (ite (= x931 x420) x1621 (x1003 x931)) (x724 x931)))
(assert (= 0 (x989 x1078)))
(assert (= (x1125 (- (+ (- x184 160) 164) 164)) (x1195 (- (+ (- x184 160) 164) 164))))
(assert (= (x1880 x144) (ite (= x935 x144) x1302 (x1230 x144))))
(assert (x29 x937))
(assert (x29 x1686))
(assert (x1500 x1243))
(assert (= (ite (= x1051 x571) x1276 (x1829 x571)) (x1554 x571)))
(assert (= (x5 (x1617 x267)) x267))
(assert (x29 x1256))
(assert (x29 x402))
(assert (x29 x750))
(assert (= (x5 (x1617 x1676)) x1676))
(assert (= (ite (= x1135 x1285) x1127 (x337 x1285)) (x1003 x1285)))
(assert (= (x724 x1852) (ite (= x1852 x420) x1621 (x1003 x1852))))
(assert (x29 x305))
(assert (= (ite (= x673 x1586) x922 (x1435 x673)) (x1279 x673)))
(assert (x29 x1233))
(assert (x29 x1824))
(assert (x29 x1328))
(assert (x29 x90))
(assert (= (x5 (x1617 x1691)) x1691))
(assert (x29 x1069))
(assert (x29 x372))
(assert (x29 x1652))
(assert (= (ite (= x1401 x931) x10 (x911 x1401)) (x31 x1401)))
(assert (x29 x486))
(assert (x29 x578))
(assert (x29 x1846))
(assert (x1470 x990))
(assert (= (x5 (x1617 x1316)) x1316))
(assert (x1500 x478))
(assert (= 0 (x916 x1641)))
(assert (= (x1880 x777) (ite (= x935 x777) x1302 (x1230 x777))))
(assert (= (x1195 (- (+ (- x1008 x1716) x1472) 164)) (x1125 (- (+ x1472 (- x1008 x1716)) 164))))
(assert (x29 x1735))
(assert (=> (> (+ 10000 1) x1627) (= (x1666 x1627) (x1617 x1627))))
(assert (= (x5 (x1617 x956)) x956))
(assert (x29 x1601))
(assert (= 1000000000000000000 (x5 (x1666 1000000000000000000))))
(assert (= (ite (and x868 x800) (x1441 x673) (x583 x673)) (x531 x673)))
(assert (=> (> (+ 10000 1) x372) (= (x1666 x372) (x1617 x372))))
(assert (= (ite (= x1078 x1278) x686 (x1081 x1078)) (x911 x1078)))
(assert (= (ite (= x673 x1278) x686 (x1081 x673)) (x911 x673)))
(assert (= (x1125 0) (x1195 0)))
(assert (x29 x1592))
(assert (x29 x434))
(assert (= (x1125 (- (+ x1472 (- x1428 x1716)) 164)) (x1195 (- (+ x1472 (- x1428 x1716)) 164))))
(assert (x1500 x367))
(assert (= (x1115 x215) (ite (and x1137 x1398) (x882 x215) (x1426 x215))))
(assert (x29 x1517))
(assert (x1500 x1571))
(assert (x29 x338))
(assert (x1500 x1543))
(assert (x29 x1032))
(assert (= (ite (= x1428 x1135) x1127 (x337 x1428)) (x1003 x1428)))
(assert (x29 x1408))
(assert (x29 x686))
(assert (x29 x1324))
(assert (=> (< (- x252 1) 10000) (= (x1617 x252) (x1666 x252))))
(assert (= (ite (= x1367 x507) x1370 (x1880 x507)) (x1435 x507)))
(assert (x1881 x9 x603))
(assert (= (x1569 x1738) (ite (and (not x584) x850 x1137) (x808 x1738) (ite (and x1137 x1780 (not x584) (not x850)) (x808 x1738) (x1287 x1738)))))
(assert (= (x5 (x1617 x1076)) x1076))
(assert (= x379 (x5 (x1617 x379))))
(assert (x1470 x1218))
(assert (x29 x1002))
(assert (= (x1279 x1425) (ite (= x1586 x1425) x922 (x1435 x1425))))
(assert (= (ite (and x419 x485 x669 (not x794) x1198 x1618) (x1279 x1425) (ite (and x1198 (not x419) x1618 x669 x485) (x1435 x1425) (ite (and x485 (not x669) x1618 x1198) (x1880 x1425) (ite (and x1198 (not x485) x1618) (x1230 x1425) (x399 x1425))))) (x1518 x1425)))
(assert (x29 x42))
(assert (x29 x615))
(assert (x29 x1309))
(assert (x29 x96))
(assert (x29 x1023))
(assert (x1500 x395))
(assert (= (ite (and (> (+ x1665 164) (+ 164 (- x673 160))) (<= 164 (+ 164 (- x673 160)))) (x1195 (- (+ (- x673 160) 164) 164)) (x540 (+ 164 (- x673 160)))) (x283 (+ (- x673 160) 164))))
(assert (x29 x1762))
(assert (= (x5 (x1617 x1243)) x1243))
(assert (=> (< (- x1417 1) 10000) (= (x1617 x1417) (x1666 x1417))))
(assert (x1500 x984))
(assert (= (ite (and (not x584) x1073 x1137) (x1003 x184) (ite (and x1181 (not x1073) x1137 (not x584) (not x259)) (x724 x184) (ite (and x1137 (not x1181) (not x1073) (not x584)) (x1003 x184) (x448 x184)))) (x535 x184)))
(assert (=> (< (- x1443 1) 10000) (= (x1617 x1443) (x1666 x1443))))
(assert (x29 x333))
(assert (= (ite (= x184 x1586) x922 (x1435 x184)) (x1279 x184)))
(assert (= (ite (and (not x584) x1137 x113) (x1389 x1574) (x787 x1574)) (x1297 x1574)))
(assert (x29 x1010))
(assert (= (x688 x144) (ite (and x1198 x1618 (not x895)) (x1518 x144) (x471 x144))))
(assert (x29 x19))
(assert (= (x911 x300) (ite (= x300 x1278) x686 (x1081 x300))))
(assert (= x64 true))
(assert (x29 x1206))
(assert (= (ite (= x1515 x184) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x184)) (x1230 x184)))
(assert (= x1473 (x5 (x1617 x1473))))
(assert (= (and x800 (not x868)) x1777))
(assert (x29 x700))
(assert (x29 x1025))
(assert (x29 x1497))
(assert (x29 x1624))
(assert (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x5 (x1666 50942633119752846454219349998365661925608737367104304655302372697894809501696))))
(assert (= x1858 (or (and x1833 x472) (and x947 x235))))
(assert (= (x1195 (- (+ x1472 (- x571 x1716)) 164)) (x1125 (- (+ (- x571 x1716) x1472) 164))))
(assert (x29 x216))
(assert (= x634 (=> (and (= (x495 (x1617 x1819) (x1666 5) 0) x565) (<= x170 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1732 (x495 (x1617 x1676) x1339 0)) (= (x366 1461501637330902918203684832716283019655932542975 x990) x1312) (= x14 (x495 (x1617 x1819) (x1666 4) 0)) (= (x860 (- x94 x170)) x1318) (= (x495 (x1617 x1270) x268 0) x384) (= x784 (x671 x1338)) (not (> x170 x94)) (= (x495 (x1617 x142) x565 0) x1338) (= x1120 (x495 (x1617 x876) x384 0)) (= (x1325 x1590) x170) (>= x784 0) (= x1590 (x495 (x1617 x1280) x1732 0)) (= x1339 (x495 (x1617 x1312) x14 0)) (= (x366 1461501637330902918203684832716283019655932542975 x1735) x1280) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x94) (= x876 (x366 1461501637330902918203684832716283019655932542975 x1443)) (= (= x1318 0) x591) (<= 0 x170) (= x94 (x75 x1120)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x784) (= (x366 1461501637330902918203684832716283019655932542975 x990) x1270) (= x142 (x366 1461501637330902918203684832716283019655932542975 x990)) (= (x366 1461501637330902918203684832716283019655932542975 x1443) x1676) (= (x495 (x1617 x1819) (x1666 3) 0) x268) (<= 0 x94)) (and (=> x591 x512) (=> (and (= (- (/ x131 1000000000000000000) (uninterp_frac x131 1000000000000000000)) x679) (= (- (/ x1014 x784) (uninterp_frac x1014 x784)) x1372) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1599) (= x743 1) (<= 0 x1599) (= (> x1006 0) x274) (= (* x1599 x1372) x131) (= (x1368 (+ 100 x1797)) x1449) (= x1113 (ite (> x1318 115792089237316195423570985008687907853269984665640564039457) 1 0)) (= (uninterp_mod (* 1000000000000000000 x1318) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1014) (= (x1368 (+ x1056 76450787359836037641860180984291677749980919077056822294353438043884394381312)) x85) (= x1163 (x366 1461501637330902918203684832716283019655932542975 x1443)) (= (x366 x743 x1113) x242) (= (x495 (x1617 x299) x289 0) x407) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1599 x1372)) (or (and (= (x1368 (+ x1006 x1442)) x774) x1046) (not x1046)) (= x1742 (x414 (x1617 x1568))) (or (and (= x570 x1310) (= (x1128 x1310) x1608) (or (and (= (x1128 x765) x1861) (= (x1368 (+ x1570 96)) x542) (= x765 (x1368 (+ x1286 64))) (or (and (or (and (= x1434 (x1368 (+ 128 x1286))) x403 (not x1605) (= x25 (x1128 x1434)) (= x1605 (> x1006 128)) (= (x1368 (+ 160 x1570)) x482) (= x1711 128)) (and (= 96 x1711) (not x403))) (= (x1368 (+ 128 x1570)) x1640) (= x1641 (x1368 (+ x1286 96))) (= (x1128 x1641) x983) (= (< 96 x1006) x403) x815) (and (not x815) (= 64 x1711))) (= (< 64 x1006) x815) x1874) (and (not x1874) (= 32 x1711))) x274 (= x1119 x1442) (= x1874 (> x1006 32))) (and (= 0 x1711) (not x274))) (= (x495 (x1617 x1872) x407 0) x781) (> x784 0) (= x289 (x495 (x1617 x1819) (x1666 11) 0)) x1538 (= x1872 (x366 1461501637330902918203684832716283019655932542975 x1735)) (= (x1368 (+ 100 x1286)) x1570) (= x1442 (x1368 (+ x1449 128))) (= (x366 1461501637330902918203684832716283019655932542975 x1735) x1437) (= x44 (x366 1461501637330902918203684832716283019655932542975 x1443)) (= (x1484 x1286) x1006) (= x1538 (< 0 x1742)) (not x591) (= 0 x1479) (= (x366 1461501637330902918203684832716283019655932542975 x990) x1572) (= x1046 (> x1711 x1006)) (= x242 0) (= (x366 1461501637330902918203684832716283019655932542975 x1735) x1568) (= x213 (x1368 (+ x1286 68))) (= (x366 1461501637330902918203684832716283019655932542975 x990) x299) (= x570 (x1368 (+ 96 x1797))) (= (x366 26959946667150639794667015087019630673637144422540572481103610249215 x513) x1056) (= (x860 (- x222 32)) x218) (= (x860 (- x1570 x1286)) x222) (= x1599 (x149 x781)) (= x513 (x1048 x570))) x640)))))
(assert (= (x283 (+ 164 (- x1425 160))) (ite (and (>= (+ 164 (- x1425 160)) 164) (< (+ 164 (- x1425 160)) (+ x1665 164))) (x1195 (- (+ 164 (- x1425 160)) 164)) (x540 (+ 164 (- x1425 160))))))
(assert (x1470 x1848))
(assert (x29 x1480))
(assert (x29 x1659))
(assert (x29 x215))
(assert (=> (> (+ 10000 1) x1501) (= (x1666 x1501) (x1617 x1501))))
(assert (x29 x1859))
(assert (x29 x680))
(assert (= (ite (= x1515 x1425) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1425)) (x1230 x1425)))
(assert (x29 x1263))
(assert (= x647 (and (not x235) x947)))
(assert (x29 x1078))
(assert (x29 x1568))
(assert (x29 x396))
(assert (= (x1518 x1428) (ite (and x669 x419 x1198 (not x794) x485 x1618) (x1279 x1428) (ite (and x1198 x485 (not x419) x1618 x669) (x1435 x1428) (ite (and x1198 x485 x1618 (not x669)) (x1880 x1428) (ite (and x1618 (not x485) x1198) (x1230 x1428) (x399 x1428)))))))
(assert (x29 x1753))
(assert (x29 x1621))
(assert (= (x5 (x1617 x1342)) x1342))
(assert (x29 x86))
(assert (x29 x1741))
(assert (=> (> (+ 10000 1) x902) (= (x1666 x902) (x1617 x902))))
(assert (x29 x23))
(assert (x29 x1454))
(assert (x29 x219))
(assert (x29 x114))
(assert (x1500 x1627))
(assert (x29 x1451))
(assert (x29 x790))
(assert (= (x5 (x1617 x547)) x547))
(assert (x29 x788))
(assert (= x395 (x5 (x1617 x395))))
(assert (x29 x1431))
(assert (= (x31 x144) (ite (= x144 x931) x10 (x911 x144))))
(assert (x29 x1611))
(assert (x29 x183))
(assert (= (x283 (+ (- x571 160) 164)) (ite (and (< (+ (- x571 160) 164) (+ x1665 164)) (>= (+ (- x571 160) 164) 164)) (x1195 (- (+ (- x571 160) 164) 164)) (x540 (+ 164 (- x571 160))))))
(assert (x29 x1363))
(assert (= x1237 (x5 (x1617 x1237))))
(assert (= (x1829 x571) (ite (= x571 x783) x600 (x151 x571))))
(assert (x29 x1488))
(assert (= (x5 (x1617 x83)) x83))
(assert (x29 x510))
(assert (=> (> (+ 10000 1) x1473) (= (x1666 x1473) (x1617 x1473))))
(assert (x1470 x424))
(assert (=> (< (- x1139 1) 10000) (= (x1617 x1139) (x1666 x1139))))
(assert (= x738 x1041))
(assert (x29 x915))
(assert (x29 x597))
(assert (x29 x708))
(assert (x29 x369))
(assert (= (x724 x1428) (ite (= x420 x1428) x1621 (x1003 x1428))))
(assert (x29 x576))
(assert (x29 x1448))
(assert (= (ite (= x1528 x1458) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x1528)) (x1696 x1528)))
(assert (= (ite (and x1073 (not x584) x1137) (x1003 x1401) (ite (and x1181 (not x1073) x1137 (not x584) (not x259)) (x724 x1401) (ite (and (not x1073) (not x1181) x1137 (not x584)) (x1003 x1401) (x448 x1401)))) (x535 x1401)))
(assert (x29 x191))
(assert (=> (> (+ 10000 1) x307) (= (x1617 x307) (x1666 x307))))
(assert (x1500 x379))
(assert (x29 x1030))
(assert (x29 x1019))
(assert (x29 x77))
(assert (= 2798343961 (x5 (x1666 2798343961))))
(assert (= (x1617 2211524764) (x1666 2211524764)))
(assert (= (ite (and x1137 (not x584) x1073) (x1003 x300) (ite (and (not x1073) x1137 x1181 (not x259) (not x584)) (x724 x300) (ite (and x1137 (not x1181) (not x584) (not x1073)) (x1003 x300) (x448 x300)))) (x535 x300)))
(assert (= x1575 (=> (and (= x295 x870) (>= x875 0) (>= x870 0) (>= x1873 0) x73 (= x1543 x1136) (= x1292 x902) (>= x1204 0) (= x1282 x466) (= x875 (x492 (x1617 274184521717934524641157099916833587214))) (<= 0 x1294) (<= 0 x1136) (= x73 (> (x414 (x1617 274184521717934524641157099916833587218)) 0)) (<= x1136 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x870) (= (x492 (x1617 274184521717934524641157099916833587218)) x1204) (<= x559 1461501637330902918203684832716283019655932542975) x1050 (= x1050 (> (x414 (x1617 274184521717934524641157099916833587206)) 0)) (>= 1461501637330902918203684832716283019655932542975 x466) (= x1873 (x492 (x1617 274184521717934524641157099916833587206))) x1832 (<= 0 x559) (<= x1294 1461501637330902918203684832716283019655932542975) (= x1832 (< 0 (x414 (x1617 274184521717934524641157099916833587214)))) (>= x466 0)) x1806)))
(assert (x1500 x1828))
(assert (x29 x228))
(assert (= (x724 x1008) (ite (= x420 x1008) x1621 (x1003 x1008))))
(assert (x29 x1675))
(assert (= (x1195 (- (+ (- x144 x1716) x1472) 164)) (x1125 (- (+ (- x144 x1716) x1472) 164))))
(assert (x29 x1543))
(assert (= (x1125 (- (+ 164 (- x1493 160)) 164)) (x1195 (- (+ (- x1493 160) 164) 164))))
(assert (=> (< (- x988 1) 10000) (= (x1617 x988) (x1666 x988))))
(assert (x1033 x744 x1630))
(assert (x29 x455))
(assert (= (x535 x1428) (ite (and x1073 (not x584) x1137) (x1003 x1428) (ite (and x1137 x1181 (not x1073) (not x259) (not x584)) (x724 x1428) (ite (and (not x584) (not x1073) x1137 (not x1181)) (x1003 x1428) (x448 x1428))))))
(assert (x29 x1793))
(assert (x29 x1449))
(assert (x1881 x743 x1113))
(assert (x1470 x1735))
(assert (x29 x917))
(assert (x29 x1407))
(assert (x1033 x641 x1787))
(assert (x29 x1243))
(assert (=> (< (- x103 1) 10000) (= (x1666 x103) (x1617 x103))))
(assert (= x74 (x5 (x1617 x74))))
(assert (= x1151 (x5 (x1617 x1151))))
(assert (= 1986467848 (x5 (x1666 1986467848))))
(assert (= (x1115 x507) (ite (and x1398 x1137) (x882 x507) (x1426 x507))))
(assert (=> (> (+ 10000 1) x478) (= (x1617 x478) (x1666 x478))))
(assert (x29 x818))
(assert (= (x882 x792) (ite (= x1008 x792) x220 (x1535 x792))))
(assert (x29 x571))
(assert (x1470 x65))
(assert (x29 x1015))
(assert (x29 x46))
(assert (= (x5 (x1617 x990)) x990))
(assert (x29 x785))
(assert (x29 x1278))
(assert (x29 x387))
(assert (x29 x158))
(assert (= (ite (= x184 x420) x1621 (x1003 x184)) (x724 x184)))
(assert (x1500 x190))
(assert (x29 x438))
(assert (x29 x1502))
(assert (x29 x902))
(assert (x29 x1854))
(assert (x29 x230))
(assert (x29 x900))
(assert (x29 x1673))
(assert (x29 x852))
(assert (= x597 (x5 (x1617 x597))))
(assert (x29 x1425))
(assert (= (ite (= x1008 x505) x220 (x1535 x505)) (x882 x505)))
(assert (= (x1666 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x1617 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (ite (and x225 x738 x1105 (not x429) x227 x699) (x1554 x1425) (ite (and x225 x738 x227 (not x699) x1105) (x1829 x1425) (ite (and x738 (not x225) x1105 x227) (x151 x1425) (ite (and x738 (not x227) x1105) (x1696 x1425) (x1707 x1425))))) (x1093 x1425)))
(assert (x1470 x799))
(assert (x29 x1757))
(assert (x29 x926))
(assert (= (x1195 64) (x1125 64)))
(assert (x29 x921))
(assert (x29 x1791))
(assert (x29 x851))
(assert (x29 x769))
(assert (x29 x1367))
(assert (= (ite (= x144 x1586) x922 (x1435 x144)) (x1279 x144)))
(assert (x1500 x1820))
(assert (x29 x812))
(assert (= x1714 x1335))
(assert (x29 x1063))
(assert (x29 x1240))
(assert (= (x283 (+ 164 (- x184 160))) (ite (and (> (+ 164 x1665) (+ (- x184 160) 164)) (>= (+ 164 (- x184 160)) 164)) (x1195 (- (+ 164 (- x184 160)) 164)) (x540 (+ (- x184 160) 164)))))
(assert (= (x1666 1000000000000000000) (x1617 1000000000000000000)))
(assert (= (ite (= x420 x144) x1621 (x1003 x144)) (x724 x144)))
(assert (= (x1435 x792) (ite (= x1367 x792) x1370 (x1880 x792))))
(assert (x29 x1828))
(assert (= (ite (and x442 x240) (x1719 x571) (x696 x571)) (x1210 x571)))
(assert (x29 x972))
(assert (=> (> (+ 10000 1) x1652) (= (x1666 x1652) (x1617 x1652))))
(assert (x1500 x1530))
(assert (x29 x118))
(assert (x29 x1294))
(assert (=> (> (+ 10000 1) x1316) (= (x1666 x1316) (x1617 x1316))))
(assert (x29 x802))
(assert (x1470 x998))
(assert (= (ite (= x931 x1008) x220 (x1535 x931)) (x882 x931)))
(assert (x29 x692))
(assert (= x517 (x5 (x1617 x517))))
(assert (= (=> (and (= 1986467848 x778) (> x1200 0) (not (< x778 1968616202)) (= (x414 (x1617 274184521717934524641157099916833587206)) x1200) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (> 2293535753 x778) (not (= 1968616202 x778)) (not (> 911411945 x778)) (<= 0 x231) (= x1039 x231)) (=> (and (= x1023 x1292) x178 (= (> x1595 x467) x178) (= x1595 x1039) (= x1219 x1136)) x1082)) x1038))
(assert (x29 x1437))
(assert (= (ite (= x673 x1135) x1127 (x337 x673)) (x1003 x673)))
(assert (x29 x307))
(assert (=> (> (+ 10000 1) x154) (= (x1666 x154) (x1617 x154))))
(assert (= (x102 x1438) (ite (and x1086 (not x1369)) (x887 x1438) (x1389 x1438))))
(assert (x29 x1375))
(assert (x29 x884))
(assert (x29 x1151))
(assert (x29 x1528))
(assert (= (x911 x1401) (ite (= x1401 x1278) x686 (x1081 x1401))))
(assert (x29 x513))
(assert (=> (< (- x83 1) 10000) (= (x1666 x83) (x1617 x83))))
(assert (= x96 (x5 (x1617 x96))))
(assert (x29 x635))
(assert (=> (< (- x1819 1) 10000) (= (x1617 x1819) (x1666 x1819))))
(assert (= x1899 (=> (and (= x528 x1548) (not (or (> x1334 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1334)) (> 32 x1334)))) (= (x309 128) x528) (not (= 0 x1610))) (=> (and (= x1710 (x1368 (+ x985 32))) (= x1008 (x1368 (+ x985 160))) (<= x1260 1461501637330902918203684832716283019655932542975) (= x1371 x1292) (= (uninterp_mod (- (x1368 (+ 32 (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1665) (= (x283 132) x220) (= x1121 x1637) (= x1398 (= 0 x220)) (< x1723 2293535753) (<= x1628 1461501637330902918203684832716283019655932542975) (> 468353030 x1723) (or (not x188) (and (not (> x716 1)) (not (< x1722 1)) x188 (or (not x1235) (and (= x1468 (x1535 128)) (= x65 (x1535 160)) (= (x366 1461501637330902918203684832716283019655932542975 x232) x71) (= (> x1722 2) x1674) (< 0 x26) (> x1468 1) x1235 (or (and (= (x366 1461501637330902918203684832716283019655932542975 x799) x1122) x1674 (= x136 (x1535 128)) (> x1845 2) (= x799 (x1535 160)) (= x620 (x366 1461501637330902918203684832716283019655932542975 x744)) (= x1845 (x1535 128)) (not x1768) (= (x1535 224) x744) (< 0 x136) (= x1768 (> x1722 3)) (not (= x1122 x620))) (not x1674)) (= (x1535 192) x232) (not (= x549 x71)) (= x26 (x1535 128)) (= (x366 1461501637330902918203684832716283019655932542975 x65) x549))) (= (x860 (- x1722 1)) x716) (= (< 1 x1722) x1235))) (> x1791 0) (or (and (= x320 x315) x584) (and (<= 0 x1214) (= (x878 x359) x593) (= x1073 (= 0 x1214)) (= x1626 (x366 1461501637330902918203684832716283019655932542975 x339)) (<= x1144 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1814 (> x128 x937)) (= x1092 (x495 (x1617 x1371) (x1666 1) 0)) (= (= x593 0) x850) (>= x1127 0) (>= x231 0) (= x1734 (x495 (x1617 x1371) (x1666 10) 0)) (or (and (= 0 x536) (not x1814)) (and (= (x1003 x1135) x890) (= x754 (= x937 0)) (or (and (not x754) (not (< x1173 x937)) (= x807 (ite (> 604800 x54) x54 604800)) (= x807 x536) (= (x860 (- x1173 x937)) x54) (= x475 604800)) (and x754 (= (x860 (- x1173 x827)) x1187) (= (x1003 x1285) x827) (= x536 x1187) (not (> x827 x1173)))) (or (and x1305 (= x413 x1173) (= x413 (x1003 x1135))) (and (not x1305) (= x1607 x1173))) x1814 (= x1305 (> x1607 x890)))) (= (x366 1461501637330902918203684832716283019655932542975 x339) x773) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1237 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x1135 (x1368 (+ 32 x1285))) (= x1127 (x163 x977)) (not (< x231 x1371)) (= x547 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (x1648 x1092) x1055) (= (x1003 x1135) x128) (>= x1055 0) (>= x231 0) (= (x495 (x1617 x1626) x416 0) x1771) (>= x593 0) (= x39 (x495 (x1617 x1237) x929 0)) (or (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x915) (= x1418 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x517 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x1463 (x911 x1278)) (= x554 (x1368 (+ x1693 64))) (= (x1368 (+ 32 x1693)) x1278) (= x1738 (x495 (x1617 x295) x959 0)) (>= x231 0) (<= 0 x1019) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x962) (not (> x852 x231)) (> x438 x1480) (or (and x1680 (= x77 (x366 1461501637330902918203684832716283019655932542975 x339))) (and (= x733 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x1785 x474) (= (* x191 x293) x474) (< (* x191 x293) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1864 (x495 (x1617 x733) x1700 0)) (= x1700 (x495 (x1617 x852) (x1666 5) 0)) (not x1680) (= x344 (x366 1461501637330902918203684832716283019655932542975 x339)))) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x785 (x1332 x1738)) (= (x495 (x1617 x852) (x1666 3) 0) x120) (= (x495 (x1617 x295) x17 0) x1606) (= x1574 (x495 (x1617 x1418) x1391 0)) (= x1798 (x495 (x1617 x852) (x1666 6) 0)) (>= x785 0) (= (x495 (x1617 x517) x120 0) x959) (= (x366 1461501637330902918203684832716283019655932542975 x339) x1627) (= x17 (x495 (x1617 x1627) x440 0)) (>= x962 0) (<= x825 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x686 0) (= x205 (x495 (x1617 x984) x1798 0)) (= (x1648 x1447) x1019) (or (and (= (x911 x1278) x1601) (or (and (= x373 x1607) (not x772)) (and (= x1209 (x911 x1278)) x772 (= x1209 x373))) (= x772 (< x1601 x1607)) (= (= x962 0) x476) (or (and (not (> x1133 x373)) (= x1133 (x911 x1693)) (= (x860 (- x373 x1133)) x1563) x476 (= x1563 x191)) (and (= 604800 x1191) (not x476) (not (< x373 x962)) (= x95 (x860 (- x373 x962))) (= x1857 (ite (> 604800 x95) x95 604800)) (= x191 x1857))) x280) (and (= x191 0) (not x280))) (= (x495 (x1617 x852) (x1666 10) 0) x711) (= (> x1463 x962) x280) (not x298) (= x320 x554) (= x1022 (x374 x1447 1)) (= (= x191 0) x1680) (= x293 (x1650 x521)) (= (x366 1461501637330902918203684832716283019655932542975 x339) x984) (= (= x915 0) x874) (or (and (= (> x220 0) x1047) (= x438 x981) (= x1619 0) (not x1898) (= x1903 (ite (> x785 115792089237316195423570985008687907853269984665640564039457) 1 0)) (= x434 1) (or (and (= x1361 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (- (/ x1154 1000000000000000000) (uninterp_frac x1154 1000000000000000000)) x1324) (<= x582 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x495 (x1617 x852) (x1666 4) 0) x502) (< 0 x220) (= x427 x1324) (= x1154 (* x722 x582)) (>= 1461501637330902918203684832716283019655932542975 x1656) (= (x1368 (+ x1710 160)) x931) (= x1330 0) (>= 1461501637330902918203684832716283019655932542975 x1659) (= x999 (x495 (x1617 x1361) x1529 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1455 x1324)) (<= 0 x1330) (= (x911 x931) x1455) (< 0 x220) (<= 0 x582) (= x1330 (x319 x1581)) (= x1656 (x283 164)) (= x1061 (< 1 x220)) (= (x495 (x1617 x852) (x1666 11) 0) x1529) (= x1155 (x495 (x1617 x295) x1520 0)) (= x1659 (x283 164)) (or (and (< 1 x1263) (= (x495 (x1617 x295) x1670 0) x1412) (>= 1461501637330902918203684832716283019655932542975 x1243) (<= x154 1461501637330902918203684832716283019655932542975) (>= x1345 0) (< (+ x992 x1743) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x89 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (x31 x1401) x992) (= x1670 (x495 (x1617 x1227) x894 0)) (= x1345 0) (= x1243 (x283 196)) (= x899 (x149 x409)) (= x1263 (x31 x1008)) (= x1522 (x495 (x1617 x89) x840 0)) (= x154 (x283 196)) (= x1058 (+ x1654 x1545)) (not x810) (< (* x722 x899) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1654 x992) (= (x495 (x1617 x1243) x1412 0) x246) (< 1 x220) (= x1743 (- (/ x1202 1000000000000000000) (uninterp_frac x1202 1000000000000000000))) (= x1227 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (x495 (x1617 x154) x1522 0) x409) (= x1202 (* x899 x722)) (= x1345 (x319 x246)) (= (x495 (x1617 x852) (x1666 11) 0) x840) (= (x495 (x1617 x852) (x1666 4) 0) x894) (<= x899 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1368 (+ x1710 192)) x1401) (<= 0 x899) (= x1545 x1743) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1345) x1061 (= x810 (> x220 2)) (< 1 x220)) (not x1061)) (< (* x582 x722) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> x1054 0) (= x68 (x495 (x1617 x1656) x999 0)) (= (+ x855 x427) x10) (= x582 (x149 x68)) (= x340 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x855 x1455) (= x1520 (x495 (x1617 x340) x502 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1330) (= (x911 x1008) x1054) (= x1581 (x495 (x1617 x1659) x1155 0)) x1047) (not x1047)) (= (x366 x434 x1903) x1619) (> x825 0) (= (x1368 (+ 1 x852)) x981) (= (uninterp_mod (* x785 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1623) (= x722 (- (/ x1623 x825) (uninterp_frac x1623 x825)))) (and (= x21 x438) (= (x1368 (+ 1 x852)) x21) x1898)) (<= x293 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x825 (x443 x1574)) (not (< x231 x852)) (>= x825 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (<= x1019 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1391 (x495 (x1617 x852) (x1666 5) 0)) (= (x495 (x1617 x852) (x1666 1) 0) x1447) (<= 0 x231) (or (and (or (and (= x749 (* x915 x718)) (= x1693 x1111) (< (* x718 x915) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1765 (x495 (x1617 x1695) x1663 0)) (= x1695 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (x495 (x1617 x295) x1765 0) x143) (not x490) (= x1663 (x495 (x1617 x852) (x1666 3) 0)) (= (x366 1461501637330902918203684832716283019655932542975 x339) x470) (= x1064 x749)) (and (= x1364 (x366 1461501637330902918203684832716283019655932542975 x339)) x490 (= x1693 x1111))) (= (x495 (x1617 x852) (x1666 7) 0) x1523) (<= 0 x349) (<= x1871 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1822 (x163 x1491)) (= (x1368 (+ 96 x1285)) x1353) (= x379 (x366 1461501637330902918203684832716283019655932542975 x339)) (<= x1822 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x495 (x1617 x295) x1027 0) x672) (= (x1648 x1143) x349) (= (x495 (x1617 x379) x1523 0) x1027) (<= 0 x1871) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x349) (<= 0 x1822) (not x874) (or (and (= 0 x718) (not x1394)) (and (or (and (= (ite (< x1556 604800) x1556 604800) x1290) (not (< x1892 x1871)) (= 604800 x125) (= (x860 (- x1892 x1871)) x1556) (= x1290 x718) (not x847)) (and (= (x224 x769) x40) (not (> x40 x1892)) x847 (= x109 (x860 (- x1892 x40))) (= x718 x109))) (= x847 (= 0 x1871)) (= x391 (> x1607 x304)) (or (and (= (x224 x1353) x1849) (= x1849 x1892) x391) (and (= x1892 x1607) (not x391))) (= x304 (x224 x1353)) x1394)) (= x1871 (x1098 x672)) (= x490 (= 0 x718)) (= (< x1871 x99) x1394) (= x1143 (x495 (x1617 x852) (x1666 1) 0)) (= (x224 x1353) x99) (= (x1368 (+ 128 x1285)) x1111) (= x1491 (x374 x1143 1))) (and (= (x366 1461501637330902918203684832716283019655932542975 x339) x1126) (= x769 x1693) x874)) (= (x477 x205) x962) (= (x495 (x1617 x852) (x1666 9) 0) x440) (= x1530 (x366 1461501637330902918203684832716283019655932542975 x339)) (>= x915 0) (<= x686 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x293) (= x686 (x163 x1022)) (= x521 (x495 (x1617 x1530) x711 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x785) (= x1898 (= x785 0)) (= (x878 x1606) x915)) (and x298 (= x320 x769))) (= x1214 (x1569 x1913)) (= (x495 (x1617 x1371) (x1666 6) 0) x929) (= (x1297 x865) x1275) (<= x1214 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x56 x39) x937) (>= x1275 0) (= x298 (< x1480 x852)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1275) (= (x366 1461501637330902918203684832716283019655932542975 x339) x1139) (= (x495 (x1617 x773) x301 0) x1564) (= x1913 (x495 (x1617 x295) x1771 0)) (= (x495 (x1617 x547) x1396 0) x865) (= x416 (x495 (x1617 x1371) (x1666 3) 0)) (<= x1127 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1573 (x495 (x1617 x1139) x1734 0)) (>= x1144 0) (= (x495 (x1617 x295) x1564 0) x359) (= (x1368 (+ x1285 64)) x769) (or (and (= (x366 1461501637330902918203684832716283019655932542975 x339) x1147) (= x964 (x495 (x1617 x1147) x534 0)) (= x315 x1285) x850 (= (x495 (x1617 x295) x964 0) x575) (= x534 (x495 (x1617 x1371) (x1666 7) 0))) (and (= x1780 (= x1603 0)) (not x850) (= (x366 1461501637330902918203684832716283019655932542975 x339) x1486) (= x336 (x163 x1851)) (or (and (not x179) (= 0 x1603)) (and (= x677 (x1643 x1649)) (= x936 (> x1607 x677)) x179 (= x1476 (= x41 0)) (or (and x936 (= x90 (x1643 x1649)) (= x90 x329)) (and (= x1607 x329) (not x936))) (or (and (= x382 x1603) (= x330 604800) (not x1476) (not (< x329 x41)) (= (x860 (- x329 x41)) x106) (= x382 (ite (< x106 604800) x106 604800))) (and (not (> x97 x329)) (= x1603 x658) (= (x1643 x315) x97) (= (x860 (- x329 x97)) x658) x1476)))) (= (x495 (x1617 x295) x1831 0) x720) (= (x495 (x1617 x1486) x59 0) x1831) (<= 0 x81) (= (x495 (x1617 x1371) (x1666 7) 0) x59) (= (x1368 (+ 64 x315)) x378) (= (x1368 (+ x315 32)) x1649) (<= x81 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x336 115792089237316195423570985008687907853269984665640564039457584007913129639935) (or (and (= x38 (x495 (x1617 x1371) (x1666 7) 0)) (= x190 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (x495 (x1617 x190) x38 0) x524) (= (x495 (x1617 x295) x524 0) x1184) x1780 (= x378 x1285)) (and (= (x495 (x1617 x1371) (x1666 7) 0) x152) (= (x495 (x1617 x295) x1690 0) x134) (= x1285 x378) (= x558 x464) (= (x495 (x1617 x1501) x152 0) x1690) (not x1780) (= x464 (* x1603 x593)) (= (x366 1461501637330902918203684832716283019655932542975 x339) x1501) (< (* x1603 x593) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x124 (x495 (x1617 x37) x1576 0)) (= x1576 (x495 (x1617 x1371) (x1666 3) 0)) (= x1646 (x495 (x1617 x295) x124 0)) (= (x366 1461501637330902918203684832716283019655932542975 x339) x37))) (<= 0 x336) (>= x41 0) (= x81 (x1648 x581)) (= (x495 (x1617 x1371) (x1666 1) 0) x581) (<= x41 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x41 (x204 x720)) (= x179 (< x41 x1614)) (= x1851 (x374 x581 1)) (= x1614 (x1643 x1649)))) (not x584) (or (and (= (x366 1461501637330902918203684832716283019655932542975 x339) x1803) (= (x366 1461501637330902918203684832716283019655932542975 x339) x468) (= x254 (x495 (x1617 x468) x1350 0)) (= x1459 x286) (= (x495 (x1617 x1371) (x1666 6) 0) x331) (= x1350 (x495 (x1617 x1371) (x1666 5) 0)) (< (* x536 x1144) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x1144 x536) x286) (= x1192 (x495 (x1617 x1803) x331 0)) (not x113)) (and (= x169 (x495 (x1617 x971) x566 0)) (= x971 (x366 1461501637330902918203684832716283019655932542975 x339)) x113 (= (x495 (x1617 x1371) (x1666 6) 0) x566))) (<= x937 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x231 x1371)) (= (x1650 x1573) x1144) (<= x1055 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x113 (= x536 0)) (<= x593 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x937) (or (and (= (< 0 x220) x1181) (or (not x1181) (and (> x994 0) (or (not x259) (and (= (- (/ x713 1000000000000000000) (uninterp_frac x713 1000000000000000000)) x933) (= (x495 (x1617 x660) x1890 0) x1514) (< 1 x220) (<= x367 1461501637330902918203684832716283019655932542975) (= (x495 (x1617 x1782) x919 0) x1024) (= (> x220 2) x426) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x249) (<= x801 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1382 (x1368 (+ 192 x1710))) (= x801 (x319 x1514)) (< 1 x220) (= x933 x1634) (= x1782 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x1010 (x724 x1382)) (= (x495 (x1617 x1371) (x1666 11) 0) x454) (= (x495 (x1617 x1371) (x1666 4) 0) x919) (>= x249 0) (<= 0 x801) (< (* x249 x837) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< 1 x1497) (= 0 x801) (= (x149 x723) x249) (= x1040 (+ x347 x1634)) (not x426) (= (x495 (x1617 x295) x1024 0) x1890) x259 (= (x283 196) x367) (= (x495 (x1617 x367) x1380 0) x723) (= (x724 x1008) x1497) (= (x495 (x1617 x1642) x454 0) x1380) (= (x283 196) x660) (= x347 x1010) (= x713 (* x249 x837)) (= x1642 (x366 1461501637330902918203684832716283019655932542975 x339)) (<= x660 1461501637330902918203684832716283019655932542975) (< (+ x933 x1010) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x319 x1815) x1320) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x574 x1408)) (= x1408 (x1003 x420)) (= x463 (x495 (x1617 x295) x1049 0)) (= (x366 1461501637330902918203684832716283019655932542975 x339) x140) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1320) (< 0 x220) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1145) (= (x495 (x1617 x988) x1158 0) x1419) (= x1288 (x495 (x1617 x1371) (x1666 11) 0)) (= x1320 0) (= x420 (x1368 (+ x1710 160))) (= x273 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x988 (x283 164)) (<= 0 x1320) (= (x149 x1419) x1145) (= (+ x880 x987) x1621) (= x987 x1408) (= (* x837 x1145) x836) (< (* x1145 x837) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x994 (x1003 x1008)) (= (- (/ x836 1000000000000000000) (uninterp_frac x836 1000000000000000000)) x574) (= (< 1 x220) x259) (>= 1461501637330902918203684832716283019655932542975 x988) (<= x306 1461501637330902918203684832716283019655932542975) (= (x495 (x1617 x1371) (x1666 4) 0) x1759) (= (x283 164) x306) (= x574 x880) x1181 (>= x1145 0) (= (x495 (x1617 x273) x1288 0) x1158) (> x220 0) (= (x495 (x1617 x140) x1759 0) x1049) (= (x495 (x1617 x306) x463 0) x1815))) (= (x1368 (+ x1371 1)) x1686) (= 0 x1521) (= x603 (ite (< 115792089237316195423570985008687907853269984665640564039457 x1214) 1 0)) (= (x366 x9 x603) x1521) (< 0 x1275) (= x837 (- (/ x818 x1275) (uninterp_frac x818 x1275))) (= x1686 x852) (not x1073) (= x818 (uninterp_mod (* x1214 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= 1 x9)) (and (= (x1368 (+ 1 x1371)) x624) x1073 (= x624 x852))) (= x977 (x374 x1092 1)) (= (x495 (x1617 x1371) (x1666 5) 0) x1396) (= x301 (x495 (x1617 x1371) (x1666 9) 0)))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1472) true) (<= 0 x1121) (= (uninterp_mod (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x146) (not (< x1472 x1834)) (= (x1368 (+ 164 x146)) x1834) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x621) (and (< x621 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x621))))) (= x661 (x1368 (+ 32 x465))) (= (x1368 (+ x661 x1008)) x315) (>= 1461501637330902918203684832716283019655932542975 x1121) (not (= 69947311 x1723)) (or (and (= x1716 (x1368 (+ x1710 160))) (= (uninterp_mod (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1469) (not x1398)) x1398) (= x985 (uninterp_mod (* x220 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x220 18446744073709551615)) (<= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x1628) (not (< x1480 x1371)) (= x188 (> x745 0)) (or (not x1326) (and (or (not x841) (and (not x762) (= x493 (x366 1461501637330902918203684832716283019655932542975 x339)) x841 (= x762 (> x1480 x1510)) (= x1510 (x1368 (+ x1371 2))) (= (x366 1461501637330902918203684832716283019655932542975 x339) x869))) x1326 (= (x366 1461501637330902918203684832716283019655932542975 x339) x446) (= x1203 (x366 1461501637330902918203684832716283019655932542975 x339)) (= (> x1480 x1363) x841) (= (x1368 (+ x1371 1)) x1363))) (= (x1368 (+ 160 x465)) x1452) (> x231 x1480) (= x910 x1548) (>= x231 0) (>= x1260 0) (= (< x1371 x1480) x1326) (= 87118632 x1723) (= x1607 x1253) (= (x860 (- x1722 1)) x745) (= x465 (uninterp_mod (* 32 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1136 x339) (= x584 (< x1480 x1371)) (not (< x1722 1)) (= x1628 x295) (= x459 x527) (= (x1535 128) x1722) (= 0 x1836) (not (> 4 x1472)) (> 911411945 x1723) (= x1791 (x414 (x1617 274184521717934524641157099916833587206))) (= x1480 x1292) (= x1637 x1451) (= x390 x1836) (= (x860 (- x1472 4)) x621) (= x523 x1854) (= (x1368 (+ (uninterp_mod (* x1854 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 164)) x1472) (<= x339 1461501637330902918203684832716283019655932542975) (= x906 128) (> x1472 163)) x20))))
(assert (= 274184521717934524641157099916833587214 (x5 (x1617 274184521717934524641157099916833587214))))
(assert (x29 x1653))
(assert (x29 x586))
(assert (x29 x1609))
(assert (= (ite (and x868 x800) (x61 x646) (x631 x646)) (x229 x646)))
(assert (x29 x1191))
(assert (= (ite (< 228 (+ 164 x1665)) (x1195 64) (x540 228)) (x283 228)))
(assert (= (ite (and x738 (not x1215) x1105) (x1093 x1425) (x1772 x1425)) (x210 x1425)))
(assert (x29 x103))
(assert (x1500 x773))
(assert (x29 x1117))
(assert (= (ite (and x800 x868) (x1441 x144) (x583 x144)) (x531 x144)))
(assert (x29 x702))
(assert (= (x1617 274184521717934524641157099916833587214) (x1666 274184521717934524641157099916833587214)))
(assert (x29 x673))
(assert (= (x1115 x792) (ite (and x1398 x1137) (x882 x792) (x1426 x792))))
(assert (= (x882 x1428) (ite (= x1008 x1428) x220 (x1535 x1428))))
(assert (x29 x1776))
(assert true)
(assert (x29 x705))
(assert (x29 x867))
(assert (= 759532456 (x5 (x1666 759532456))))
(assert (= (ite (and (<= 164 (+ 164 (- x507 160))) (< (+ 164 (- x507 160)) (+ x1665 164))) (x1195 (- (+ 164 (- x507 160)) 164)) (x540 (+ 164 (- x507 160)))) (x283 (+ 164 (- x507 160)))))
(assert (= (x1880 x1852) (ite (= x1852 x935) x1302 (x1230 x1852))))
(assert (x1033 x949 x941))
(assert (x29 x1242))
(assert (x29 x1461))
(assert (x1500 x1417))
(assert (= (ite (= x1278 x144) x686 (x1081 x144)) (x911 x144)))
(assert (= (x5 (x1617 x1371)) x1371))
(assert (x29 x1374))
(assert (= (x1003 x1078) (ite (= x1078 x1135) x1127 (x337 x1078))))
(assert (= x338 (x5 (x1617 x338))))
(assert (= x478 (x5 (x1617 x478))))
(assert (x29 x198))
(assert (x1500 x306))
(assert (x29 x985))
(assert (x1500 x691))
(assert (=> (< (- x957 1) 10000) (= (x1617 x957) (x1666 x957))))
(assert (=> (< (- x984 1) 10000) (= (x1666 x984) (x1617 x984))))
(assert (= (x5 (x1617 x988)) x988))
(assert (x29 x722))
(assert (x29 x1390))
(assert (x29 x527))
(assert (= (x535 x505) (ite (and x1073 x1137 (not x584)) (x1003 x505) (ite (and (not x1073) x1181 x1137 (not x584) (not x259)) (x724 x505) (ite (and x1137 (not x1073) (not x1181) (not x584)) (x1003 x505) (x448 x505))))))
(assert (=> (> (+ 10000 1) x1828) (= (x1666 x1828) (x1617 x1828))))
(assert (x29 x111))
(assert (x29 x167))
(assert (= (x1125 (- (+ 164 (- x792 160)) 164)) (x1195 (- (+ 164 (- x792 160)) 164))))
(assert (= x686 (x911 x1278)))
(assert (x29 x1005))
(assert (= x773 (x5 (x1617 x773))))
(assert (= (ite (and (not x153) (not x1395) x1086) (x1778 x1120) (x808 x1120)) (x909 x1120)))
(assert (x1470 x232))
(assert (x29 x197))
(assert (x1500 x1407))
(assert (x29 x1501))
(assert (x29 x218))
(assert (= (ite (= x1135 x792) x1127 (x337 x792)) (x1003 x792)))
(assert (x29 x766))
(assert (x29 x537))
(assert (= (x1125 (- (+ (- x1425 160) 164) 164)) (x1195 (- (+ 164 (- x1425 160)) 164))))
(assert (x1500 x990))
(assert (x29 x1826))
(assert (x29 x157))
(assert (=> (< (- x367 1) 10000) (= (x1666 x367) (x1617 x367))))
(assert (= 0 (x989 x522)))
(assert (= (ite (= x783 x673) x600 (x151 x673)) (x1829 x673)))
(assert (x29 x1065))
(assert (= (x1666 1461501637330902918203684832716283019655932542975) (x1617 1461501637330902918203684832716283019655932542975)))
(assert (= (x5 (x1617 x154)) x154))
(assert (x29 x889))
(assert (= (x531 x1078) (ite (and x800 x868) (x1441 x1078) (x583 x1078))))
(assert (x29 x1144))
(assert (x29 x509))
(assert (=> (> (+ 10000 1) x1418) (= (x1617 x1418) (x1666 x1418))))
(assert (= 2960351575 (x5 (x1666 2960351575))))
(assert (= (x1003 x1135) x1127))
(assert (x29 x784))
(assert (x29 x12))
(assert (x29 x1628))
(assert (x29 x1641))
(assert (= (+ 1 (x5 x581)) (x5 (x374 x581 1))))
(assert (x29 x50))
(assert (=> (> (+ 10000 1) x1486) (= (x1666 x1486) (x1617 x1486))))
(assert (x29 x1179))
(assert (x29 x47))
(assert (=> (< (- x802 1) 10000) (= (x1617 x802) (x1666 x802))))
(assert (x29 x304))
(assert (= (ite (and (> (+ 164 x1665) (+ x1472 (- x1852 x1716))) (>= (+ (- x1852 x1716) x1472) 164)) (x1195 (- (+ (- x1852 x1716) x1472) 164)) (x540 (+ (- x1852 x1716) x1472))) (x283 (+ (- x1852 x1716) x1472))))
(assert (x1033 x990 x1399))
(assert (=> (> (+ 10000 1) x1659) (= (x1666 x1659) (x1617 x1659))))
(assert (= (ite (and x868 x800) (x1445 x341) (x1067 x341)) (x251 x341)))
(assert (x29 x621))
(assert (= (x5 (x1617 x1490)) x1490))
(assert (x29 x97))
(assert (x29 x968))
(assert (x29 x494))
(assert (x29 x1))
(assert (x1500 x768))
(assert (x29 x1075))
(assert (x29 x727))
(assert (x29 x1683))
(assert (x29 x74))
(assert (= (x5 (x1666 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x1500 x988))
(assert (x29 x234))
(assert (x29 x401))
(assert (= (x5 (x1617 x1848)) x1848))
(assert (x29 x1512))
(assert (x29 x649))
(assert (x29 x1237))
(assert (x29 x988))
(assert (x29 x1507))
(assert (x29 x1370))
(assert (= (x5 (x1666 69947311)) 69947311))
(assert (= (x724 x1382) (ite (= x1382 x420) x1621 (x1003 x1382))))
(assert (=> (> (+ 10000 1) x299) (= (x1617 x299) (x1666 x299))))
(assert (x29 x415))
(assert (= 468353030 (x5 (x1666 468353030))))
(assert (= (x5 (x1666 635128645)) 635128645))
(assert (x29 x953))
(assert (= x1681 (=> (and (> 911411945 x747) (< x747 2293535753) (= x167 (x414 (x1617 274184521717934524641157099916833587206))) (= (= 274184521717934524641157099916833587218 x198) x1739) (> x167 0) (>= 1461501637330902918203684832716283019655932542975 x597) (= x747 468353030) (= 128 x1432) (not (> 468353030 x747)) (<= x198 1461501637330902918203684832716283019655932542975)) (and (=> (not x1739) x1138) (=> (and (not (= x1140 649617121)) (= x1610 1) (= (x414 (x1617 274184521717934524641157099916833587218)) x1633) (<= 0 x1821) (not (> 4 x370)) (not x1291) (= 1889567281 x1140) (= x1821 (x630 x325)) (= x325 (x495 (x1617 x597) (x1666 1) 0)) (> x1633 0) (= 36 x370) (= x597 x851) (not (= 826074471 x1140)) (= x979 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x1134 (x860 (- x370 4))) (= x370 36) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1821) x1739 (<= x851 1461501637330902918203684832716283019655932542975) (= x1334 32) (not (> 649617121 x1140)) (= x1291 (or (> x1134 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x1134 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1134) true))))) x1899)))))
(assert (= (ite (and (<= 164 (+ (- x1382 x1716) x1472)) (< (+ x1472 (- x1382 x1716)) (+ x1665 164))) (x1195 (- (+ (- x1382 x1716) x1472) 164)) (x540 (+ x1472 (- x1382 x1716)))) (x283 (+ (- x1382 x1716) x1472))))
(assert (= (x1666 911411945) (x1617 911411945)))
(assert (x29 x172))
(assert (= (ite (and x1618 (not x895) x1198) (x1518 x1078) (x471 x1078)) (x688 x1078)))
(assert (=> (< (- x1227 1) 10000) (= (x1617 x1227) (x1666 x1227))))
(assert (x29 x1892))
(assert (x29 x935))
(assert (x29 x1660))
(assert (x29 x549))
(assert (x29 x336))
(assert (= (x1518 x184) (ite (and (not x794) x669 x485 x1618 x1198 x419) (x1279 x184) (ite (and x1198 x485 x1618 x669 (not x419)) (x1435 x184) (ite (and (not x669) x1618 x1198 x485) (x1880 x184) (ite (and x1198 x1618 (not x485)) (x1230 x184) (x399 x184)))))))
(assert (x29 x226))
(assert (= (ite (and (<= 164 (+ x1472 (- x1008 x1716))) (< (+ x1472 (- x1008 x1716)) (+ 164 x1665))) (x1195 (- (+ (- x1008 x1716) x1472) 164)) (x540 (+ (- x1008 x1716) x1472))) (x283 (+ (- x1008 x1716) x1472))))
(assert (x29 x691))
(assert (= (ite (and (not x584) x1073 x1137) (x1003 x931) (ite (and x1181 (not x1073) (not x584) (not x259) x1137) (x724 x931) (ite (and (not x584) x1137 (not x1181) (not x1073)) (x1003 x931) (x448 x931)))) (x535 x931)))
(assert (x29 x1245))
(assert (x29 x381))
(assert (x29 x475))
(assert (=> (> (+ 10000 1) x1385) (= (x1617 x1385) (x1666 x1385))))
(assert (not x1575))
(assert (x29 x1101))
(assert (= x468 (x5 (x1617 x468))))
(assert (= x1082 (=> (and (not (= 1968616202 x1387)) (not (> 1968616202 x1387)) (> 2293535753 x1387) (not (= 2061678023 x1387)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x867) (= (x414 (x1617 274184521717934524641157099916833587206)) x702) (= (x495 (x1617 x1219) x180 0) x1705) (= x1387 2258409472) (>= x867 0) (not (= 2211524764 x1387)) (= (x56 x1705) x867) (= (x495 (x1617 x1023) (x1666 6) 0) x180) (> x702 0) (not (< x1387 911411945)) (not (= 1986467848 x1387)) (>= 1461501637330902918203684832716283019655932542975 x1219) (= x219 x867)) (=> (and (= x1565 (> x1541 0)) (= x219 x1541) (= x1679 x1136) x1565 (= x1308 x1292) (= x1897 0) (= x559 x91)) x1843))))
(assert (x29 x1816))
(assert (x29 x973))
(assert (x1500 x852))
(assert (= 115792089237316195423570985008687907853269984665640564039457 (x5 (x1666 115792089237316195423570985008687907853269984665640564039457))))
(assert (x1500 x307))
(assert (x29 x1031))
(assert (= (x283 (+ (- x215 160) 164)) (ite (and (< (+ (- x215 160) 164) (+ 164 x1665)) (>= (+ 164 (- x215 160)) 164)) (x1195 (- (+ 164 (- x215 160)) 164)) (x540 (+ 164 (- x215 160))))))
(assert (x29 x1871))
(assert (x29 x1547))
(assert (=> (< (- x306 1) 10000) (= (x1666 x306) (x1617 x306))))
(assert (x29 x869))
(assert (x29 x791))
(assert (= (ite (= x673 x1367) x1370 (x1880 x673)) (x1435 x673)))
(assert (= (x151 x1493) (ite (= x1493 x1177) x226 (x1696 x1493))))
(assert (= (x1195 (- (+ (- x1852 160) 164) 164)) (x1125 (- (+ (- x1852 160) 164) 164))))
(assert (= (ite (= x1515 x505) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x505)) (x1230 x505)))
(assert (x29 x1818))
(assert (x29 x574))
(assert (x29 x106))
(assert (=> (< (- x1568 1) 10000) (= (x1617 x1568) (x1666 x1568))))
(assert (=> (< (- x1571 1) 10000) (= (x1666 x1571) (x1617 x1571))))
(assert (x29 x1204))
(assert (= (x1617 2061678023) (x1666 2061678023)))
(assert (= 18446744073709551615 (x5 (x1666 18446744073709551615))))
(assert (x1500 x74))
(assert (= (x1617 759532456) (x1666 759532456)))
(assert (= (x251 x1763) (ite (and x868 x800) (x1445 x1763) (x1067 x1763))))
(assert (x29 x1455))
(assert (x29 x958))
(assert (x29 x1760))
(assert (x29 x1342))
(assert (x29 x1433))
(assert (= (x1017 x1397) 0))
(assert (x29 x1794))
(assert (x29 x1070))
(assert (= x516 (and x562 (not x742))))
(assert (= x1112 (=> (and (< x652 911411945) (= x228 (x414 (x1617 274184521717934524641157099916833587206))) (< 0 x228) (= x652 468353030) (<= x1118 1461501637330902918203684832716283019655932542975) (not (< x652 468353030)) (< x652 2293535753) (<= x307 1461501637330902918203684832716283019655932542975) (= x892 (= x1118 274184521717934524641157099916833587218)) (= x486 128)) (and (=> (not x892) x832) (=> (and (= 1889567281 x594) (<= 0 x1084) (>= 1461501637330902918203684832716283019655932542975 x939) (not (< x930 4)) (= x282 (x414 (x1617 274184521717934524641157099916833587218))) (= 36 x930) (= x939 x307) (> x282 0) (= 32 x1653) x892 (= x639 1) (not (= 649617121 x594)) (not (= 826074471 x594)) (not (> 649617121 x594)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x327) (not x1244) (= x1763 (x495 (x1617 x307) (x1666 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1084) (= x610 (x860 (- x930 4))) (= x930 36) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x610) true) (> 32 x610)) (> x610 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x1244) (= x1084 (x1298 x1763))) x1519)))))
(assert (x29 x94))
(assert (x29 x406))
(assert (= (x1195 (- (+ 164 (- x571 160)) 164)) (x1125 (- (+ 164 (- x571 160)) 164))))
(assert (= (ite (= x792 x1278) x686 (x1081 x792)) (x911 x792)))
(assert (= (x5 (x1617 x1418)) x1418))
(assert (= (x5 (x1617 x1659)) x1659))
(assert (= (x1518 x1078) (ite (and x669 x1618 x1198 x419 (not x794) x485) (x1279 x1078) (ite (and x1618 x669 (not x419) x1198 x485) (x1435 x1078) (ite (and x1198 x1618 x485 (not x669)) (x1880 x1078) (ite (and x1198 (not x485) x1618) (x1230 x1078) (x399 x1078)))))))
(assert (= (ite (and x1398 x1137) (x882 x1428) (x1426 x1428)) (x1115 x1428)))
(assert (x29 x478))
(assert (x29 x861))
(assert (x29 x1372))
(assert (=> (> (+ 10000 1) x1236) (= (x1666 x1236) (x1617 x1236))))
(assert (= x1139 (x5 (x1617 x1139))))
(assert (x29 x1903))
(assert (=> (> (+ 10000 1) x812) (= (x1666 x812) (x1617 x812))))
(assert (x29 x1856))
(assert (x1470 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x29 x1810))
(assert (x1500 x1236))
(assert (x29 x1614))
(assert (x1470 x743))
(assert (= (ite (= x507 x1135) x1127 (x337 x507)) (x1003 x507)))
(assert (x29 x335))
(assert (x29 x220))
(assert (= (x5 (x1617 x127)) x127))
(assert (x29 x783))
(assert (x1470 x949))
(assert (= (ite (= x1078 x1586) x922 (x1435 x1078)) (x1279 x1078)))
(assert (x29 x101))
(assert (x29 x1596))
(assert (x29 x109))
(assert (x1500 274184521717934524641157099916833587218))
(assert (x1033 x1206 x729))
(assert (= (ite (= x571 x931) x10 (x911 x571)) (x31 x571)))
(assert (= (ite (and (< (+ x1472 (- x792 x1716)) (+ x1665 164)) (>= (+ (- x792 x1716) x1472) 164)) (x1195 (- (+ (- x792 x1716) x1472) 164)) (x540 (+ (- x792 x1716) x1472))) (x283 (+ (- x792 x1716) x1472))))
(assert (=> (> (+ 10000 1) x295) (= (x1666 x295) (x1617 x295))))
(assert (x29 x1524))
(assert (x29 x1888))
(assert (= (ite (= x1367 x1078) x1370 (x1880 x1078)) (x1435 x1078)))
(assert (x29 x1717))
(assert (x29 x395))
(assert (= (x951 x325) (ite x1858 (ite (and x472 x1833) (x174 x325) (x1067 x325)) (x1067 x325))))
(assert (= (x911 x215) (ite (= x215 x1278) x686 (x1081 x215))))
(assert (x29 x1442))
(assert (x1500 x1371))
(assert (x29 x348))
(assert (x29 x1095))
(assert (=> (> (+ 10000 1) x1691) (= (x1666 x1691) (x1617 x1691))))
(assert (x29 x373))
(assert (x29 x1661))
(assert (= (x31 x777) (ite (= x777 x931) x10 (x911 x777))))
(assert (x1500 x1848))
(assert (x29 x612))
(assert (= (x31 x215) (ite (= x931 x215) x10 (x911 x215))))
(assert (= (x1125 (- (+ 164 (- x215 160)) 164)) (x1195 (- (+ (- x215 160) 164) 164))))
(assert (= x971 (x5 (x1617 x971))))
(assert (= (x1880 x507) (ite (= x507 x935) x1302 (x1230 x507))))
(assert (= x115 true))
(assert (= 0 (x989 x1382)))
(assert (x1470 x1002))
(assert (x29 x1376))
(assert (x29 x1812))
(assert (x29 x1473))
(assert (x29 x890))
(assert (x1500 x267))
(assert (x29 x89))
(assert (= (x1617 2764855426) (x1666 2764855426)))
(assert (x29 x654))
(assert (= (=> (and (not (= x1087 0)) (or (and (= x1415 x1823) (= (x1368 (+ x450 96)) x700) (not x239)) (and x239 (= x1823 96))) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x813 (x1617 274184521717934524641157099916833587206))) x613) (= x1485 (x1068 (x1617 x1828))) x613 (= x234 (x813 (x1617 274184521717934524641157099916833587206))) (= x514 (x1671 x1823)) (= x233 (< 0 x514)) (= (= 0 x932) x239) (or (and (= (= 0 x1234) x579) (> x1234 0) x233 (= (ite x292 1 0) x823) (= (x1368 (+ x1823 32)) x1846) (not (or (> x719 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x719 32) (= true (<= x719 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= (x1212 x1846) x1234) (= x292 (not x579)) (= x1234 x823) (= (x1671 x1823) x719)) (not x233))) x484) x1811))
(assert (x29 x572))
(assert (x29 x125))
(assert (= (x1696 x1078) (ite (= x1078 x1458) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x1078))))
(assert (x1500 x1107))
(assert (= (x1617 2258409472) (x1666 2258409472)))
(assert (x29 x1427))
(assert (= (ite (and x1137 x1398) (x882 x777) (x1426 x777)) (x1115 x777)))
(assert (= x1443 (x5 (x1617 x1443))))
(assert (= (x5 (x1617 x1652)) x1652))
(assert (x1500 x802))
(assert (= (ite (and (not x1369) x1086) (x887 x1338) (x1389 x1338)) (x102 x1338)))
(assert (= (x283 (+ 164 (- x144 160))) (ite (and (< (+ 164 (- x144 160)) (+ x1665 164)) (<= 164 (+ 164 (- x144 160)))) (x1195 (- (+ (- x144 160) 164) 164)) (x540 (+ (- x144 160) 164)))))
(assert (= (x283 (+ x1472 (- x300 x1716))) (ite (and (>= (+ (- x300 x1716) x1472) 164) (< (+ (- x300 x1716) x1472) (+ x1665 164))) (x1195 (- (+ (- x300 x1716) x1472) 164)) (x540 (+ (- x300 x1716) x1472)))))
(assert (= (x1195 (- (+ (- x777 160) 164) 164)) (x1125 (- (+ 164 (- x777 160)) 164))))
(assert (x29 x41))
(assert (= (x5 (x1666 649617121)) 649617121))
(assert (= (ite (= x931 x1852) x10 (x911 x1852)) (x31 x1852)))
(assert (x29 x1203))
(assert (x29 x481))
(assert (x29 x1076))
(assert (= (x5 (x1617 x902)) x902))
(assert (x29 x1695))
(assert (x29 x1464))
(assert (x1566 x998 x1876 x756 x412))
(assert (x29 x536))
(assert (x29 x272))
(assert (x29 x1730))
(assert (= (ite (= x1428 x1515) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x1428)) (x1230 x1428)))
(assert (x29 x1286))
(assert (= x1715 x627))
(assert (= (=> (and (< x1859 2960351575) (= (x495 (x1617 x127) x63 0) x1612) (= x1624 (x414 (x1617 274184521717934524641157099916833587206))) (not (= x1859 2690754053)) (= x63 (x495 (x1617 x1076) (x1666 3) 0)) (not (> 2690754053 x1859)) (= 2743102681 x1859) (>= 1461501637330902918203684832716283019655932542975 x127) (> x1624 0) (= x557 (x495 (x1617 x267) x1612 0)) (not (> 2293535753 x1859)) (>= 1461501637330902918203684832716283019655932542975 x267) (= x23 x755) (<= 0 x755) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x755) (= x755 (x808 x557))) (=> (and (= x23 x1095) x619 (= x1168 274184521717934524641157099916833587214) x302 (= x1292 x467) (= (= x1095 1) x302) (= x137 1) (= x1294 x816) (= x619 (= 274184521717934524641157099916833587214 x816))) x1038)) x1129))
(assert (= x578 (x5 (x1617 x578))))
(assert (= (ite (= x1008 x1135) x1127 (x337 x1008)) (x1003 x1008)))
(assert (x29 x1126))
(assert (= (x283 (+ (- x1401 x1716) x1472)) (ite (and (>= (+ x1472 (- x1401 x1716)) 164) (< (+ (- x1401 x1716) x1472) (+ x1665 164))) (x1195 (- (+ (- x1401 x1716) x1472) 164)) (x540 (+ (- x1401 x1716) x1472)))))
(assert (= (ite (and (>= (+ 164 (- x1078 160)) 164) (> (+ x1665 164) (+ 164 (- x1078 160)))) (x1195 (- (+ 164 (- x1078 160)) 164)) (x540 (+ 164 (- x1078 160)))) (x283 (+ 164 (- x1078 160)))))
(assert (x29 x320))
(assert (=> (> (+ 10000 1) x1695) (= (x1617 x1695) (x1666 x1695))))
(assert (x29 x1745))
(assert (=> (< (- x1642 1) 10000) (= (x1617 x1642) (x1666 x1642))))
(assert (= x1361 (x5 (x1617 x1361))))
(assert (x29 x1782))
(assert (x29 x1275))
(assert (x29 x1241))
(assert (x29 x1140))
(assert (x1470 x641))
(assert (= (x31 x300) (ite (= x931 x300) x10 (x911 x300))))
(assert (=> (< (- x956 1) 10000) (= (x1617 x956) (x1666 x956))))
(assert (= (x688 x777) (ite (and x1618 x1198 (not x895)) (x1518 x777) (x471 x777))))
(assert (= (x1115 x673) (ite (and x1398 x1137) (x882 x673) (x1426 x673))))
(assert (= (x1003 x522) (ite (= x522 x1135) x1127 (x337 x522))))
(assert (x29 x1122))
(assert (x29 x1302))
(assert (x29 x1175))
(assert (= (x882 x184) (ite (= x184 x1008) x220 (x1535 x184))))
(assert (= (x210 x571) (ite (and (not x1215) x738 x1105) (x1093 x571) (x1772 x571))))
(assert (x1500 x299))
(assert (x29 x388))
(assert (x29 x334))
(assert (= (x1195 (- (+ (- x184 x1716) x1472) 164)) (x1125 (- (+ (- x184 x1716) x1472) 164))))
(assert (x29 x1423))
(assert (= (x1435 x571) (ite (= x571 x1367) x1370 (x1880 x571))))
(assert (= (ite (= x1425 x783) x600 (x151 x1425)) (x1829 x1425)))
(assert (x29 x1679))
(assert (x29 x499))
(assert (= (ite (= x184 x783) x600 (x151 x184)) (x1829 x184)))
(assert (= (x1297 x865) (ite (and x1137 x113 (not x584)) (x1389 x865) (x787 x865))))
(assert (x29 x1483))
(assert (x29 x248))
(assert (=> (< (- x1023 1) 10000) (= (x1666 x1023) (x1617 x1023))))
(assert (x1500 x597))
(assert (= (ite (= x931 x1425) x10 (x911 x1425)) (x31 x1425)))
(assert (= (ite (= x1586 x571) x922 (x1435 x571)) (x1279 x571)))
(assert (= (ite (= x931 x1428) x10 (x911 x1428)) (x31 x1428)))
(assert (x29 x1603))
(assert (= x140 (x5 (x1617 x140))))
(assert (= (x5 (x1617 x1023)) x1023))
(assert (= true x497))
(assert (=> (> (+ 10000 1) x91) (= (x1666 x91) (x1617 x91))))
(assert (x29 x1400))
(assert (= (x1115 x420) (ite (and x1398 x1137) (x882 x420) (x1426 x420))))
(assert (x29 x962))
(assert (x52 x513 x1620))
(assert (x1500 x1486))
(assert (= (ite (and x800 x868) (x1441 x777) (x583 x777)) (x531 x777)))
(assert (x1033 x1888 x1466))
(assert (= (x1617 274184521717934524641157099916833587218) (x1666 274184521717934524641157099916833587218)))
(assert (x29 x1361))
(assert (x1500 x917))
(assert (x29 x420))
(assert (=> (> (+ 10000 1) x468) (= (x1617 x468) (x1666 x468))))
(assert (= (x1435 x1428) (ite (= x1428 x1367) x1370 (x1880 x1428))))
(assert (x29 x1472))
(assert (x1033 x424 x1703))
(assert (x29 x1530))
(assert (= (ite (= x1135 x777) x1127 (x337 x777)) (x1003 x777)))
(assert (x29 x432))
(assert (= (=> (and (= x1697 (> x455 0)) (or (not x1697) (and (not (or (and (< x509 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x509))) (> x509 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x1346 (ite x701 1 0)) (= x509 (x1232 x507)) (= x701 (not x645)) (= x24 x1346) (< 0 x24) (= (x1232 x1428) x24) (= (x1368 (+ 32 x507)) x1428) x1697 (= x645 (= x24 0)))) x1662 (= (< (x1844 (x1617 274184521717934524641157099916833587206)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1662) (= x112 (x1713 (x1617 x956))) (= x455 (x1232 x507)) (not (= x501 0)) (= x1295 (x1844 (x1617 274184521717934524641157099916833587206))) (or (and (= x1488 (x1368 (+ x1242 x770))) (not x1196) (= (x366 115792089237316195423570985008687907853269984665640564039457584007913129639904 x998) x1242) (= x1488 x1528) (= x507 x770) (= x649 (x1368 (+ x1461 96))) (= x998 (x1368 (+ x1131 63)))) (and x1196 (= x770 x1528) (= 96 x507))) (= (= x1131 0) x1196)) x866) x1904))
(assert (= (x1617 2514000705) (x1666 2514000705)))
(assert (= x80 (x5 (x1617 x80))))
(assert (x29 x1821))
(assert (= x155 true))
(assert (= x790 (x5 (x1617 x790))))
(assert (= (x5 (x1666 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (ite (and (>= (+ (- x1428 x1716) x1472) 164) (< (+ (- x1428 x1716) x1472) (+ 164 x1665))) (x1195 (- (+ (- x1428 x1716) x1472) 164)) (x540 (+ x1472 (- x1428 x1716)))) (x283 (+ x1472 (- x1428 x1716)))))
(assert (x29 x1303))
(assert (= (x1518 x144) (ite (and (not x794) x669 x485 x1198 x419 x1618) (x1279 x144) (ite (and x1618 (not x419) x485 x669 x1198) (x1435 x144) (ite (and x1618 x485 x1198 (not x669)) (x1880 x144) (ite (and (not x485) x1198 x1618) (x1230 x144) (x399 x144)))))))
(assert (= (+ (x5 x1594) 1) (x5 (x374 x1594 1))))
(assert (x29 x1804))
(assert (= (x1666 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x1617 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x29 x1600))
(assert (= (x724 x505) (ite (= x505 x420) x1621 (x1003 x505))))
(assert (= (x1666 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1617 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (x1195 (- (+ 164 (- x931 160)) 164)) (x1125 (- (+ (- x931 160) 164) 164))))
(assert (x52 x1673 x1268))
(assert (= x142 (x5 (x1617 x142))))
(assert (x29 x1693))
(assert (= (x535 x571) (ite (and x1137 x1073 (not x584)) (x1003 x571) (ite (and (not x259) x1137 (not x1073) x1181 (not x584)) (x724 x571) (ite (and (not x584) (not x1073) (not x1181) x1137) (x1003 x571) (x448 x571))))))
(assert (= (x283 (+ (- x931 x1716) x1472)) (ite (and (> (+ x1665 164) (+ x1472 (- x931 x1716))) (<= 164 (+ (- x931 x1716) x1472))) (x1195 (- (+ x1472 (- x931 x1716)) 164)) (x540 (+ x1472 (- x931 x1716))))))
(assert (x29 x295))
(assert (x29 x1156))
(assert (= (x5 (x1617 x1486)) x1486))
(assert (x29 x202))
(assert (= (and x1099 (not x892)) x562))
(assert (x29 x1415))
(assert (x29 x82))
(assert (x1500 x8))
(assert (x29 x1336))
(assert (= (or (and x240 x442) (and x1720 x1672)) x491))
(assert (x1500 x1316))
(assert (= (x5 (x1617 x47)) x47))
(assert (x29 x979))
(assert (x29 x588))
(assert (= (x5 (x1617 x1782)) x1782))
(assert (x1500 x1227))
(assert (=> (< (- x790 1) 10000) (= (x1617 x790) (x1666 x790))))
(assert (x29 x1432))
(assert (= (x911 x507) (ite (= x1278 x507) x686 (x1081 x507))))
(assert (x1500 x1308))
(assert (x29 x154))
(assert (x29 x1347))
(assert (x29 x1668))
(assert (= x1312 (x5 (x1617 x1312))))
(assert (= (ite (= x1515 x571) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x918 x571)) (x1230 x571)))
(assert (x29 x345))
(assert (= (x1195 (- (+ 164 (- x144 160)) 164)) (x1125 (- (+ (- x144 160) 164) 164))))
(assert (= (x1617 2835717307) (x1666 2835717307)))
(assert (x29 x807))
(assert (= (x1195 (- (+ x1472 (- x1852 x1716)) 164)) (x1125 (- (+ (- x1852 x1716) x1472) 164))))
(assert (= (x5 (x1617 x295)) x295))
(assert (x29 x1572))
(assert (= (x1195 (- (+ x1472 (- x1401 x1716)) 164)) (x1125 (- (+ x1472 (- x1401 x1716)) 164))))
(assert (= (x1115 x300) (ite (and x1398 x1137) (x882 x300) (x1426 x300))))
(assert (=> (< (- x1490 1) 10000) (= (x1617 x1490) (x1666 x1490))))
(assert (x29 x961))
(assert (=> (> (+ 10000 1) x1147) (= (x1617 x1147) (x1666 x1147))))
(assert (x29 x44))
(assert (x29 x596))
(assert (= (x283 (+ 164 (- x1382 160))) (ite (and (<= 164 (+ (- x1382 160) 164)) (> (+ x1665 164) (+ 164 (- x1382 160)))) (x1195 (- (+ 164 (- x1382 160)) 164)) (x540 (+ 164 (- x1382 160))))))
(assert (x29 x1026))
(assert (x29 x983))
(assert (= (x1617 1889567281) (x1666 1889567281)))
(assert (= x20 (=> (and (= x1009 (x366 1461501637330902918203684832716283019655932542975 x339)) (= x1198 (< 0 x220))) (and (=> (not x1198) x1344) (=> (and (= (x1882 x522) x602) (= x1905 (x250 x1008)) (= x1900 (x1368 (+ 36 x320))) (> x220 0) (or (and (not x485) (= 0 x690)) (and (= x669 (< 32 x1374)) (= x522 x505) (= (x1230 x505) x1302) (= x935 x770) (or (and (= x419 (> x1374 64)) x669 (= x1852 (x1368 (+ x320 64))) (= x1370 (x1880 x1852)) (= x1367 (x1368 (+ x1461 96))) (or (and (not x419) (= x690 64)) (and (or (and (= 96 x690) (not x794)) (and (not x1094) (= (x1368 (+ 128 x320)) x792) (= x1810 (x1368 (+ x1461 160))) (= 128 x690) x794 (= (< 128 x1374) x1094) (= (x1279 x792) x1117))) (= (x1368 (+ x1461 128)) x1586) (= x794 (< 96 x1374)) (= x300 (x1368 (+ 96 x320))) (= (x1435 x300) x922) x419))) (and (= 32 x690) (not x669))) x485)) (= x333 (x366 26959946667150639794667015087019630673637144422540572481103610249215 x602)) (= x1483 (x250 x215)) (= (x1368 (+ 160 x1710)) x215) (>= 1461501637330902918203684832716283019655932542975 x956) (= 0 x1781) (= x956 (x283 164)) (= x1461 (x1368 (+ x320 100))) (= x1761 (x860 (- x1826 32))) (= x895 (< x1374 x690)) (= (x860 (- x1461 x320)) x1826) (= (x1368 (+ x1900 96)) x1515) (= (> x1319 0) x1439) x1198 (or (and x895 (= x1362 (x1368 (+ x1374 x770)))) (not x895)) (= x1427 (x1368 (+ x333 76450787359836037641860180984291677749980919077056822294353438043884394381312))) (= (x1230 x320) x1374) (= (x1368 (+ x1900 128)) x770) (= x1405 (x1368 (+ 68 x320))) (= x485 (< 0 x1374)) (= x522 (x1368 (+ 32 x320))) (= x1319 (x414 (x1617 x956))) x1439 (> x1905 0)) x1692)))))
(assert (= x733 (x5 (x1617 x733))))
(assert (= x343 (=> (and (= x240 (= x248 274184521717934524641157099916833587218)) (= x1853 (>= x1178 0)) (= x355 (x1035 (x1617 274184521717934524641157099916833587206))) (= (x1035 (x1617 274184521717934524641157099916833587206)) x1178) (= x1183 x1283) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x132 (x1617 x248))) x1579) x1853 (= (x1035 (x1617 x248)) x432) x1579 x1182 (= x1182 (< x432 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x415 (x132 (x1617 x248)))) (and (=> (and (= 68 x537) (= 1 x945) (= x1208 32) (= x110 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x82) (and (> 64 x82) (= (<= x82 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (<= x884 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x537 4)) (not (> 649617121 x1018)) (= 2835717307 x1018) (= x363 (x495 (x1617 x1307) (x1666 1) 0)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x1592) (not (= 826074471 x1018)) (= x82 (x860 (- x537 4))) (= (x495 (x1617 x1776) (x1666 1) 0) x351) (not x1462) (= x506 x76) (= (x414 (x1617 274184521717934524641157099916833587218)) x1762) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1044 x314)) (= x1776 (x366 1461501637330902918203684832716283019655932542975 x1888)) (< 0 x1762) (not (= x1018 1889567281)) (<= 0 x884) (= x1495 x270) (= x341 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1044) (= (x251 x341) x884) (= x1283 x537) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x241) (not x1508) x240 (= (x1906 x363) x1044) (= x1628 x1888) (= x162 x1044) (= x525 274184521717934524641157099916833587206) (not (= x1018 649617121)) (= x314 x270) (= x1307 (x366 1461501637330902918203684832716283019655932542975 x1888)) (not x110) (= x1462 (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x314 x1044))) (= (< x884 x270) x1508) (= (> x314 x884) x1300) (= (+ x162 x864) x316) (= (x860 (- x884 x270)) x891) (<= x1888 1461501637330902918203684832716283019655932542975) (not (= x1018 2514000705)) (<= 0 x1044) (not x1300) (= x970 274184521717934524641157099916833587206) (= x864 x314)) x411) (=> (not x240) x496)))))
(assert (= (x1125 (- (+ (- x1078 160) 164) 164)) (x1195 (- (+ 164 (- x1078 160)) 164))))
(assert (x29 x1897))
(assert (= (x1115 x144) (ite (and x1398 x1137) (x882 x144) (x1426 x144))))
(assert (x29 x144))
(assert (= (x1617 37714057306076988483118529490347679105585116642029194716945419020321082336612) (x1666 37714057306076988483118529490347679105585116642029194716945419020321082336612)))
(assert (= (x540 132) (x283 132)))
(assert (= (x916 x1434) 0))
(assert (= x1236 (x5 (x1617 x1236))))
(assert (=> (< (- x1676 1) 10000) (= (x1617 x1676) (x1666 x1676))))
(assert (x29 x690))
(assert (x1500 x406))
(assert (= (ite (and (>= (+ x1472 (- x215 x1716)) 164) (< (+ (- x215 x1716) x1472) (+ 164 x1665))) (x1195 (- (+ (- x215 x1716) x1472) 164)) (x540 (+ x1472 (- x215 x1716)))) (x283 (+ (- x215 x1716) x1472))))
(assert (x29 x1711))
(assert (x1500 x1872))
(assert (x1033 x339 x199))
(assert (x29 x1742))
(assert (x29 x1249))
(assert (=> (< (- x660 1) 10000) (= (x1666 x660) (x1617 x660))))
(assert (= (x1195 (- (+ 164 (- x1401 160)) 164)) (x1125 (- (+ (- x1401 160) 164) 164))))
(assert (x29 x405))
(assert (= (x882 x673) (ite (= x1008 x673) x220 (x1535 x673))))
(assert (x29 x1463))
(assert (x29 x1130))
(assert (= (x5 (x1617 x1803)) x1803))
(assert (= (x911 x522) (ite (= x522 x1278) x686 (x1081 x522))))
(assert (x29 x1178))
(assert (= (ite (= x1458 x571) 37714057306076988483118529490347679105585116642029194716945419020321082336612 (x1146 x571)) (x1696 x571)))
(assert (=> (> (+ 10000 1) x768) (= (x1617 x768) (x1666 x768))))
(assert (= (x724 x792) (ite (= x420 x792) x1621 (x1003 x792))))
(assert (x29 x1598))
(assert (x29 x678))
(assert (x29 x433))
(assert (x29 x1231))
(assert (x29 x1337))
(assert (x29 x681))
(assert (x29 x719))
(assert (= (x283 (+ 164 (- x1852 160))) (ite (and (> (+ x1665 164) (+ (- x1852 160) 164)) (<= 164 (+ 164 (- x1852 160)))) (x1195 (- (+ 164 (- x1852 160)) 164)) (x540 (+ 164 (- x1852 160))))))
(assert (=> (> (+ 10000 1) x1243) (= (x1617 x1243) (x1666 x1243))))
(assert (x29 x1642))
(assert (x29 x1452))
(assert (x29 x1371))
(assert (x1500 x750))
(assert (x29 x1486))
(assert (x29 x1107))
(assert (x29 x1327))
(assert (= (=> (and (= x307 x559) (= x1118 x1294)) x1112) x1344))
(assert (=> (> (+ 10000 1) x517) (= (x1666 x517) (x1617 x517))))
(assert (x29 x1722))
(assert (x29 x328))
(assert (=> (> (+ 10000 1) x37) (= (x1666 x37) (x1617 x37))))
(assert (=> (< (- x96 1) 10000) (= (x1617 x96) (x1666 x96))))
(assert (x1470 x1903))
(assert (x29 x1845))
(assert (=> (> (+ 10000 1) x127) (= (x1617 x127) (x1666 x127))))
(assert (x29 x6))
(assert (= (x5 (x1617 x8)) x8))
(assert (= (x882 x215) (ite (= x215 x1008) x220 (x1535 x215))))
(assert (= (ite (and (> (+ 164 x1665) (+ (- x420 160) 164)) (<= 164 (+ 164 (- x420 160)))) (x1195 (- (+ 164 (- x420 160)) 164)) (x540 (+ (- x420 160) 164))) (x283 (+ (- x420 160) 164))))
(assert (x29 x200))
(assert (x29 x146))
(assert (x1500 x252))
(assert (x29 x1045))
(assert (x1500 x635))
(assert (= x660 (x5 (x1617 x660))))
(assert (x29 x1836))
(assert (x29 x1316))
(assert (x29 x1580))
(assert (x29 x726))
(assert (= (ite (= x1008 x1586) x922 (x1435 x1008)) (x1279 x1008)))
(assert (=> (< (- x958 1) 10000) (= (x1666 x958) (x1617 x958))))
(assert (x29 x639))
(assert (= (ite (and (not x584) x1137 x1073) (x1003 x144) (ite (and (not x584) x1137 (not x1073) x1181 (not x259)) (x724 x144) (ite (and x1137 (not x584) (not x1073) (not x1181)) (x1003 x144) (x448 x144)))) (x535 x144)))
(assert (x29 x805))
(assert (x29 x1397))
(assert (x29 x1044))
(assert (x29 x981))
(assert (x29 x755))
(assert (= (=> (= (= 274184521717934524641157099916833587214 x956) x551) (and (=> (and (>= x1730 0) (= x501 1) (= x1750 (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x287 x830))) (= x160 2835717307) (not x1057) (= x830 x1077) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1730) (= 32 x1131) (= (x860 (- x1130 4)) x684) (= x78 274184521717934524641157099916833587206) (= x2 274184521717934524641157099916833587206) (not x504) (= x287 (x263 x1767)) (not (= 2514000705 x160)) (>= x287 0) (= x287 x1737) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287) (= x369 (x414 (x1617 274184521717934524641157099916833587214))) x551 (= x424 x1628) (= x103 (x366 1461501637330902918203684832716283019655932542975 x424)) (>= 1461501637330902918203684832716283019655932542975 x424) (= x1057 (or (and (= (<= x684 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x684 64)) (> x684 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 826074471 x160)) (= x1130 68) (= x1818 (x860 (- x1730 x914))) (not (> 649617121 x160)) (not (= x160 1889567281)) (not (> 4 x1130)) (= x313 (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0)) (not (= x160 649617121)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x1533) (= (+ x1077 x1737) x1908) (= x685 x1433) (= x1130 x328) (= (x495 (x1617 x103) (x1666 1) 0) x1682) (= (x495 (x1617 274184521717934524641157099916833587206) (x1666 1) 0) x1587) (= x395 (x366 1461501637330902918203684832716283019655932542975 x424)) (= (x61 x1587) x1730) (not x1750) (= x732 (> x830 x1730)) (not x732) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x287 x830)) (= x914 x1483) (< 0 x369) (= x504 (> x914 x1730)) (= (x495 (x1617 x395) (x1666 1) 0) x1767) (= x830 x914)) x1904) (=> (not x551) x1052))) x608))
(assert (= 0 (x989 x1852)))
(assert (x29 x1118))
(assert (= (ite (and x240 x442) (x1719 x1425) (x696 x1425)) (x1210 x1425)))
(assert (x29 x1034))
(assert (= (or (and x562 x742) (and x892 x1099)) x1647))
(assert (= (ite (= x1367 x300) x1370 (x1880 x300)) (x1435 x300)))
(assert (= 0 (x916 x765)))
(assert (x1033 x65 x383))
(assert (x29 x1677))
(assert (= (ite (= x1008 x1078) x220 (x1535 x1078)) (x882 x1078)))
(assert (= 274184521717934524641157099916833587218 (x5 (x1617 274184521717934524641157099916833587218))))
(assert (x29 x91))
(assert (= (x1195 (- (+ x1472 (- x522 x1716)) 164)) (x1125 (- (+ (- x522 x1716) x1472) 164))))
(assert (= (x1554 x673) (ite (= x1051 x673) x1276 (x1829 x673))))
(assert (= (x1003 x1493) (ite (= x1135 x1493) x1127 (x337 x1493))))
(assert (x1500 x1691))
(assert (x29 x1167))
(assert (= (ite (= x1135 x931) x1127 (x337 x931)) (x1003 x931)))
(assert (x1500 x1819))
(assert (= (ite (and (not x895) x1618 x1198) (x1518 x184) (x471 x184)) (x688 x184)))
(assert (= (x916 x1310) 0))
(assert (= (ite (and (<= 164 (+ (- x1401 160) 164)) (> (+ x1665 164) (+ 164 (- x1401 160)))) (x1195 (- (+ (- x1401 160) 164) 164)) (x540 (+ 164 (- x1401 160)))) (x283 (+ 164 (- x1401 160)))))
(assert (x29 x1330))
(assert (x29 x80))
(assert (x1033 x1735 x1471))
(assert (x1500 x958))
(assert (x29 x1387))
(assert (x29 x725))
(assert (=> (> (+ 10000 1) x1151) (= (x1666 x1151) (x1617 x1151))))
(assert (x29 x340))
(assert (= 0 (x916 x570)))
(assert (x29 x1221))
(assert (= (x5 (x1666 37714057306076988483118529490347679105585116642029194716945419020321082336612)) 37714057306076988483118529490347679105585116642029194716945419020321082336612))
(assert (x1500 x1270))
(assert (x29 x122))
(assert (= (x5 (x1617 x635)) x635))
(assert (= (ite (and x1398 x1137) (x882 x184) (x1426 x184)) (x1115 x184)))
(assert (= (x1378 x357) (ite x1858 (ite (and x1833 x472) (x61 x357) (x633 x357)) (x61 x357))))
(assert (= x1589 (and (not x1672) x1720)))
(assert (= x1801 x104))
(assert (=> (> (+ 10000 1) x190) (= (x1617 x190) (x1666 x190))))
(assert (x29 x1873))
(assert (= (ite (and (not x584) x1073 x1137) (x1003 x507) (ite (and (not x1073) (not x259) x1181 (not x584) x1137) (x724 x507) (ite (and (not x1073) (not x584) x1137 (not x1181)) (x1003 x507) (x448 x507)))) (x535 x507)))
(assert (x29 x816))
(assert (x29 x466))
(assert (x29 x482))
(assert (= (x5 (x1666 274184521717934524641157099916833587218)) 274184521717934524641157099916833587218))
(assert (x29 x1822))
(assert (= x991 (and (not x1739) x1715)))
(assert (= (x1195 (- (+ x1472 (- x673 x1716)) 164)) (x1125 (- (+ (- x673 x1716) x1472) 164))))
(assert (x29 x914))
(assert (= 26959946667150639794667015087019630673637144422540572481103610249215 (x5 (x1666 26959946667150639794667015087019630673637144422540572481103610249215))))
(assert (x29 x54))
(assert (x1470 x603))
(assert (x29 x76))
(assert (x29 x931))
(assert (x1470 x434))
(assert (= (x1666 826074471) (x1617 826074471)))
(assert (x29 x273))
(assert (x29 x648))
(assert (x29 x424))
(assert (x1500 x1277))
(assert (x29 x1889))
(assert (x29 x71))
(assert (= (and x1105 x738) x442))
(assert (x29 x1855))
(assert (x29 x593))
(assert (= (ite (= x931 x522) x10 (x911 x522)) (x31 x522)))
(assert (= (x1195 32) (x1125 32)))
(assert (= (x688 x1428) (ite (and x1618 x1198 (not x895)) (x1518 x1428) (x471 x1428))))
(assert (x29 x404))
(assert (x1881 x1218 x195))
(assert (x29 x1131))
(check-sat)
