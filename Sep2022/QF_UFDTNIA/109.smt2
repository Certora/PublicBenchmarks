(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_UFDTNIA)
(declare-datatypes ((x1133 0)) (((x1908 (x1696 x1133) (x1377 Int)) (x1543 (x669 Int)) (x973 (x951 x1133) (x1479 x1133) (x1138 Int)))))
(declare-fun x1362 () Int)
(declare-fun x469 () Bool)
(declare-fun x6 () Bool)
(declare-fun x210 () Int)
(declare-fun x555 () Bool)
(declare-fun x1576 () Bool)
(declare-fun x1891 () Int)
(declare-fun x30 (Int) Int)
(declare-fun x730 () Bool)
(declare-fun x184 () Bool)
(declare-fun x1770 (Int) Int)
(declare-fun x1595 () Int)
(declare-fun x113 () Int)
(declare-fun x64 () Int)
(declare-fun x1613 () Bool)
(declare-fun x1201 () Int)
(declare-fun x677 () Int)
(declare-fun x879 () Bool)
(declare-fun x1742 (Int) Int)
(declare-fun x474 () Bool)
(declare-fun x182 (Int) Int)
(declare-fun x881 () Bool)
(declare-fun x1837 () Int)
(declare-fun x871 () Bool)
(declare-fun x392 () Int)
(declare-fun x240 () Int)
(declare-fun x1426 () Int)
(declare-fun x58 () Int)
(declare-fun x1849 (Int) Int)
(declare-fun x1142 () Int)
(declare-fun x41 () Bool)
(declare-fun x417 () Bool)
(declare-fun x1562 (Int) Int)
(declare-fun x1521 () Int)
(declare-fun x217 () Int)
(declare-fun x1796 () Bool)
(declare-fun x206 () Bool)
(declare-fun x1779 () Bool)
(declare-fun x349 () Bool)
(declare-fun x201 () Int)
(declare-fun x71 () Int)
(declare-fun x202 () Int)
(declare-fun x20 () Bool)
(declare-fun x495 () Int)
(declare-fun x1510 () Bool)
(declare-fun x311 () Int)
(declare-fun x1713 () Int)
(declare-fun x313 () Bool)
(declare-fun x416 () Int)
(declare-fun x343 () Int)
(declare-fun x359 () Int)
(declare-fun x1523 () Int)
(declare-fun x1175 () Bool)
(declare-fun x1347 () Bool)
(declare-fun x849 () Bool)
(declare-fun x1852 () Int)
(declare-fun x524 () Bool)
(declare-fun x579 () x1133)
(declare-fun x1845 () Bool)
(declare-fun x643 () Bool)
(declare-fun x1190 () Bool)
(declare-fun x1875 () Bool)
(declare-fun x212 () Int)
(declare-fun x607 () Int)
(declare-fun x150 () Int)
(declare-fun x666 () Bool)
(declare-fun x40 () Bool)
(declare-fun x1705 () Bool)
(declare-fun x975 () Int)
(declare-fun x1022 () Bool)
(declare-fun x1048 () Int)
(declare-fun x1799 (Int Int) Int)
(declare-fun x1895 () Int)
(declare-fun x934 () Int)
(declare-fun x1901 () Int)
(declare-fun x1897 () Int)
(declare-fun x106 () Int)
(declare-fun x173 () Int)
(declare-fun x916 () Bool)
(declare-fun x135 () Int)
(declare-fun x1379 () Int)
(declare-fun x231 () Bool)
(declare-fun x186 () Bool)
(declare-fun x1463 () Int)
(declare-fun x465 () Int)
(declare-fun x360 () Bool)
(declare-fun x322 () Bool)
(declare-fun x67 () Int)
(declare-fun x1596 (Int) Int)
(declare-fun x1821 () Bool)
(declare-fun x647 () Int)
(declare-fun x424 () Bool)
(declare-fun x1520 () Bool)
(declare-fun x1602 () Int)
(declare-fun x1519 () Bool)
(declare-fun x572 () Bool)
(declare-fun x1847 () x1133)
(declare-fun x275 () Int)
(declare-fun x1863 () Int)
(declare-fun x1110 () Bool)
(declare-fun x157 () Int)
(declare-fun x1622 () Int)
(declare-fun x883 () Bool)
(declare-fun x28 () Int)
(declare-fun x1635 () Int)
(declare-fun x1643 () Int)
(declare-fun x1912 () Bool)
(declare-fun x1149 () Bool)
(declare-fun x1870 () Bool)
(declare-fun x1892 () Bool)
(declare-fun x1537 () Bool)
(declare-fun x155 () Int)
(declare-fun x1276 () Bool)
(declare-fun x1594 () Bool)
(declare-fun x1677 () Bool)
(declare-fun x638 () Int)
(declare-fun x1570 () Int)
(declare-fun x910 () Int)
(declare-fun x1268 () Int)
(declare-fun x1270 () Bool)
(declare-fun x456 () Int)
(declare-fun x790 () Int)
(declare-fun x1277 () Bool)
(declare-fun x692 () Bool)
(declare-fun x119 () Int)
(declare-fun x1370 () Bool)
(declare-fun x1551 () Bool)
(declare-fun x1489 () Int)
(declare-fun x251 () Int)
(declare-fun x420 () Int)
(declare-fun x1639 () Int)
(declare-fun x672 () Bool)
(declare-fun x1460 () Bool)
(declare-fun x1329 () Int)
(declare-fun x1290 (Int) Int)
(declare-fun x598 (Int) Int)
(declare-fun x1234 () x1133)
(declare-fun x1606 (Int) Int)
(declare-fun x758 () Int)
(declare-fun x826 () Bool)
(declare-fun x1342 () Int)
(declare-fun x280 () x1133)
(declare-fun x1376 () Int)
(declare-fun x1364 () Bool)
(declare-fun x18 () Int)
(declare-fun x1769 () Int)
(declare-fun x1107 () Int)
(declare-fun x810 () Int)
(declare-fun x148 () Int)
(declare-fun x558 () Bool)
(declare-fun x546 () Int)
(declare-fun x1567 () x1133)
(declare-fun x1568 () Bool)
(declare-fun x566 () Bool)
(declare-fun x274 () Int)
(declare-fun x1288 () Int)
(declare-fun x252 () Int)
(declare-fun x1692 () Int)
(declare-fun x86 () Bool)
(declare-fun x111 () Bool)
(declare-fun x604 () Int)
(declare-fun x1483 () Int)
(declare-fun x1375 () Int)
(declare-fun x1593 () Int)
(declare-fun x1457 () Int)
(declare-fun x525 () Int)
(declare-fun x1406 () Int)
(declare-fun x1762 () Int)
(declare-fun x260 (Int) Int)
(declare-fun x1035 () Bool)
(declare-fun x633 () Int)
(declare-fun x1034 () Int)
(declare-fun x1240 () Int)
(declare-fun x745 () Int)
(declare-fun x531 (x1133) Int)
(declare-fun x1060 () Bool)
(declare-fun x782 () Int)
(declare-fun x1642 () Bool)
(declare-fun x100 () Int)
(declare-fun x889 (Int) Int)
(declare-fun x992 () Int)
(declare-fun x1701 () Int)
(declare-fun x1475 () Int)
(declare-fun x1614 () x1133)
(declare-fun x748 () Int)
(declare-fun x1572 () Bool)
(declare-fun x629 () Int)
(declare-fun x997 () Bool)
(declare-fun x1646 () Bool)
(declare-fun x1085 () Int)
(declare-fun x282 (Int) Int)
(declare-fun x1219 (Int) Int)
(declare-fun x1503 () Int)
(declare-fun x891 () Bool)
(declare-fun x327 () Int)
(declare-fun x1658 (x1133) Int)
(declare-fun x87 () Bool)
(declare-fun x1433 () Bool)
(declare-fun x1861 () Bool)
(declare-fun x1025 () Int)
(declare-fun x1886 () Bool)
(declare-fun x294 () Int)
(declare-fun x1469 (Int) Int)
(declare-fun x426 () Bool)
(declare-fun x1215 () Int)
(declare-fun x1778 () Bool)
(declare-fun x875 (x1133) Int)
(declare-fun x752 () Int)
(declare-fun x573 () Int)
(declare-fun x1698 () Bool)
(declare-fun x1752 () Int)
(declare-fun x1123 () Bool)
(declare-fun x236 () Int)
(declare-fun x1727 () Bool)
(declare-fun x545 () Int)
(declare-fun x843 () Int)
(declare-fun x1512 () Int)
(declare-fun x1348 () Int)
(declare-fun x1702 () Bool)
(declare-fun x373 () Int)
(declare-fun x402 () Bool)
(declare-fun x74 () Bool)
(declare-fun x151 () Bool)
(declare-fun x1502 () Int)
(declare-fun x1414 () Bool)
(declare-fun x1458 () Int)
(declare-fun x406 () Int)
(declare-fun x334 () Bool)
(declare-fun x179 () Int)
(declare-fun x1616 () Bool)
(declare-fun x1896 () Bool)
(declare-fun x543 (Int) Int)
(declare-fun x208 () Int)
(declare-fun x613 () Bool)
(declare-fun x1043 () Int)
(declare-fun x55 () Int)
(declare-fun x1578 () Int)
(declare-fun x1868 () Bool)
(declare-fun x1307 () Int)
(declare-fun x927 () Bool)
(declare-fun x1196 () Bool)
(declare-fun x877 () Bool)
(declare-fun x837 () Int)
(declare-fun x1657 () Int)
(declare-fun x1684 () Bool)
(declare-fun x917 () Int)
(declare-fun x1106 () Int)
(declare-fun x652 () Bool)
(declare-fun x1169 () Int)
(declare-fun x354 () Bool)
(declare-fun x36 () Int)
(declare-fun x787 () Int)
(declare-fun x1247 () Int)
(declare-fun x1902 () Bool)
(declare-fun x534 (Int) Int)
(declare-fun x1559 () Bool)
(declare-fun x1344 () Bool)
(declare-fun x1112 () Int)
(declare-fun x205 () Int)
(declare-fun x1407 () Bool)
(declare-fun x1669 () Int)
(declare-fun x586 () Int)
(declare-fun x905 () x1133)
(declare-fun x990 () Int)
(declare-fun x1139 () Bool)
(declare-fun x1120 () Int)
(declare-fun x1062 () Int)
(declare-fun x1298 () Bool)
(declare-fun x353 () Int)
(declare-fun x1451 () Bool)
(declare-fun x865 () Int)
(declare-fun x325 () Bool)
(declare-fun x1581 () Bool)
(declare-fun x1431 () Bool)
(declare-fun x1393 () x1133)
(declare-fun x890 () Int)
(declare-fun x1557 () Bool)
(declare-fun x1012 () Int)
(declare-fun x211 () Bool)
(declare-fun x176 () Bool)
(declare-fun x477 () Int)
(declare-fun x1197 () Bool)
(declare-fun x1641 () Bool)
(declare-fun x342 () Bool)
(declare-fun x1772 () Int)
(declare-fun x1134 () Bool)
(declare-fun x1767 () Int)
(declare-fun x1254 () Int)
(declare-fun x1046 () Int)
(declare-fun x1245 () Int)
(declare-fun x632 () Int)
(declare-fun x590 () Bool)
(declare-fun x765 () Int)
(declare-fun x729 () Bool)
(declare-fun x1827 () Int)
(declare-fun x936 () Int)
(declare-fun x517 () Bool)
(declare-fun x348 () Int)
(declare-fun x361 () Bool)
(declare-fun x1030 () Bool)
(declare-fun x1321 () Int)
(declare-fun x216 () Int)
(declare-fun x102 () Bool)
(declare-fun x1671 () Bool)
(declare-fun x1879 () Int)
(declare-fun x1518 () Bool)
(declare-fun x728 () Int)
(declare-fun x443 () Int)
(declare-fun x1304 () Bool)
(declare-fun x376 () x1133)
(declare-fun x1536 () Int)
(declare-fun x1419 () Int)
(declare-fun x429 () Bool)
(declare-fun x660 () Bool)
(declare-fun x738 () Bool)
(declare-fun x1781 () Int)
(declare-fun x1495 () Bool)
(declare-fun x1244 () Int)
(declare-fun x78 () Int)
(declare-fun x1020 () Int)
(declare-fun x1292 () Int)
(declare-fun x479 () Int)
(declare-fun x145 () Bool)
(declare-fun x764 () Bool)
(declare-fun x204 () Int)
(declare-fun x380 () Int)
(declare-fun x415 () Int)
(declare-fun x774 () x1133)
(declare-fun x648 (Int) Int)
(declare-fun x1164 () Int)
(declare-fun x475 () Int)
(declare-fun x906 () Int)
(declare-fun x656 () Int)
(declare-fun x1880 () Bool)
(declare-fun x47 () Int)
(declare-fun x855 () Int)
(declare-fun x1205 () Int)
(declare-fun x1282 () Int)
(declare-fun x663 () Bool)
(declare-fun x60 () Int)
(declare-fun x1204 () Bool)
(declare-fun x1080 () Int)
(declare-fun x1408 () Bool)
(declare-fun x137 () Bool)
(declare-fun x588 () Int)
(declare-fun x221 (Int) Int)
(declare-fun x703 () Bool)
(declare-fun x1481 () Bool)
(declare-fun x1851 () Int)
(declare-fun x1 () Int)
(declare-fun x409 () Bool)
(declare-fun x391 () Int)
(declare-fun x256 () Int)
(declare-fun x1351 () Bool)
(declare-fun x1506 () Bool)
(declare-fun x842 () Bool)
(declare-fun x1274 () Int)
(declare-fun x229 () Bool)
(declare-fun x1029 () Bool)
(declare-fun x431 () Int)
(declare-fun x1749 () Bool)
(declare-fun x94 () Bool)
(declare-fun x318 (Int) Int)
(declare-fun x1372 () Int)
(declare-fun x767 () Bool)
(declare-fun x811 (Int) Int)
(declare-fun x788 () Bool)
(declare-fun x1526 () Bool)
(declare-fun x388 () Bool)
(declare-fun x1848 () Int)
(declare-fun x296 (Int) Int)
(declare-fun x1296 () Int)
(declare-fun x852 () Int)
(declare-fun x919 () Bool)
(declare-fun x616 () Bool)
(declare-fun x13 () Bool)
(declare-fun x1070 () Bool)
(declare-fun x1865 () Int)
(declare-fun x667 () Int)
(declare-fun x1026 () Int)
(declare-fun x105 () Int)
(declare-fun x1522 () Int)
(declare-fun x794 () Bool)
(declare-fun x967 () Bool)
(declare-fun x90 () Int)
(declare-fun x644 (Int) Int)
(declare-fun x1663 () Bool)
(declare-fun x995 () Bool)
(declare-fun x1775 () x1133)
(declare-fun x625 () Bool)
(declare-fun x1765 () Int)
(declare-fun x50 () Int)
(declare-fun x627 () Bool)
(declare-fun x61 () Bool)
(declare-fun x702 () Bool)
(declare-fun x1124 () Int)
(declare-fun x362 (x1133) Int)
(declare-fun x1722 (Int) Int)
(declare-fun x736 () Bool)
(declare-fun x306 (Int) Int)
(declare-fun x407 () Bool)
(declare-fun x866 () Bool)
(declare-fun x622 () Int)
(declare-fun x1066 () Bool)
(declare-fun x630 () Bool)
(declare-fun x1278 () Int)
(declare-fun x1850 () Int)
(declare-fun x269 () x1133)
(declare-fun x1575 (Int) Int)
(declare-fun x1285 () Bool)
(declare-fun x432 () Int)
(declare-fun x413 () Bool)
(declare-fun x818 () Int)
(declare-fun x1791 () Bool)
(declare-fun x1905 () Bool)
(declare-fun x56 () Int)
(declare-fun x854 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x611 (Int) Int)
(declare-fun x1734 () Bool)
(declare-fun x351 () Int)
(declare-fun x1754 () Int)
(declare-fun x580 () Int)
(declare-fun x192 () Bool)
(declare-fun x1357 () Bool)
(declare-fun x918 () x1133)
(declare-fun x1388 () Int)
(declare-fun x1350 () Int)
(declare-fun x1640 () Int)
(declare-fun x225 () Bool)
(declare-fun x1267 () Int)
(declare-fun x1598 () Int)
(declare-fun x1736 () Int)
(declare-fun x1049 () Int)
(declare-fun x775 () Bool)
(declare-fun x1840 () Int)
(declare-fun x161 () Bool)
(declare-fun x1410 (Int) Int)
(declare-fun x1387 () Int)
(declare-fun x1444 () Int)
(declare-fun x564 () Bool)
(declare-fun x926 () Bool)
(declare-fun x288 () Bool)
(declare-fun x1876 () Bool)
(declare-fun x983 () Bool)
(declare-fun x1391 () Int)
(declare-fun x466 (Int) Int)
(declare-fun x1644 () Int)
(declare-fun x1605 () Int)
(declare-fun x419 () Bool)
(declare-fun x863 () Int)
(declare-fun x1065 () x1133)
(declare-fun x183 () Bool)
(declare-fun x1542 () Bool)
(declare-fun x1367 () Bool)
(declare-fun x623 () Int)
(declare-fun x715 () Bool)
(declare-fun x1756 () Bool)
(declare-fun x213 () Int)
(declare-fun x1620 (Int) Int)
(declare-fun x214 () Int)
(declare-fun x1873 () Bool)
(declare-fun x35 () Bool)
(declare-fun x381 () Int)
(declare-fun x697 () Int)
(declare-fun x717 (Int) Int)
(declare-fun x304 () Bool)
(declare-fun x969 () Int)
(declare-fun x1436 () Bool)
(declare-fun x1683 (Int) Int)
(declare-fun x762 () Int)
(declare-fun x1793 (Int) Int)
(declare-fun x845 () Int)
(declare-fun x1074 () Int)
(declare-fun x620 () Bool)
(declare-fun x1667 () Int)
(declare-fun x328 () Int)
(declare-fun x1454 () Int)
(declare-fun x1405 () Bool)
(declare-fun x1486 () Int)
(declare-fun x991 (Int) Int)
(declare-fun x501 () Int)
(declare-fun x1435 () Int)
(declare-fun x1057 () Bool)
(declare-fun x721 (Int) x1133)
(declare-fun x368 () Bool)
(declare-fun x1826 () Int)
(declare-fun x1766 () Int)
(declare-fun x460 () Int)
(declare-fun x694 () x1133)
(declare-fun x215 () x1133)
(declare-fun x734 () x1133)
(declare-fun x569 () Int)
(declare-fun x1158 () Bool)
(declare-fun x673 () Bool)
(declare-fun x1746 () Bool)
(declare-fun x901 () Int)
(declare-fun x1346 () Bool)
(declare-fun x1088 () Int)
(declare-fun x1917 () Bool)
(declare-fun x1090 (Int) Int)
(declare-fun x797 () Int)
(declare-fun x757 () Bool)
(declare-fun x1442 () Int)
(declare-fun x1269 () Int)
(declare-fun x1355 () Int)
(declare-fun x1628 () Bool)
(declare-fun x1294 () Int)
(declare-fun x1461 () Int)
(declare-fun x476 () Int)
(declare-fun x1079 () Bool)
(declare-fun x103 () Int)
(declare-fun x1339 () Int)
(declare-fun x117 () Bool)
(declare-fun x725 () Int)
(declare-fun x1854 () Int)
(declare-fun x688 (Int) Int)
(declare-fun x1203 () Bool)
(declare-fun x946 () Bool)
(declare-fun x239 () Bool)
(declare-fun x423 () Int)
(declare-fun x1440 () Int)
(declare-fun x1199 () Bool)
(declare-fun x742 () x1133)
(declare-fun x929 () x1133)
(declare-fun x1018 () Bool)
(declare-fun x1609 () Bool)
(declare-fun x233 () Bool)
(declare-fun x497 () Bool)
(declare-fun x654 () Bool)
(declare-fun x751 () Bool)
(declare-fun x1098 () Int)
(declare-fun x1648 () Bool)
(declare-fun x1333 () Int)
(declare-fun x780 () Bool)
(declare-fun x17 () Bool)
(declare-fun x612 () Int)
(declare-fun x1680 () Int)
(declare-fun x1305 () Int)
(declare-fun x741 () Bool)
(declare-fun x1399 () Bool)
(declare-fun x1040 () Bool)
(declare-fun x1028 () Bool)
(declare-fun x958 () Bool)
(declare-fun x755 () Bool)
(declare-fun x1869 () Bool)
(declare-fun x457 () Int)
(declare-fun x1561 () Bool)
(declare-fun x128 () Int)
(declare-fun x1152 (Int) Int)
(declare-fun x449 () Int)
(declare-fun x1795 () Int)
(declare-fun x1315 () Bool)
(declare-fun x1828 () Int)
(declare-fun x635 () Int)
(declare-fun x706 () x1133)
(declare-fun x454 () x1133)
(declare-fun x928 () Int)
(declare-fun x483 (Int) Int)
(declare-fun x346 () Bool)
(declare-fun x1212 () Bool)
(declare-fun x1308 () Int)
(declare-fun x1653 () Bool)
(declare-fun x1748 () Int)
(declare-fun x713 () Bool)
(declare-fun x1672 () Bool)
(declare-fun x556 () Int)
(declare-fun x1014 () Bool)
(declare-fun x1674 () Bool)
(declare-fun x931 () Int)
(declare-fun x393 () Int)
(declare-fun x1214 () Int)
(declare-fun x712 () Int)
(declare-fun x817 (Int Int) Int)
(declare-fun x873 () Int)
(declare-fun x1577 () Bool)
(declare-fun x1883 () Int)
(declare-fun x988 () Int)
(declare-fun x1202 () Bool)
(declare-fun x1878 () Int)
(declare-fun x1395 () Int)
(declare-fun x389 () Int)
(declare-fun x1866 () Int)
(declare-fun x499 () Int)
(declare-fun x355 () Int)
(declare-fun x1462 (Int) Int)
(declare-fun x263 () Bool)
(declare-fun x1697 () Int)
(declare-fun x857 () Bool)
(declare-fun x1428 () Bool)
(declare-fun x34 () Bool)
(declare-fun x1180 () Bool)
(declare-fun x707 (Int) Int)
(declare-fun x337 () Int)
(declare-fun x605 () Int)
(declare-fun x165 () Int)
(declare-fun x490 () Bool)
(declare-fun x72 () x1133)
(declare-fun x608 () Int)
(declare-fun x1714 () Bool)
(declare-fun x1220 () Bool)
(declare-fun x108 () Int)
(declare-fun x615 () x1133)
(declare-fun x1309 () Bool)
(declare-fun x79 () Int)
(declare-fun x1167 () Bool)
(declare-fun x1825 () Int)
(declare-fun x662 () Bool)
(declare-fun x1763 () Bool)
(declare-fun x904 () Bool)
(declare-fun x1694 () Bool)
(declare-fun x724 () Bool)
(declare-fun x434 () Int)
(declare-fun x235 () Bool)
(declare-fun x1607 () Bool)
(declare-fun x1423 () Int)
(declare-fun x1010 () Int)
(declare-fun x286 () Int)
(declare-fun x31 () Bool)
(declare-fun x222 () Bool)
(declare-fun x1232 () Bool)
(declare-fun x769 () Bool)
(declare-fun x1647 () Int)
(declare-fun x455 () Bool)
(declare-fun x1072 () Int)
(declare-fun x491 () Int)
(declare-fun x614 () Bool)
(declare-fun x504 () Int)
(declare-fun x246 () Bool)
(declare-fun x293 () Bool)
(declare-fun x169 () Bool)
(declare-fun x194 () Int)
(declare-fun x981 () Int)
(declare-fun x856 () Int)
(declare-fun x1011 () Bool)
(declare-fun x1582 () Int)
(declare-fun x1504 () Bool)
(declare-fun x911 () Bool)
(declare-fun x53 () Bool)
(declare-fun x1783 () x1133)
(declare-fun x583 () Bool)
(declare-fun x841 () Int)
(declare-fun x1312 () Bool)
(declare-fun x1517 () Int)
(declare-fun x690 () Bool)
(declare-fun x1918 () Bool)
(declare-fun x1143 (Int) Int)
(declare-fun x903 () Bool)
(declare-fun x1472 () Bool)
(declare-fun x266 () Int)
(declare-fun x1437 () Bool)
(declare-fun x63 (x1133) Int)
(declare-fun x1250 () Int)
(declare-fun x160 () Int)
(declare-fun x657 () Bool)
(declare-fun x1890 () Bool)
(declare-fun x803 () Bool)
(declare-fun x1820 () Int)
(declare-fun x754 () Bool)
(declare-fun x957 () Bool)
(declare-fun x1187 () Bool)
(declare-fun x884 () Int)
(declare-fun x923 () Int)
(declare-fun x387 () Int)
(declare-fun x511 () Bool)
(declare-fun x1224 () Bool)
(declare-fun x1326 () Int)
(declare-fun x1287 () Int)
(declare-fun x655 () Int)
(declare-fun x227 () Bool)
(declare-fun x1242 () Bool)
(declare-fun x777 () Int)
(declare-fun x1155 () Int)
(declare-fun x1148 () Int)
(declare-fun x609 () Int)
(declare-fun x960 () Bool)
(declare-fun x933 () Int)
(declare-fun x1218 () Bool)
(declare-fun x1488 () Int)
(declare-fun x1558 () Int)
(declare-fun x1184 () Int)
(declare-fun x1764 () Bool)
(declare-fun x1293 () Int)
(declare-fun x1121 () Bool)
(declare-fun x1191 () Int)
(declare-fun x1303 () Int)
(declare-fun x1446 (Int) Int)
(declare-fun x940 (Int) Int)
(declare-fun x908 () Int)
(declare-fun x1709 () Int)
(declare-fun x5 () Int)
(declare-fun x1398 () Int)
(declare-fun x1753 () Int)
(declare-fun x341 () Bool)
(declare-fun x823 () Bool)
(declare-fun x1181 () Bool)
(declare-fun x428 () Int)
(declare-fun x1068 () Bool)
(declare-fun x1163 () Int)
(declare-fun x1295 () Bool)
(declare-fun x535 () Int)
(declare-fun x1723 () Int)
(declare-fun x1069 () Bool)
(declare-fun x45 () Int)
(declare-fun x1082 () Int)
(declare-fun x984 () Bool)
(declare-fun x779 () Int)
(declare-fun x554 () Int)
(declare-fun x1731 () Int)
(declare-fun x385 () Int)
(declare-fun x1857 () Int)
(declare-fun x701 () Bool)
(declare-fun x1733 () Int)
(declare-fun x264 () Int)
(declare-fun x979 (Int) Int)
(declare-fun x562 () Bool)
(declare-fun x716 () Int)
(declare-fun x66 () Bool)
(declare-fun x464 () Bool)
(declare-fun x1771 () Bool)
(declare-fun x1236 () Int)
(declare-fun x1168 () Int)
(declare-fun x492 (x1133) Int)
(declare-fun x1189 () Bool)
(declare-fun x1425 () Bool)
(declare-fun x1360 () Bool)
(declare-fun x1565 () Int)
(declare-fun x821 () Bool)
(declare-fun x575 () Bool)
(declare-fun x1002 () Int)
(declare-fun x1627 () Bool)
(declare-fun x1153 () Int)
(declare-fun x366 () Int)
(declare-fun x446 () Int)
(declare-fun x536 () Int)
(declare-fun x147 () Int)
(declare-fun x1207 () Bool)
(declare-fun x920 () Int)
(declare-fun x540 () Int)
(declare-fun x29 () Int)
(declare-fun x1059 () Int)
(declare-fun x743 () Bool)
(declare-fun x335 () Int)
(declare-fun x1144 () Int)
(declare-fun x1227 () Bool)
(declare-fun x312 () Int)
(declare-fun x1838 () Int)
(declare-fun x8 () x1133)
(declare-fun x744 (Int) Int)
(declare-fun x829 () Int)
(declare-fun x1097 () Int)
(declare-fun x689 () Int)
(declare-fun x1076 () Int)
(declare-fun x1707 () Int)
(declare-fun x104 () Bool)
(declare-fun x396 () Bool)
(declare-fun x1115 () Int)
(declare-fun x243 () Int)
(declare-fun x1788 () Int)
(declare-fun x1776 () Int)
(declare-fun x1715 () Bool)
(declare-fun x576 (Int) Int)
(declare-fun x1743 () Bool)
(declare-fun x82 () Bool)
(declare-fun x1730 () Int)
(declare-fun x1128 () Bool)
(declare-fun x1597 (Int) Int)
(declare-fun x168 () Int)
(declare-fun x1007 () Bool)
(declare-fun x560 () Bool)
(declare-fun x107 () Int)
(declare-fun x115 () Int)
(declare-fun x1233 () Int)
(declare-fun x693 () Int)
(declare-fun x1255 () Int)
(declare-fun x895 () Int)
(declare-fun x1815 () Int)
(declare-fun x864 () Bool)
(declare-fun x1183 (Int) Int)
(declare-fun x1728 () Bool)
(declare-fun x331 () Int)
(declare-fun x467 () Int)
(declare-fun x249 (Int) Int)
(declare-fun x49 () Int)
(declare-fun x22 () Int)
(declare-fun x134 () Bool)
(declare-fun x1317 () Bool)
(declare-fun x1552 () Bool)
(declare-fun x320 () Int)
(declare-fun x1401 () Int)
(declare-fun x1248 () Bool)
(declare-fun x678 () Bool)
(declare-fun x379 () Bool)
(declare-fun x88 () x1133)
(declare-fun x1532 () Int)
(declare-fun x587 () x1133)
(declare-fun x1162 () Int)
(declare-fun x1411 (Int) Int)
(declare-fun x1361 () Bool)
(declare-fun x1553 () Bool)
(declare-fun x358 () Bool)
(declare-fun x498 () Bool)
(declare-fun x822 () x1133)
(declare-fun x1058 () Int)
(declare-fun x324 () Bool)
(declare-fun x786 () Bool)
(declare-fun x1131 () Int)
(declare-fun x791 () Int)
(declare-fun x377 () Int)
(declare-fun x1352 () Int)
(declare-fun x166 () Bool)
(declare-fun x680 () Int)
(declare-fun x1086 () Bool)
(declare-fun x1314 () Bool)
(declare-fun x639 () Bool)
(declare-fun x472 () Bool)
(declare-fun x977 () Int)
(declare-fun x828 () Int)
(declare-fun x824 () Int)
(declare-fun x970 () Bool)
(declare-fun x1434 () Int)
(declare-fun x248 () Int)
(declare-fun x468 () Int)
(declare-fun x846 () Int)
(declare-fun x188 () Int)
(declare-fun x1122 () Int)
(declare-fun x110 () Bool)
(declare-fun x410 () Int)
(declare-fun x1726 () Int)
(declare-fun x859 () Int)
(declare-fun x68 () Bool)
(declare-fun x471 () Bool)
(declare-fun x800 () Bool)
(declare-fun x553 () x1133)
(declare-fun x1173 () Int)
(declare-fun x770 () Int)
(declare-fun x567 () Int)
(declare-fun x1093 () Int)
(declare-fun x1491 () Bool)
(declare-fun x522 () Int)
(declare-fun x1823 (Int) Int)
(declare-fun x33 () Int)
(declare-fun x109 () Bool)
(declare-fun x1498 () Bool)
(declare-fun x684 () Bool)
(declare-fun x509 () Int)
(declare-fun x989 () Int)
(declare-fun x819 () Bool)
(declare-fun x440 () Bool)
(declare-fun x825 (Int) Int)
(declare-fun x1413 () Int)
(declare-fun x273 () Int)
(declare-fun x1221 () Bool)
(declare-fun x1603 () Bool)
(declare-fun x505 () Bool)
(declare-fun x1651 () Bool)
(declare-fun x153 () Int)
(declare-fun x238 () Bool)
(declare-fun x308 () x1133)
(declare-fun x771 () Int)
(declare-fun x699 () Bool)
(declare-fun x1409 () Int)
(declare-fun x350 () Bool)
(declare-fun x149 (Int) Int)
(declare-fun x1721 () Bool)
(declare-fun x1235 () Int)
(declare-fun x1853 () Int)
(declare-fun x494 () Bool)
(declare-fun x1383 () Bool)
(declare-fun x1094 () Int)
(declare-fun x1027 () Int)
(declare-fun x547 () Int)
(declare-fun x606 () Int)
(declare-fun x998 () Int)
(declare-fun x574 () Int)
(declare-fun x1241 () Bool)
(declare-fun x338 () Int)
(declare-fun x1790 () Int)
(declare-fun x473 () Int)
(declare-fun x778 () Int)
(declare-fun x437 () Bool)
(declare-fun x1353 () Bool)
(declare-fun x365 (Int) Int)
(declare-fun x1889 () Bool)
(declare-fun x244 () Int)
(declare-fun x310 () Int)
(declare-fun x271 (Int) Int)
(declare-fun x550 () Bool)
(declare-fun x300 () Bool)
(declare-fun x1165 () x1133)
(declare-fun x831 () Bool)
(declare-fun x1359 () Bool)
(declare-fun x1341 () Int)
(declare-fun x1009 () Int)
(declare-fun x65 () Int)
(declare-fun x594 (Int) Int)
(declare-fun x321 () Bool)
(declare-fun x1530 () Int)
(declare-fun x968 () Int)
(declare-fun x279 () x1133)
(declare-fun x808 (Int) Int)
(declare-fun x1327 () Bool)
(declare-fun x1812 () Int)
(declare-fun x1083 () Int)
(declare-fun x1573 () Int)
(declare-fun x1564 (x1133) Int)
(declare-fun x1844 () Int)
(declare-fun x493 (Int) Int)
(declare-fun x26 () Int)
(declare-fun x1470 () Bool)
(declare-fun x1490 () Int)
(declare-fun x714 () Int)
(declare-fun x899 () Int)
(declare-fun x257 () Int)
(declare-fun x898 () Bool)
(declare-fun x674 () Bool)
(declare-fun x1468 () Bool)
(declare-fun x971 () Int)
(declare-fun x939 (Int) Int)
(declare-fun x584 () Int)
(declare-fun x411 () Bool)
(declare-fun x1524 () Int)
(declare-fun x1283 () Bool)
(declare-fun x807 () Bool)
(declare-fun x1760 () Int)
(declare-fun x1780 () Bool)
(declare-fun x761 () Int)
(declare-fun x1174 () Int)
(declare-fun x893 () Bool)
(declare-fun x872 () Bool)
(declare-fun x1910 () x1133)
(declare-fun x1888 () Bool)
(declare-fun x1179 () Bool)
(declare-fun x1625 () x1133)
(declare-fun x1903 () Bool)
(declare-fun x174 () Bool)
(declare-fun x438 () Bool)
(declare-fun x789 () Bool)
(declare-fun x339 () Int)
(declare-fun x1127 () Bool)
(declare-fun x1320 () Int)
(declare-fun x1555 () Int)
(declare-fun x1301 () Bool)
(declare-fun x1741 () Bool)
(declare-fun x1478 () Int)
(declare-fun x1637 () Int)
(declare-fun x1313 () Int)
(declare-fun x1369 () Int)
(declare-fun x1527 (x1133) Int)
(declare-fun x458 () Bool)
(declare-fun x671 () Int)
(declare-fun x1099 () Bool)
(declare-fun x897 () Int)
(declare-fun x85 () Bool)
(declare-fun x1000 (Int) Int)
(declare-fun x840 () x1133)
(declare-fun x1588 () Int)
(declare-fun x1500 () Int)
(declare-fun x640 () Int)
(declare-fun x631 () Int)
(declare-fun x488 () Int)
(declare-fun x665 (Int) Int)
(declare-fun x628 () Int)
(declare-fun x746 () Int)
(declare-fun x129 () Int)
(declare-fun x98 () Int)
(declare-fun x1284 () Bool)
(declare-fun x1289 () x1133)
(declare-fun x75 () Int)
(declare-fun x1091 () Bool)
(declare-fun x1281 (Int) Int)
(declare-fun x1538 () Int)
(declare-fun x1867 () Int)
(declare-fun x1724 () x1133)
(declare-fun x1084 () Int)
(declare-fun x1147 () Bool)
(declare-fun x1172 () Bool)
(declare-fun x480 () Bool)
(declare-fun x242 () Bool)
(declare-fun x839 (Int) Int)
(declare-fun x624 () Bool)
(declare-fun x835 (Int) Int)
(declare-fun x1427 () Int)
(declare-fun x888 () Bool)
(declare-fun x1126 () Bool)
(declare-fun x749 () Bool)
(declare-fun x131 () Int)
(declare-fun x599 () Bool)
(declare-fun x735 () Int)
(declare-fun x737 () Bool)
(declare-fun x404 () Bool)
(declare-fun x1206 (Int) Int)
(declare-fun x276 () Int)
(declare-fun x1665 () Int)
(declare-fun x1846 () Bool)
(declare-fun x1757 () Int)
(declare-fun x219 () x1133)
(declare-fun x1580 () Int)
(declare-fun x1634 () Int)
(declare-fun x1177 () Bool)
(declare-fun x1453 () Bool)
(declare-fun x259 () Int)
(declare-fun x401 () Int)
(declare-fun x516 () Bool)
(declare-fun x124 (Int) Int)
(declare-fun x792 () Int)
(declare-fun x89 () Bool)
(declare-fun x815 () Int)
(declare-fun x626 () Bool)
(declare-fun x1804 () Int)
(declare-fun x228 () Int)
(declare-fun x941 () Bool)
(declare-fun x1101 () Bool)
(declare-fun x542 () Int)
(declare-fun x1023 () Int)
(declare-fun x861 () Int)
(declare-fun x1482 () Bool)
(declare-fun x1797 () Int)
(declare-fun x1449 () Int)
(declare-fun x203 () Int)
(declare-fun x220 () Bool)
(declare-fun x370 () Int)
(declare-fun x1262 (x1133) Int)
(declare-fun x54 () Bool)
(declare-fun x974 () Int)
(declare-fun x277 () Int)
(declare-fun x1497 (Int) Int)
(declare-fun x1392 (Int) Int)
(declare-fun x1216 () x1133)
(declare-fun x986 () Bool)
(declare-fun x949 () Bool)
(declare-fun x1185 () Bool)
(declare-fun x1132 () Bool)
(declare-fun x719 () Bool)
(declare-fun x597 () Int)
(declare-fun x247 () Int)
(declare-fun x687 () Int)
(declare-fun x1833 () Int)
(declare-fun x118 () Int)
(declare-fun x1374 () Bool)
(declare-fun x1104 () x1133)
(declare-fun x382 () Bool)
(declare-fun x1366 () Int)
(declare-fun x642 () Int)
(declare-fun x1711 () Int)
(declare-fun x1129 () Int)
(declare-fun x862 () Int)
(declare-fun x1761 () x1133)
(declare-fun x1911 () Bool)
(declare-fun x199 () Int)
(declare-fun x1231 () Int)
(declare-fun x83 () Bool)
(declare-fun x1275 () Bool)
(declare-fun x1389 () x1133)
(declare-fun x181 () Bool)
(declare-fun x1670 () Int)
(declare-fun x1668 () Int)
(declare-fun x1432 () Int)
(declare-fun x1170 () Bool)
(declare-fun x932 () Int)
(declare-fun x1394 () Int)
(declare-fun x1630 () Int)
(declare-fun x223 () Int)
(declare-fun x581 () Int)
(declare-fun x1328 () Int)
(declare-fun x1794 (x1133) Int)
(declare-fun x994 () Bool)
(declare-fun x1855 () Int)
(declare-fun x237 () Bool)
(declare-fun x739 () Bool)
(declare-fun x1188 () Bool)
(declare-fun x1455 () Int)
(declare-fun x196 () Bool)
(declare-fun x682 () Int)
(declare-fun x1511 () Int)
(declare-fun x867 () Int)
(declare-fun x1047 () Int)
(declare-fun x1154 () Int)
(declare-fun x664 () Bool)
(declare-fun x1494 () Int)
(declare-fun x1006 () Int)
(declare-fun x1632 () Bool)
(declare-fun x130 () Bool)
(declare-fun x1061 () Bool)
(declare-fun x1710 () Int)
(declare-fun x418 () Int)
(declare-fun x1785 () Bool)
(declare-fun x32 () Bool)
(declare-fun x1464 () Int)
(declare-fun x637 () Bool)
(declare-fun x538 () Bool)
(declare-fun x529 () Bool)
(declare-fun x696 (Int) Int)
(declare-fun x1108 () Int)
(declare-fun x1417 () Int)
(declare-fun x1194 () Int)
(declare-fun x1331 () Bool)
(declare-fun x1718 () Bool)
(declare-fun x1045 () Bool)
(declare-fun x1345 (Int) Int)
(declare-fun x448 () Bool)
(declare-fun x1385 () Bool)
(declare-fun x907 () Bool)
(declare-fun x77 () Int)
(declare-fun x357 () Bool)
(declare-fun x450 () Int)
(declare-fun x520 () Bool)
(declare-fun x395 () Int)
(declare-fun x1038 () Bool)
(declare-fun x48 () Bool)
(declare-fun x378 (Int) Int)
(declare-fun x1471 () Bool)
(declare-fun x1525 () Bool)
(declare-fun x1798 () Bool)
(declare-fun x568 () Bool)
(declare-fun x95 (Int) Int)
(declare-fun x1280 () Bool)
(declare-fun x646 () Bool)
(declare-fun x944 () Bool)
(declare-fun x1156 () Int)
(declare-fun x528 () Bool)
(declare-fun x1223 () Bool)
(declare-fun x1550 () Int)
(declare-fun x570 () Bool)
(declare-fun x922 () Int)
(declare-fun x1574 () Bool)
(declare-fun x461 () Int)
(declare-fun x1310 () Bool)
(declare-fun x1604 () Int)
(declare-fun x316 () Bool)
(declare-fun x589 () Bool)
(declare-fun x915 () Int)
(declare-fun x965 () Bool)
(declare-fun x1078 () Int)
(declare-fun x1737 (Int) Int)
(declare-fun x1474 () Int)
(declare-fun x659 () Bool)
(declare-fun x1751 () Int)
(declare-fun x1515 () Bool)
(declare-fun x874 () Int)
(declare-fun x518 () Bool)
(declare-fun x195 () Int)
(declare-fun x805 () Bool)
(declare-fun x1600 () Int)
(declare-fun x1629 () Int)
(declare-fun x1914 () Int)
(declare-fun x1618 () Int)
(declare-fun x980 () Bool)
(declare-fun x1302 (Int) Int)
(declare-fun x1898 () Int)
(declare-fun x930 () Int)
(declare-fun x482 () Bool)
(declare-fun x1473 () Int)
(declare-fun x132 () Bool)
(declare-fun x507 () x1133)
(declare-fun x400 () Int)
(declare-fun x878 () Int)
(declare-fun x1063 () Int)
(declare-fun x1874 () Bool)
(declare-fun x947 () Bool)
(declare-fun x651 () Bool)
(declare-fun x430 () Bool)
(declare-fun x1750 () Int)
(declare-fun x704 (x1133) Int)
(declare-fun x1529 () Int)
(declare-fun x84 () Int)
(declare-fun x1161 () Int)
(declare-fun x1899 () Int)
(declare-fun x14 () Int)
(declare-fun x46 () Int)
(declare-fun x1118 (Int Int) Int)
(declare-fun x1623 () Int)
(declare-fun x976 () Int)
(declare-fun x122 () Int)
(declare-fun x650 () Bool)
(declare-fun x405 () Int)
(declare-fun x1373 () Bool)
(declare-fun x804 () Int)
(declare-fun x896 () Int)
(declare-fun x1514 () Int)
(declare-fun x255 () Int)
(declare-fun x1882 () Int)
(declare-fun x676 () Bool)
(declare-fun x254 () Int)
(declare-fun x164 (Int) Int)
(declare-fun x1843 () Bool)
(declare-fun x1258 () Int)
(declare-fun x1113 () Bool)
(declare-fun x783 () Int)
(declare-fun x1768 (Int) Int)
(declare-fun x1720 () Bool)
(declare-fun x708 () Int)
(declare-fun x314 () Bool)
(declare-fun x209 () Int)
(declare-fun x1325 () Bool)
(declare-fun x705 () Bool)
(declare-fun x1102 () Int)
(declare-fun x1265 () Int)
(declare-fun x1016 () Bool)
(declare-fun x333 () Int)
(declare-fun x1279 () Int)
(declare-fun x292 () x1133)
(declare-fun x1906 () Int)
(declare-fun x1907 () Int)
(declare-fun x1699 () Bool)
(declare-fun x938 () Int)
(declare-fun x894 () Int)
(declare-fun x1792 (Int) Int)
(declare-fun x880 () Bool)
(declare-fun x1784 () Bool)
(declare-fun x1496 () Int)
(declare-fun x1354 () Int)
(declare-fun x892 () Bool)
(declare-fun x1053 () Int)
(declare-fun x1182 () Bool)
(declare-fun x1528 () Int)
(declare-fun x621 () Bool)
(declare-fun x1894 () Int)
(declare-fun x1095 () Bool)
(declare-fun x514 () Int)
(declare-fun x303 () Int)
(declare-fun x57 (Int) Int)
(declare-fun x870 () Int)
(declare-fun x200 () Bool)
(declare-fun x1548 () Bool)
(declare-fun x759 () Bool)
(declare-fun x1546 () Int)
(declare-fun x999 () Bool)
(declare-fun x1664 (x1133) Int)
(declare-fun x345 () Bool)
(declare-fun x295 () Bool)
(declare-fun x1505 () Int)
(declare-fun x1540 () Int)
(declare-fun x1332 () x1133)
(declare-fun x1141 (Int) Int)
(declare-fun x513 () Int)
(declare-fun x116 () Bool)
(declare-fun x1004 () x1133)
(declare-fun x1111 () Int)
(declare-fun x332 (Int) Int)
(declare-fun x1703 () Int)
(declare-fun x2 () Bool)
(declare-fun x1834 () Int)
(declare-fun x1675 () Int)
(declare-fun x1807 (Int) Int)
(declare-fun x1541 (Int) Int)
(declare-fun x503 () Int)
(declare-fun x1655 () Int)
(declare-fun x1087 () Int)
(declare-fun x1484 () Bool)
(declare-fun x711 (Int) Int)
(declare-fun x258 () Int)
(declare-fun x591 () Int)
(declare-fun x163 () Int)
(declare-fun x1260 () Int)
(declare-fun x695 () Int)
(declare-fun x1198 (Int) Int)
(declare-fun x799 () Int)
(declare-fun x1612 () Bool)
(declare-fun x15 () Int)
(declare-fun x180 (Int) Int)
(declare-fun x1037 () Bool)
(declare-fun x93 () Bool)
(declare-fun x953 () Bool)
(declare-fun x42 () Bool)
(declare-fun x925 () Int)
(declare-fun x427 () Bool)
(declare-fun x92 () Int)
(declare-fun x59 (x1133) Int)
(declare-fun x681 () Bool)
(declare-fun x1544 () Bool)
(declare-fun x1349 () Bool)
(declare-fun x4 (Int) Int)
(declare-fun x232 () Int)
(declare-fun x172 () Int)
(declare-fun x987 () Int)
(declare-fun x1805 () Bool)
(declare-fun x159 () Int)
(declare-fun x1531 () Int)
(declare-fun x21 (Int) Int)
(declare-fun x634 () Bool)
(declare-fun x1554 () Int)
(declare-fun x795 () Int)
(declare-fun x1334 () Bool)
(declare-fun x91 () Bool)
(declare-fun x603 (Int) Int)
(declare-fun x1493 () Bool)
(declare-fun x595 () Int)
(declare-fun x1818 () Bool)
(declare-fun x731 () Bool)
(declare-fun x1073 (Int) Int)
(declare-fun x1817 () Int)
(declare-fun x1297 () Int)
(declare-fun x1404 () Bool)
(declare-fun x1193 () Bool)
(declare-fun x830 () Int)
(declare-fun x1673 () Bool)
(declare-fun x177 () Int)
(declare-fun x1055 () Bool)
(declare-fun x367 () Int)
(declare-fun x502 () Int)
(declare-fun x959 () Bool)
(declare-fun x718 (Int) Int)
(declare-fun x1900 () Bool)
(declare-fun x10 () Bool)
(declare-fun x1386 () Int)
(declare-fun x403 () Bool)
(declare-fun x1056 () Int)
(declare-fun x1659 (x1133) Int)
(declare-fun x1159 () Bool)
(declare-fun x178 () Int)
(declare-fun x1774 () Bool)
(declare-fun x1690 () Bool)
(declare-fun x1712 () Bool)
(declare-fun x356 () Bool)
(declare-fun x447 () Int)
(declare-fun x384 () Int)
(declare-fun x1092 () Int)
(declare-fun x1871 () Bool)
(declare-fun x1744 () Bool)
(declare-fun x1299 () Int)
(declare-fun x1378 () Bool)
(declare-fun x481 () Bool)
(declare-fun x1507 () Bool)
(declare-fun x921 () Int)
(declare-fun x1638 () Bool)
(declare-fun x297 () Int)
(declare-fun x309 () Int)
(declare-fun x1563 () Int)
(declare-fun x571 () Int)
(declare-fun x374 () Bool)
(declare-fun x1631 () Int)
(declare-fun x1569 () Int)
(declare-fun x268 () Int)
(declare-fun x371 () Int)
(declare-fun x827 () Bool)
(declare-fun x143 (Int) Int)
(declare-fun x80 () Bool)
(declare-fun x1676 (Int) Int)
(declare-fun x1893 () Int)
(declare-fun x1075 () Int)
(declare-fun x1264 () Bool)
(declare-fun x552 () Bool)
(declare-fun x952 () Bool)
(declare-fun x1716 () Int)
(declare-fun x985 () Bool)
(declare-fun x500 () Int)
(declare-fun x796 (Int) Int)
(declare-fun x565 () Int)
(declare-fun x442 () Bool)
(declare-fun x1487 () Bool)
(declare-fun x1042 () Bool)
(declare-fun x1477 () Bool)
(declare-fun x700 () Int)
(declare-fun x1732 () x1133)
(declare-fun x1591 () Int)
(declare-fun x912 () Bool)
(declare-fun x1887 () Int)
(declare-fun x486 () x1133)
(declare-fun x515 () Int)
(declare-fun x1390 () Bool)
(declare-fun x154 () Int)
(declare-fun x645 () Int)
(declare-fun x1114 () Bool)
(declare-fun x478 () Bool)
(declare-fun x527 () Bool)
(declare-fun x218 () Int)
(declare-fun x7 (Int) Int)
(declare-fun x617 () Int)
(declare-fun x1839 () Int)
(declare-fun x1036 () Bool)
(declare-fun x1624 () Int)
(declare-fun x935 () Int)
(declare-fun x290 () Bool)
(declare-fun x578 () Int)
(declare-fun x670 () Int)
(declare-fun x740 () Int)
(declare-fun x1209 () Bool)
(declare-fun x1738 () Bool)
(declare-fun x1081 () Bool)
(declare-fun x207 () Bool)
(declare-fun x658 () Int)
(declare-fun x1608 (Int) Int)
(declare-fun x43 () Int)
(declare-fun x1872 () Int)
(declare-fun x230 (Int) Int)
(declare-fun x1501 () Int)
(declare-fun x924 () Int)
(declare-fun x167 (Int) Int)
(declare-fun x1019 (x1133) Int)
(declare-fun x1067 () Int)
(declare-fun x619 () Bool)
(declare-fun x793 () Int)
(declare-fun x1160 () Int)
(declare-fun x1666 () Bool)
(declare-fun x853 () Int)
(declare-fun x307 (Int) Int)
(declare-fun x414 () Bool)
(declare-fun x1862 () Bool)
(declare-fun x1422 () Bool)
(declare-fun x909 () Bool)
(declare-fun x1735 () Bool)
(declare-fun x753 () Bool)
(declare-fun x301 () Int)
(declare-fun x1424 () Bool)
(declare-fun x12 () Int)
(declare-fun x914 () Int)
(declare-fun x270 () Int)
(declare-fun x1466 () Int)
(declare-fun x1649 () Int)
(declare-fun x851 () Bool)
(declare-fun x1151 (Int) Int)
(declare-fun x1913 () Int)
(declare-fun x363 () Bool)
(declare-fun x1005 () Int)
(declare-fun x390 () Int)
(declare-fun x785 () Int)
(declare-fun x942 () Bool)
(declare-fun x1656 () Bool)
(declare-fun x1186 () Bool)
(declare-fun x422 () x1133)
(declare-fun x1176 () Bool)
(declare-fun x1811 () Int)
(declare-fun x950 (Int) Int)
(declare-fun x1654 () Int)
(declare-fun x39 () Bool)
(declare-fun x305 (Int) Int)
(declare-fun x1032 () Bool)
(declare-fun x557 () Int)
(declare-fun x1841 () Int)
(declare-fun x691 (Int) Int)
(declare-fun x1739 () Int)
(declare-fun x451 () Bool)
(declare-fun x1039 () Int)
(declare-fun x1226 () Int)
(declare-fun x16 () Int)
(declare-fun x1448 () Int)
(declare-fun x452 () Bool)
(declare-fun x1802 () Int)
(declare-fun x394 () Int)
(declare-fun x784 () Bool)
(declare-fun x1589 () Int)
(declare-fun x444 () Int)
(declare-fun x1109 () x1133)
(declare-fun x136 () Int)
(declare-fun x1476 () Bool)
(declare-fun x1881 () Bool)
(declare-fun x1633 () Int)
(declare-fun x1700 () Int)
(declare-fun x1789 () Int)
(declare-fun x577 () Bool)
(declare-fun x1617 () Bool)
(declare-fun x937 () Int)
(declare-fun x1831 () Bool)
(declare-fun x1438 () Int)
(declare-fun x813 () Bool)
(declare-fun x81 () Int)
(declare-fun x798 () Bool)
(declare-fun x319 () Bool)
(declare-fun x62 () x1133)
(declare-fun x158 () Bool)
(declare-fun x1229 (Int) Int)
(declare-fun x1610 () Bool)
(declare-fun x73 () Bool)
(declare-fun x187 () Bool)
(declare-fun x141 () Int)
(declare-fun x397 () Int)
(declare-fun x459 () Bool)
(declare-fun x1382 () Int)
(declare-fun x1356 () Int)
(declare-fun x1814 () Bool)
(declare-fun x120 () Int)
(declare-fun x661 () Bool)
(declare-fun x114 () Bool)
(declare-fun x1286 () Int)
(declare-fun x485 () Bool)
(declare-fun x1877 () Bool)
(declare-fun x1452 (Int) Int)
(declare-fun x1252 () Bool)
(declare-fun x900 () Int)
(declare-fun x1695 () Int)
(declare-fun x1513 () Bool)
(declare-fun x1013 () Int)
(declare-fun x521 () Int)
(declare-fun x1681 () Int)
(declare-fun x146 () Int)
(declare-fun x1806 (Int) Int)
(declare-fun x834 () Int)
(declare-fun x1033 () Int)
(declare-fun x1660 () Int)
(declare-fun x245 () Int)
(declare-fun x1856 () Int)
(declare-fun x860 () Int)
(declare-fun x9 () Bool)
(declare-fun x961 () Bool)
(declare-fun x139 () Int)
(declare-fun x802 () Int)
(declare-fun x1246 () Bool)
(declare-fun x833 () Int)
(declare-fun x1725 () Bool)
(declare-fun x1864 () Int)
(declare-fun x1678 () Int)
(declare-fun x1239 () Bool)
(declare-fun x140 () Int)
(declare-fun x1200 () Bool)
(declare-fun x781 (x1133) Int)
(declare-fun x1217 () Int)
(declare-fun x685 () Bool)
(declare-fun x1257 () Int)
(declare-fun x814 () Int)
(declare-fun x1322 (x1133) Int)
(declare-fun x1836 () Bool)
(declare-fun x1885 (Int) Int)
(declare-fun x1813 () Int)
(declare-fun x439 () Int)
(declare-fun x1243 () Int)
(declare-fun x1371 () Bool)
(declare-fun x1719 () Bool)
(declare-fun x1824 () Int)
(declare-fun x364 () Bool)
(declare-fun x1256 () Int)
(declare-fun x1533 () Bool)
(declare-fun x37 () Bool)
(declare-fun x152 () Bool)
(declare-fun x19 () Bool)
(declare-fun x38 () Int)
(declare-fun x1140 () Bool)
(declare-fun x1626 () Int)
(declare-fun x820 () Bool)
(declare-fun x956 () Int)
(declare-fun x636 () Bool)
(declare-fun x541 () Bool)
(declare-fun x561 (Int) Int)
(declare-fun x123 () Bool)
(declare-fun x372 () Int)
(declare-fun x323 () Bool)
(declare-fun x1717 () Int)
(declare-fun x1465 () Int)
(declare-fun x1729 () Bool)
(declare-fun x1064 () Int)
(declare-fun x1819 () Int)
(declare-fun x943 () Bool)
(declare-fun x876 () Bool)
(declare-fun x386 () Int)
(declare-fun x496 () Int)
(declare-fun x582 (Int) Int)
(declare-fun x709 () Int)
(declare-fun x1249 () Int)
(declare-fun x1253 () Bool)
(declare-fun x1830 () Int)
(define-fun x1777 ((x1133 x1133) (x1001 Int)) x1133 (ite ((_ is x1908) x1133) (x1908 (x1696 x1133) (+ (x1377 x1133) x1001)) (ite ((_ is x973) x1133) (x973 (x951 x1133) (x1479 x1133) (+ (x1138 x1133) x1001)) (x1543 (+ x1001 (x669 x1133))))))
(define-fun x99 ((x1693 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1693) (>= x1693 0)) x1693 (- x1693 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x285 ((x1693 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1693) (> 0 x1693)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1693) x1693))
(define-fun x1480 ((x156 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x156) (<= 0 x156)))
(define-fun x551 ((x885 Int)) Int (x1737 x885))
(define-fun x732 ((x885 Int)) Int (ite (and (<= 28 x885) (< x885 (+ 4 28))) (x1737 (+ (- x885 28) 0)) (x305 x885)))
(define-fun x1459 ((x885 Int)) Int (ite (= 640 x885) x540 (x732 x885)))
(define-fun x127 ((x885 Int)) Int (ite (= 672 x885) x202 (x1459 x885)))
(define-fun x1418 ((x885 Int)) Int (ite (= x885 704) 1 (x127 x885)))
(define-fun x1584 ((x885 Int)) Int (ite (= 160 x885) x202 (x1823 x885)))
(define-fun x1456 ((x885 Int)) Int (ite (= 128 x885) 7 (x1584 x885)))
(define-fun x1686 ((x885 Int)) Int (ite (= 736 x885) x1637 (x1456 x885)))
(define-fun x886 ((x885 Int)) Int (ite (and (not x1831) x1525) (x1823 x885) (x1686 x885)))
(define-fun x1119 ((x885 Int)) Int (ite (= x885 160) x202 (x886 x885)))
(define-fun x265 ((x885 Int)) Int (ite (= x885 128) 7 (x1119 x885)))
(define-fun x1306 ((x885 Int)) Int (ite (= x885 800) x65 (x576 x885)))
(define-fun x1485 ((x885 Int)) Int (ite (= x885 224) 1889567281 (x576 x885)))
(define-fun x1645 ((x885 Int)) Int (ite (and (>= x885 224) (> (+ 32 224) x885)) (x1143 (+ 0 (- x885 224))) (x1742 x885)))
(define-fun x902 ((x885 Int)) Int (ite (and x1568 x1653 x1525) (x1645 x885) (x1742 x885)))
(define-fun x1324 ((x885 Int)) Int (ite (= 288 x885) x1173 (x902 x885)))
(define-fun x1740 ((x885 Int)) Int (ite (= 320 x885) 0 (x180 x885)))
(define-fun x1621 ((x885 Int)) Int (ite (= x885 256) x1496 (x180 x885)))
(define-fun x272 ((x885 Int)) Int (ite (= 320 x885) x450 (x1621 x885)))
(define-fun x144 ((x885 Int)) Int (ite (and x1525 x1653 x1912) (x272 x885) (x1740 x885)))
(define-fun x913 ((x885 Int)) Int (ite (= 384 x885) x423 (x144 x885)))
(define-fun x3 ((x885 Int)) Int (ite (= 800 x885) x1391 (x913 x885)))
(define-fun x289 ((x885 Int)) Int (ite (and x1525 (not x1653)) (x1306 x885) (x3 x885)))
(define-fun x1800 ((x885 Int)) Int (ite (= 768 x885) x159 (x289 x885)))
(define-fun x1835 ((x885 Int)) Int (ite (= 800 x885) 1889567281 (x1800 x885)))
(define-fun x1266 ((x885 Int)) Int (ite (and (> (+ 800 32) x885) (<= 800 x885)) (x825 (+ 0 (- x885 800))) (x1676 x885)))
(define-fun x1228 ((x885 Int)) Int (ite (= 864 x885) 0 (x1806 x885)))
(define-fun x234 ((x885 Int)) Int (ite (= x885 928) 0 (x1228 x885)))
(define-fun x375 ((x885 Int)) Int (ite (= x885 992) 1889567281 (x1198 x885)))
(define-fun x1251 ((x885 Int)) Int (ite (and (<= 992 x885) (< x885 (+ 32 992))) (x57 (+ (- x885 992) 0)) (x543 x885)))
(define-fun x1909 ((x885 x1133)) Int (ite (and x1042 (not x1482)) (x1262 x885) (x1019 x885)))
(define-fun x267 ((x885 x1133)) Int (ite (= x279 x885) x1588 (x63 x885)))
(define-fun x1601 ((x885 x1133)) Int (ite (= x885 (x1543 39)) x547 (x267 x885)))
(define-fun x1230 ((x885 x1133)) Int (ite (and x409 (not x660) x589 x1007 x1270 x780) (x63 x885) (ite (and x589 x660 x409 x1270 x780) (x63 x885) (x1601 x885))))
(define-fun x1116 ((x885 x1133)) Int (ite (= x694 x885) x937 (x1230 x885)))
(define-fun x1590 ((x885 x1133)) Int (ite (= x8 x885) x218 (x1116 x885)))
(define-fun x602 ((x885 x1133)) Int (ite (= x885 (x1543 40)) x936 (x1590 x885)))
(define-fun x1402 ((x885 x1133)) Int (ite (and x780 x1270 x409 (not x589)) (x63 x885) (x602 x885)))
(define-fun x1340 ((x885 x1133)) Int (ite (= x885 x553) x28 (x1402 x885)))
(define-fun x523 ((x885 x1133)) Int (ite (= (x1543 40) x885) x581 (x1340 x885)))
(define-fun x435 ((x885 x1133)) Int (ite (and x409 x780 x1270) (x523 x885) (x63 x885)))
(define-fun x1017 ((x885 Int)) Int (ite (and x1042 x823 x1482) (x1251 x885) (x543 x885)))
(define-fun x336 ((x885 Int)) Int (ite (= 992 x885) x209 (x1497 x885)))
(define-fun x1415 ((x885 Int)) Int (ite (= x885 160) x465 (x336 x885)))
(define-fun x170 ((x885 Int)) Int (ite (= x885 128) 16 (x1415 x885)))
(define-fun x1272 ((x885 Int)) Int (ite (= x885 1056) 773487949 (x149 x885)))
(define-fun x1689 ((x885 Int)) Int (ite (and (< x885 (+ 1056 32)) (<= 1056 x885)) (x1392 (+ (- x885 1056) 0)) (x1770 x885)))
(define-fun x1842 ((x885 Int)) Int (ite (and x354 x409 x1270 x780) (x1689 x885) (x1770 x885)))
(define-fun x1178 ((x885 Int)) Int (ite (= 1024 x885) x228 (x1842 x885)))
(define-fun x519 ((x885 Int)) Int (ite (= x885 1088) 1889567281 (x1178 x885)))
(define-fun x596 ((x885 Int)) Int (ite (and (< x885 (+ 32 1088)) (>= x885 1088)) (x1596 (+ (- x885 1088) 0)) (x808 x885)))
(define-fun x733 ((x885 Int)) Int (ite (and x1270 x780 x1460 x409) (x596 x885) (x808 x885)))
(define-fun x1071 ((x885 Int)) Int (ite (= 768 x885) x1897 (x648 x885)))
(define-fun x955 ((x885 Int)) Int (ite (= 864 x885) x853 (x1071 x885)))
(define-fun x600 ((x885 Int)) Int (ite (= 224 x885) x266 (x955 x885)))
(define-fun x369 ((x885 Int)) Int (ite (= 256 x885) x925 (x600 x885)))
(define-fun x801 ((x885 Int)) Int (ite (= 160 x885) x1894 (x369 x885)))
(define-fun x686 ((x885 Int)) Int (ite (= x885 128) 16 (x801 x885)))
(define-fun x887 ((x885 Int)) Int (ite (= x885 160) x1056 (x1469 x885)))
(define-fun x1615 ((x885 Int)) Int (ite (= x885 128) 16 (x887 x885)))
(define-fun x1915 ((x885 Int)) Int (ite (= 160 x885) x504 (x835 x885)))
(define-fun x1365 ((x885 Int)) Int (ite (= 128 x885) 16 (x1915 x885)))
(define-fun x70 ((x885 Int)) Int (ite (and x1270 x1007 (not x660) x409 x589 x780) (x835 x885) (ite (and x660 x780 x1270 x589 x409) (x1469 x885) (x1365 x885))))
(define-fun x1583 ((x885 Int)) Int (ite (= x885 160) x1352 (x70 x885)))
(define-fun x698 ((x885 Int)) Int (ite (= x885 128) 16 (x1583 x885)))
(define-fun x1816 ((x885 Int)) Int (ite (= 160 x885) x735 (x698 x885)))
(define-fun x1192 ((x885 Int)) Int (ite (= 128 x885) 16 (x1816 x885)))
(define-fun x433 ((x885 Int)) Int (ite (and x1270 x409 (not x589) x780) (x648 x885) (x1192 x885)))
(define-fun x1579 ((x885 Int)) Int (ite (= 160 x885) x488 (x433 x885)))
(define-fun x1208 ((x885 Int)) Int (ite (= 128 x885) 16 (x1579 x885)))
(define-fun x1210 ((x885 Int)) Int (ite (and x409 x1270 x780) (x1208 x885) (x149 x885)))
(define-fun x302 ((x885 x1133)) Int (ite (and x40 x1187) (x435 x885) (ite (and x780 (not x1270)) (x63 x885) (ite (and (not x1482) x1042) (x63 x885) (x435 x885)))))
(define-fun x683 ((x885 Int)) Int (ite (= 896 x885) x78 (x307 x885)))
(define-fun x51 ((x885 Int)) Int (ite (and x1187 x40) (x307 x885) (ite (and (not x1270) x780) (x1497 x885) (ite (and x1042 (not x1482)) (x1198 x885) (x683 x885)))))
(define-fun x1904 ((x885 Int)) Int (ite (= 928 x885) 1889567281 (x51 x885)))
(define-fun x189 ((x885 Int)) Int (ite (and (<= 928 x885) (< x885 (+ 928 32))) (x1575 (+ 0 (- x885 928))) (x889 x885)))
(define-fun x508 ((x885 Int)) Int (ite (and x1903 x1557) (x189 x885) (x889 x885)))
(define-fun x1384 ((x885 Int)) Int (ite (= 768 x885) x1454 (x594 x885)))
(define-fun x383 ((x885 Int)) Int (ite (= x885 352) x163 (x1384 x885)))
(define-fun x1439 ((x885 Int)) Int (ite (= x885 224) 1889567281 (x383 x885)))
(define-fun x1380 ((x885 Int)) Int (ite (and (< x885 (+ 32 224)) (<= 224 x885)) (x296 (+ (- x885 224) 0)) (x1152 x885)))
(define-fun x756 ((x885 Int)) Int (ite (and x1526 x1557 x1126) (x1380 x885) (x1152 x885)))
(define-fun x162 ((x885 Int)) Int (ite (= 288 x885) x1461 (x756 x885)))
(define-fun x1858 ((x885 Int)) Int (ite (= x885 320) 0 (x167 x885)))
(define-fun x1003 ((x885 Int)) Int (ite (= x885 256) x791 (x167 x885)))
(define-fun x1516 ((x885 Int)) Int (ite (= 320 x885) x15 (x1003 x885)))
(define-fun x1041 ((x885 Int)) Int (ite (and x1526 x1557 x654) (x1516 x885) (x1858 x885)))
(define-fun x544 ((x885 Int)) Int (ite (= 416 x885) x1464 (x1041 x885)))
(define-fun x330 ((x885 Int)) Int (ite (= x885 928) 0 (x1302 x885)))
(define-fun x675 ((x885 Int)) Int (ite (= 928 x885) x443 (x1302 x885)))
(define-fun x198 ((x885 Int)) Int (ite (and x1526 x664 x1557) (x675 x885) (x330 x885)))
(define-fun x281 ((x885 Int)) Int (ite (= x885 736) x930 (x198 x885)))
(define-fun x101 ((x885 Int)) Int (ite (and (not x1526) x1557) (x594 x885) (x281 x885)))
(define-fun x1150 ((x885 x1133)) Int (ite (and x1370 (not x300)) (x63 x885) (x302 x885)))
(define-fun x1050 ((x885 x1133)) Int (ite (and x1370 (not x300)) (x1262 x885) (ite (and x1187 x40) (x1019 x885) (ite (and (not x1270) x780) (x1262 x885) (x1909 x885)))))
(define-fun x1237 ((x885 Int)) Int (ite (and (not x300) x1370) (x1806 x885) (x101 x885)))
(define-fun x641 ((x885 x1133)) Int (ite (= x885 (x1543 9)) x1605 (x1150 x885)))
(define-fun x1755 ((x885 Int)) Int (ite (= 160 x885) x202 (x1237 x885)))
(define-fun x1316 ((x885 Int)) Int (ite (= x885 128) 7 (x1755 x885)))
(define-fun x809 ((x885 x1133)) Int (ite (= x1165 x885) x1287 (x641 x885)))
(define-fun x1884 ((x885 Int)) Int (ite (= x885 800) x1500 (x1316 x885)))
(define-fun x710 ((x885 Int)) Int (ite (= x885 224) x1144 (x1884 x885)))
(define-fun x1358 ((x885 Int)) Int (ite (= 256 x885) x783 (x710 x885)))
(define-fun x962 ((x885 Int)) Int (ite (= x885 288) x1156 (x1358 x885)))
(define-fun x1450 ((x885 Int)) Int (ite (= 384 x885) 4 (x962 x885)))
(define-fun x1100 ((x885 Int)) Int (ite (and (< x885 (+ 4 480)) (<= 480 x885)) (x1722 (+ 0 (- x885 480))) (x1606 x885)))
(define-fun x284 ((x885 Int)) Int (ite (and x980 x1185) (x1100 x885) (x1606 x885)))
(define-fun x1708 ((x885 Int)) Int (ite (= x810 x885) x1521 (x284 x885)))
(define-fun x453 ((x885 Int)) Int (ite (= x420 x885) x1245 (x1708 x885)))
(define-fun x1682 ((x885 Int)) Int (ite (and (< x885 (+ 32 608)) (>= x885 608)) (x1151 (+ 0 (- x885 608))) (x561 x885)))
(define-fun x537 ((x885 Int)) Int (ite (and x980 x520) (x1682 x885) (x561 x885)))
(define-fun x344 ((x885 Int)) Int (ite (and (>= x885 320) (> (+ x1292 320) x885)) (x1446 (+ (- x885 320) 0)) (x1541 x885)))
(define-fun x982 ((x885 Int)) Int (ite (and x980 x1519) (x344 x885) (x1541 x885)))
(define-fun x408 ((x885 Int)) Int (ite (= x885 800) x597 (x982 x885)))
(define-fun x727 ((x885 Int)) Int (ite (= 832 x885) x47 (x408 x885)))
(define-fun x1130 ((x885 Int)) Int (ite (= x885 800) x1490 (x727 x885)))
(define-fun x1021 ((x885 Int)) Int (x1620 x885))
(define-fun x832 ((x885 Int)) Int (ite (and (< x885 (+ 28 4)) (<= 28 x885)) (x1620 (+ (- x885 28) 0)) (x1229 x885)))
(define-fun x1661 ((x885 Int)) Int (ite (= 640 x885) x1717 (x832 x885)))
(define-fun x1759 ((x885 Int)) Int (ite (= x885 672) x247 (x1661 x885)))
(define-fun x1338 ((x885 Int)) Int (ite (= 704 x885) 1 (x1759 x885)))
(define-fun x963 ((x885 Int)) Int (ite (= x885 160) x247 (x1793 x885)))
(define-fun x1782 ((x885 Int)) Int (ite (= 128 x885) 7 (x963 x885)))
(define-fun x1412 ((x885 Int)) Int (ite (= 736 x885) x1824 (x1782 x885)))
(define-fun x1096 ((x885 Int)) Int (ite (and x980 (not x109)) (x1793 x885) (x1412 x885)))
(define-fun x1916 ((x885 Int)) Int (ite (= x885 160) x247 (x1096 x885)))
(define-fun x726 ((x885 Int)) Int (ite (= 128 x885) 7 (x1916 x885)))
(define-fun x484 ((x885 Int)) Int (ite (= 800 x885) x1067 (x598 x885)))
(define-fun x996 ((x885 Int)) Int (ite (= x885 224) 1889567281 (x598 x885)))
(define-fun x52 ((x885 Int)) Int (ite (and (> (+ 32 224) x885) (<= 224 x885)) (x95 (+ 0 (- x885 224))) (x979 x885)))
(define-fun x1560 ((x885 Int)) Int (ite (and x624 x980 x800) (x52 x885) (x979 x885)))
(define-fun x966 ((x885 Int)) Int (ite (= 288 x885) x1812 (x1560 x885)))
(define-fun x1539 ((x885 Int)) Int (ite (= x885 320) 0 (x718 x885)))
(define-fun x1545 ((x885 Int)) Int (ite (= 256 x885) x240 (x718 x885)))
(define-fun x412 ((x885 Int)) Int (ite (= 320 x885) x1772 (x1545 x885)))
(define-fun x1535 ((x885 Int)) Int (ite (and x624 x39 x980) (x412 x885) (x1539 x885)))
(define-fun x1044 ((x885 Int)) Int (ite (= x885 384) x1279 (x1535 x885)))
(define-fun x1273 ((x885 Int)) Int (ite (= 800 x885) x1148 (x1044 x885)))
(define-fun x964 ((x885 Int)) Int (ite (and (not x624) x980) (x484 x885) (x1273 x885)))
(define-fun x1261 ((x885 Int)) Int (ite (= x885 768) x1757 (x964 x885)))
(define-fun x298 ((x885 Int)) Int (ite (= x885 800) 1889567281 (x1261 x885)))
(define-fun x317 ((x885 Int)) Int (ite (and (>= x885 800) (> (+ 32 800) x885)) (x796 (+ (- x885 800) 0)) (x991 x885)))
(define-fun x112 ((x885 Int)) Int (ite (= 864 x885) 0 (x1000 x885)))
(define-fun x1534 ((x885 Int)) Int (ite (= x885 928) 0 (x112 x885)))
(define-fun x1008 ((x885 Int)) Int (ite (= x885 992) 1889567281 (x603 x885)))
(define-fun x610 ((x885 Int)) Int (ite (and (> (+ 32 992) x885) (>= x885 992)) (x711 (+ (- x885 992) 0)) (x839 x885)))
(define-fun x563 ((x885 x1133)) Int (ite (and (not x1487) x1361) (x1262 x885) (x704 x885)))
(define-fun x470 ((x885 Int)) Int (ite (and x739 x1487 x1361) (x610 x885) (x839 x885)))
(define-fun x1137 ((x885 Int)) Int (ite (= x885 992) x1730 (x124 x885)))
(define-fun x489 ((x885 Int)) Int (ite (= 160 x885) x90 (x1137 x885)))
(define-fun x1679 ((x885 Int)) Int (ite (= x885 128) 16 (x489 x885)))
(define-fun x945 ((x885 Int)) Int (ite (= 1056 x885) 773487949 (x811 x885)))
(define-fun x299 ((x885 Int)) Int (ite (and (> (+ 1056 32) x885) (>= x885 1056)) (x1597 (+ (- x885 1056) 0)) (x688 x885)))
(define-fun x1337 ((x885 Int)) Int (ite (and x947 x325 x1314 x85) (x299 x885) (x688 x885)))
(define-fun x1636 ((x885 Int)) Int (ite (= x885 1024) x367 (x1337 x885)))
(define-fun x1403 ((x885 Int)) Int (ite (= 1088 x885) 1889567281 (x1636 x885)))
(define-fun x978 ((x885 Int)) Int (ite (and (> (+ 32 1088) x885) (<= 1088 x885)) (x1792 (+ 0 (- x885 1088))) (x691 x885)))
(define-fun x506 ((x885 Int)) Int (ite (and x222 x1314 x947 x325) (x978 x885) (x691 x885)))
(define-fun x25 ((x885 Int)) Int (ite (= x885 768) x790 (x1768 x885)))
(define-fun x1311 ((x885 Int)) Int (ite (= 864 x885) x418 (x25 x885)))
(define-fun x838 ((x885 Int)) Int (ite (= x885 224) x1267 (x1311 x885)))
(define-fun x1213 ((x885 Int)) Int (ite (= x885 256) x205 (x838 x885)))
(define-fun x1416 ((x885 Int)) Int (ite (= x885 160) x120 (x1213 x885)))
(define-fun x175 ((x885 Int)) Int (ite (= 128 x885) 16 (x1416 x885)))
(define-fun x1441 ((x885 Int)) Int (ite (= x885 160) x139 (x260 x885)))
(define-fun x191 ((x885 Int)) Int (ite (= 128 x885) 16 (x1441 x885)))
(define-fun x1222 ((x885 Int)) Int (ite (= x885 160) x1154 (x1281 x885)))
(define-fun x1587 ((x885 Int)) Int (ite (= x885 128) 16 (x1222 x885)))
(define-fun x723 ((x885 Int)) Int (ite (and (not x652) x757 x325 x947 x1309 x1314) (x1281 x885) (ite (and x652 x1309 x325 x947 x1314) (x260 x885) (x1587 x885))))
(define-fun x1421 ((x885 Int)) Int (ite (= 160 x885) x387 (x723 x885)))
(define-fun x1343 ((x885 Int)) Int (ite (= x885 128) 16 (x1421 x885)))
(define-fun x1031 ((x885 Int)) Int (ite (= 160 x885) x1064 (x1343 x885)))
(define-fun x1271 ((x885 Int)) Int (ite (= x885 128) 16 (x1031 x885)))
(define-fun x1787 ((x885 Int)) Int (ite (and (not x1309) x947 x325 x1314) (x1768 x885) (x1271 x885)))
(define-fun x224 ((x885 Int)) Int (ite (= x885 160) x473 (x1787 x885)))
(define-fun x1259 ((x885 Int)) Int (ite (= 128 x885) 16 (x224 x885)))
(define-fun x750 ((x885 Int)) Int (ite (and x1314 x947 x325) (x1259 x885) (x811 x885)))
(define-fun x1687 ((x885 x1133)) Int (ite (= x72 x885) x1168 (x531 x885)))
(define-fun x1125 ((x885 x1133)) Int (ite (= (x1543 39) x885) x165 (x1687 x885)))
(define-fun x463 ((x885 x1133)) Int (ite (and x1309 x757 x325 x947 x1314 (not x652)) (x531 x885) (ite (and x325 x652 x947 x1314 x1309) (x531 x885) (x1125 x885))))
(define-fun x1335 ((x885 x1133)) Int (ite (= x885 x308) x46 (x463 x885)))
(define-fun x193 ((x885 x1133)) Int (ite (= x1614 x885) x217 (x1335 x885)))
(define-fun x585 ((x885 x1133)) Int (ite (= (x1543 40) x885) x1478 (x193 x885)))
(define-fun x1211 ((x885 x1133)) Int (ite (and x947 x325 x1314 (not x1309)) (x531 x885) (x585 x885)))
(define-fun x1336 ((x885 x1133)) Int (ite (= x486 x885) x1339 (x1211 x885)))
(define-fun x126 ((x885 x1133)) Int (ite (= x885 (x1543 40)) x386 (x1336 x885)))
(define-fun x1429 ((x885 x1133)) Int (ite (and x1314 x947 x325) (x126 x885) (x531 x885)))
(define-fun x1652 ((x885 Int)) Int (ite (= 896 x885) x1828 (x483 x885)))
(define-fun x1619 ((x885 Int)) Int (ite (and x983 x102) (x483 x885) (ite (and (not x947) x1314) (x124 x885) (ite (and x1361 (not x1487)) (x603 x885) (x1652 x885)))))
(define-fun x261 ((x885 x1133)) Int (ite (and x983 x102) (x1429 x885) (ite (and x1314 (not x947)) (x531 x885) (ite (and x1361 (not x1487)) (x531 x885) (x1429 x885)))))
(define-fun x487 ((x885 Int)) Int (ite (= x885 928) 1889567281 (x1619 x885)))
(define-fun x1571 ((x885 Int)) Int (ite (and (<= 928 x885) (> (+ 928 32) x885)) (x1885 (+ (- x885 928) 0)) (x7 x885)))
(define-fun x776 ((x885 Int)) Int (ite (and x430 x627) (x1571 x885) (x7 x885)))
(define-fun x882 ((x885 Int)) Int (ite (= x885 768) x214 (x332 x885)))
(define-fun x1467 ((x885 Int)) Int (ite (= x885 352) x860 (x882 x885)))
(define-fun x722 ((x885 Int)) Int (ite (= 224 x885) 1889567281 (x1467 x885)))
(define-fun x23 ((x885 Int)) Int (ite (and (< x885 (+ 32 224)) (<= 224 x885)) (x696 (+ 0 (- x885 224))) (x665 x885)))
(define-fun x1397 ((x885 Int)) Int (ite (and x346 x627 x528) (x23 x885) (x665 x885)))
(define-fun x1859 ((x885 Int)) Int (ite (= 288 x885) x1320 (x1397 x885)))
(define-fun x1492 ((x885 Int)) Int (ite (= 320 x885) 0 (x1411 x885)))
(define-fun x1420 ((x885 Int)) Int (ite (= x885 256) x1092 (x1411 x885)))
(define-fun x142 ((x885 Int)) Int (ite (= x885 320) x107 (x1420 x885)))
(define-fun x768 ((x885 Int)) Int (ite (and x755 x627 x346) (x142 x885) (x1492 x885)))
(define-fun x421 ((x885 Int)) Int (ite (= 416 x885) x1333 (x768 x885)))
(define-fun x250 ((x885 Int)) Int (ite (= x885 928) 0 (x4 x885)))
(define-fun x399 ((x885 Int)) Int (ite (= 928 x885) x1844 (x4 x885)))
(define-fun x1650 ((x885 Int)) Int (ite (and x1070 x627 x346) (x399 x885) (x250 x885)))
(define-fun x850 ((x885 Int)) Int (ite (= 736 x885) x1423 (x1650 x885)))
(define-fun x340 ((x885 Int)) Int (ite (and x627 (not x346)) (x332 x885) (x850 x885)))
(define-fun x1585 ((x885 x1133)) Int (ite (and (not x1275) x1414) (x1262 x885) (ite (and x983 x102) (x704 x885) (ite (and x1314 (not x947)) (x1262 x885) (x563 x885)))))
(define-fun x1319 ((x885 Int)) Int (ite (and x1414 (not x1275)) (x1000 x885) (x340 x885)))
(define-fun x1704 ((x885 x1133)) Int (ite (and (not x1275) x1414) (x531 x885) (x261 x885)))
(define-fun x138 ((x885 x1133)) Int (ite (= (x1543 9) x885) x1194 (x1704 x885)))
(define-fun x1592 ((x885 Int)) Int (ite (= x885 160) x247 (x1319 x885)))
(define-fun x1430 ((x885 Int)) Int (ite (= x885 128) 7 (x1592 x885)))
(define-fun x760 ((x885 x1133)) Int (ite (= x885 x706) x1386 (x138 x885)))
(define-fun x1117 ((x885 Int)) Int (ite (= x885 800) x1254 (x1430 x885)))
(define-fun x27 ((x885 Int)) Int (ite (= 224 x885) x536 (x1117 x885)))
(define-fun x1860 ((x885 Int)) Int (ite (= x885 256) x874 (x27 x885)))
(define-fun x773 ((x885 Int)) Int (ite (= 288 x885) x1631 (x1860 x885)))
(define-fun x11 ((x885 Int)) Int (ite (= x885 384) 4 (x773 x885)))
(define-fun x653 ((x885 Int)) Int (ite (and (> (+ 4 480) x885) (<= 480 x885)) (x143 (+ 0 (- x885 480))) (x707 x885)))
(define-fun x1368 ((x885 Int)) Int (ite (and x805 x478) (x653 x885) (x707 x885)))
(define-fun x315 ((x885 Int)) Int (ite (= x658 x885) x252 (x1368 x885)))
(define-fun x1146 ((x885 Int)) Int (ite (= x1893 x885) x1406 (x315 x885)))
(define-fun x1509 ((x885 Int)) Int (ite (and (< x885 (+ 32 608)) (<= 608 x885)) (x1290 (+ (- x885 608) 0)) (x1608 x885)))
(define-fun x398 ((x885 Int)) Int (ite (and x478 x1081) (x1509 x885) (x1608 x885)))
(define-fun x1688 ((x885 Int)) Int (ite (and (< x885 (+ 320 x1355)) (>= x885 320)) (x164 (+ 0 (- x885 320))) (x940 x885)))
(define-fun x559 ((x885 Int)) Int (ite (and x478 x497) (x1688 x885) (x940 x885)))
(define-fun x1447 ((x885 Int)) Int (ite (= 800 x885) x311 (x559 x885)))
(define-fun x747 ((x885 Int)) Int (ite (= 832 x885) x1815 (x1447 x885)))
(define-fun x1157 ((x885 Int)) Int (ite (= 800 x885) x1555 (x747 x885)))
(define-fun x1323 ((x885 x1133)) Int (ite (= x885 (x1543 0)) 0 (x760 x885)))
(define-fun x1291 ((x885 Int)) Int (x1737 x885))
(define-fun x1136 ((x885 Int)) Int (ite (and (< x885 (+ 28 4)) (>= x885 28)) (x1737 (+ 0 (- x885 28))) (x1849 x885)))
(define-fun x1808 ((x885 Int)) Int (ite (= 640 x885) x540 (x1136 x885)))
(define-fun x1499 ((x885 Int)) Int (ite (= 672 x885) x202 (x1808 x885)))
(define-fun x185 ((x885 Int)) Int (ite (= 704 x885) 1 (x1499 x885)))
(define-fun x425 ((x885 Int)) Int (ite (= x885 160) x202 (x1345 x885)))
(define-fun x526 ((x885 Int)) Int (ite (= 128 x885) 7 (x425 x885)))
(define-fun x1547 ((x885 Int)) Int (ite (= x885 736) x447 (x526 x885)))
(define-fun x1758 ((x885 Int)) Int (ite (and (not x1283) x1312 (not x1603)) (x1345 x885) (x1547 x885)))
(define-fun x1015 ((x885 Int)) Int (ite (= x885 160) x202 (x1758 x885)))
(define-fun x24 ((x885 Int)) Int (ite (= x885 128) 7 (x1015 x885)))
(define-fun x1238 ((x885 Int)) Int (ite (= x885 800) x569 (x717 x885)))
(define-fun x766 ((x885 Int)) Int (ite (= 224 x885) 1889567281 (x717 x885)))
(define-fun x436 ((x885 Int)) Int (ite (and (< x885 (+ 32 224)) (<= 224 x885)) (x744 (+ (- x885 224) 0)) (x1562 x885)))
(define-fun x1024 ((x885 Int)) Int (ite (and x1239 x552 x854) (x436 x885) (x1562 x885)))
(define-fun x1832 ((x885 Int)) Int (ite (= x885 288) x1078 (x1024 x885)))
(define-fun x1400 ((x885 Int)) Int (ite (= 256 x885) x841 (x318 x885)))
(define-fun x1052 ((x885 Int)) Int (ite (= 320 x885) x1765 (x1400 x885)))
(define-fun x1829 ((x885 Int)) Int (ite (= 320 x885) 0 (x318 x885)))
(define-fun x278 ((x885 Int)) Int (ite (and x911 (not x1367)) (x1052 x885) (x1829 x885)))
(define-fun x858 ((x885 Int)) Int (ite (= x885 384) x320 (x278 x885)))
(define-fun x1103 ((x885 Int)) Int (ite (= x885 800) x36 (x858 x885)))
(define-fun x1318 ((x885 Int)) Int (ite (and x891 (not x342)) (x1103 x885) (x1238 x885)))
(define-fun x1105 ((x885 Int)) Int (ite (= x885 768) x1043 (x1318 x885)))
(define-fun x1381 ((x885 Int)) Int (ite (= 800 x885) 1889567281 (x1105 x885)))
(define-fun x548 ((x885 Int)) Int (ite (and (>= x885 800) (< x885 (+ 800 32))) (x1090 (+ (- x885 800) 0)) (x21 x885)))
(define-fun x816 ((x885 Int)) Int (ite (= 864 x885) 0 (x1462 x885)))
(define-fun x1662 ((x885 Int)) Int (ite (= x885 928) 0 (x816 x885)))
(define-fun x1135 ((x885 Int)) Int (ite (= 992 x885) 1889567281 (x182 x885)))
(define-fun x1195 ((x885 Int)) Int (ite (and (> (+ 992 32) x885) (<= 992 x885)) (x466 (+ 0 (- x885 992))) (x1141 x885)))
(define-fun x1611 ((x885 x1133)) Int (ite (and x661 (not x1189)) (x875 x885) (x1527 x885)))
(define-fun x1171 ((x885 Int)) Int (ite (and x1189 x1559 x661) (x1195 x885) (x1141 x885)))
(define-fun x868 ((x885 Int)) Int (ite (= 992 x885) x366 (x534 x885)))
(define-fun x844 ((x885 Int)) Int (ite (= x885 160) x301 (x868 x885)))
(define-fun x1685 ((x885 Int)) Int (ite (= x885 128) 16 (x844 x885)))
(define-fun x812 ((x885 Int)) Int (ite (= 1056 x885) 773487949 (x282 x885)))
(define-fun x532 ((x885 Int)) Int (ite (and (<= 1056 x885) (< x885 (+ 1056 32))) (x1683 (+ 0 (- x885 1056))) (x493 x885)))
(define-fun x283 ((x885 Int)) Int (ite (and x1315 x701 x637) (x532 x885) (x493 x885)))
(define-fun x125 ((x885 Int)) Int (ite (= x885 1024) x1233 (x283 x885)))
(define-fun x763 ((x885 Int)) Int (ite (= 1088 x885) 1889567281 (x125 x885)))
(define-fun x1445 ((x885 Int)) Int (ite (and (>= x885 1088) (< x885 (+ 1088 32))) (x1073 (+ (- x885 1088) 0)) (x611 x885)))
(define-fun x1225 ((x885 Int)) Int (ite (and x403 x957 x424) (x1445 x885) (x611 x885)))
(define-fun x441 ((x885 Int)) Int (ite (= 768 x885) x1375 (x365 x885)))
(define-fun x772 ((x885 Int)) Int (ite (= x885 864) x1282 (x441 x885)))
(define-fun x720 ((x885 Int)) Int (ite (= 224 x885) x243 (x772 x885)))
(define-fun x1054 ((x885 Int)) Int (ite (= x885 256) x1012 (x720 x885)))
(define-fun x948 ((x885 Int)) Int (ite (= 160 x885) x522 (x1054 x885)))
(define-fun x76 ((x885 Int)) Int (ite (= 128 x885) 16 (x948 x885)))
(define-fun x1803 ((x885 x1133)) Int (ite (= x885 x1065) x514 (x1322 x885)))
(define-fun x1810 ((x885 x1133)) Int (ite (= (x1543 39) x885) x1379 (x1803 x885)))
(define-fun x1747 ((x885 x1133)) Int (ite (and x1520 x379) (x1322 x885) (ite (and x1677 x41) (x1322 x885) (x1810 x885))))
(define-fun x96 ((x885 x1133)) Int (ite (= x422 x885) x1899 (x1747 x885)))
(define-fun x847 ((x885 x1133)) Int (ite (= x885 x774) x862 (x96 x885)))
(define-fun x1599 ((x885 x1133)) Int (ite (= (x1543 40) x885) x571 (x847 x885)))
(define-fun x1706 ((x885 x1133)) Int (ite (and x1193 (not x1140)) (x1322 x885) (x1599 x885)))
(define-fun x601 ((x885 Int)) Int (ite (= x885 160) x1098 (x306 x885)))
(define-fun x347 ((x885 Int)) Int (ite (= 128 x885) 16 (x601 x885)))
(define-fun x649 ((x885 Int)) Int (ite (= x885 160) x1288 (x1807 x885)))
(define-fun x190 ((x885 Int)) Int (ite (= x885 128) 16 (x649 x885)))
(define-fun x287 ((x885 Int)) Int (ite (and x1520 x379) (x1807 x885) (ite (and x1677 x41) (x306 x885) (x190 x885))))
(define-fun x1786 ((x885 Int)) Int (ite (= x885 160) x1243 (x287 x885)))
(define-fun x1077 ((x885 Int)) Int (ite (= 128 x885) 16 (x1786 x885)))
(define-fun x329 ((x885 Int)) Int (ite (= x885 160) x188 (x1077 x885)))
(define-fun x253 ((x885 Int)) Int (ite (= x885 128) 16 (x329 x885)))
(define-fun x806 ((x885 Int)) Int (ite (and x1193 (not x1140)) (x365 x885) (x253 x885)))
(define-fun x512 ((x885 Int)) Int (ite (= x885 160) x1618 (x806 x885)))
(define-fun x1363 ((x885 Int)) Int (ite (= x885 128) 16 (x512 x885)))
(define-fun x44 ((x885 x1133)) Int (ite (= x219 x885) x1366 (x1706 x885)))
(define-fun x445 ((x885 x1133)) Int (ite (= x885 (x1543 40)) x1655 (x44 x885)))
(define-fun x1822 ((x885 Int)) Int (ite (and x965 (not x166)) (x1363 x885) (x282 x885)))
(define-fun x848 ((x885 x1133)) Int (ite (and x965 (not x166)) (x445 x885) (x1322 x885)))
(define-fun x954 ((x885 Int)) Int (ite (= x885 896) x1820 (x582 x885)))
(define-fun x171 ((x885 Int)) Int (ite (and x511 x350) (x582 x885) (ite (and (not x961) x705) (x534 x885) (ite (and x661 (not x1189)) (x182 x885) (x954 x885)))))
(define-fun x1330 ((x885 x1133)) Int (ite (and x511 x350) (x848 x885) (ite (and (not x961) x705) (x1322 x885) (ite (and x661 (not x1189)) (x1322 x885) (x848 x885)))))
(define-fun x993 ((x885 Int)) Int (ite (= x885 928) 1889567281 (x171 x885)))
(define-fun x1166 ((x885 Int)) Int (ite (and (>= x885 928) (> (+ 32 928) x885)) (x221 (+ (- x885 928) 0)) (x950 x885)))
(define-fun x836 ((x885 Int)) Int (ite (and x358 x880) (x1166 x885) (x950 x885)))
(define-fun x510 ((x885 Int)) Int (ite (= 768 x885) x1913 (x271 x885)))
(define-fun x549 ((x885 Int)) Int (ite (= x885 352) x1678 (x510 x885)))
(define-fun x462 ((x885 Int)) Int (ite (= 224 x885) 1889567281 (x549 x885)))
(define-fun x539 ((x885 Int)) Int (ite (and (>= x885 224) (> (+ 32 224) x885)) (x1410 (+ (- x885 224) 0)) (x1452 x885)))
(define-fun x1556 ((x885 Int)) Int (ite (and x663 x1609 (not x842)) (x539 x885) (x1452 x885)))
(define-fun x1443 ((x885 Int)) Int (ite (= x885 288) x588 (x1556 x885)))
(define-fun x1566 ((x885 Int)) Int (ite (= 256 x885) x155 (x249 x885)))
(define-fun x869 ((x885 Int)) Int (ite (= 320 x885) x1162 (x1566 x885)))
(define-fun x668 ((x885 Int)) Int (ite (= x885 320) 0 (x249 x885)))
(define-fun x679 ((x885 Int)) Int (ite (and (not x613) x152) (x869 x885) (x668 x885)))
(define-fun x1300 ((x885 Int)) Int (ite (= x885 416) x716 (x679 x885)))
(define-fun x1801 ((x885 Int)) Int (ite (= x885 928) x384 (x939 x885)))
(define-fun x1508 ((x885 Int)) Int (ite (= x885 928) 0 (x939 x885)))
(define-fun x1809 ((x885 Int)) Int (ite (and x1029 (not x1902)) (x1801 x885) (x1508 x885)))
(define-fun x1691 ((x885 Int)) Int (ite (= x885 736) x1558 (x1809 x885)))
(define-fun x1263 ((x885 Int)) Int (ite (and (not x2) x1719) (x1691 x885) (x271 x885)))
(define-fun x133 ((x885 x1133)) Int (ite (and x1699 (not x1188)) (x1330 x885) (x1322 x885)))
(define-fun x593 ((x885 x1133)) Int (ite (and x1699 (not x1188)) (ite (and x511 x350) (x1527 x885) (ite (and x705 (not x961)) (x875 x885) (x1611 x885))) (x875 x885)))
(define-fun x226 ((x885 Int)) Int (ite (and (not x1188) x1699) (x1263 x885) (x1462 x885)))
(define-fun x121 ((x885 x1133)) Int (ite (= x885 (x1543 9)) x642 (x133 x885)))
(define-fun x533 ((x885 Int)) Int (ite (= 160 x885) x202 (x226 x885)))
(define-fun x262 ((x885 Int)) Int (ite (= x885 128) 7 (x533 x885)))
(define-fun x291 ((x885 x1133)) Int (ite (= x1783 x885) x303 (x121 x885)))
(define-fun x1145 ((x885 Int)) Int (ite (= 800 x885) x1769 (x262 x885)))
(define-fun x69 ((x885 Int)) Int (ite (= x885 224) x1501 (x1145 x885)))
(define-fun x1051 ((x885 Int)) Int (ite (= x885 256) x1217 (x69 x885)))
(define-fun x352 ((x885 Int)) Int (ite (= 288 x885) x981 (x1051 x885)))
(define-fun x530 ((x885 Int)) Int (ite (= 384 x885) 4 (x352 x885)))
(define-fun x1773 ((x885 Int)) Int (ite (and (< x885 (+ 4 480)) (>= x885 480)) (x644 (+ 0 (- x885 480))) (x1206 x885)))
(define-fun x1745 ((x885 Int)) Int (ite (and x1453 (not x1359) x1425) (x1773 x885) (x1206 x885)))
(define-fun x197 ((x885 Int)) Int (ite (= x932 x885) x1731 (x1745 x885)))
(define-fun x97 ((x885 Int)) Int (ite (= x629 x885) x1550 (x197 x885)))
(define-fun x592 ((x885 Int)) Int (ite (and (>= x885 608) (> (+ 32 608) x885)) (x30 (+ (- x885 608) 0)) (x230 x885)))
(define-fun x618 ((x885 Int)) Int (ite (and x1147 x1453 (not x1359)) (x592 x885) (x230 x885)))
(define-fun x241 ((x885 Int)) Int (ite (and (> (+ 320 x1257) x885) (<= 320 x885)) (x1219 (+ (- x885 320) 0)) (x1183 x885)))
(define-fun x1396 ((x885 Int)) Int (ite (and x1651 x820 x650) (x241 x885) (x1183 x885)))
(define-fun x1549 ((x885 Int)) Int (ite (= 800 x885) x1354 (x1396 x885)))
(define-fun x972 ((x885 Int)) Int (ite (= 832 x885) x830 (x1549 x885)))
(define-fun x326 ((x885 Int)) Int (ite (= 800 x885) x606 (x972 x885)))
(define-fun x1586 ((x156 Int)) Bool (=> (and (not (= 1888058147 x156)) (not (= x156 464926286)) (not (= x156 3065339685)) (not (= x156 1851080549)) (not (= x156 3092021830)) (not (= x156 2681579215)) (not (= 2780307423 x156)) (not (= x156 3504541104)) (not (= x156 3963136098)) (not (= x156 1020253707)) (not (= 157198259 x156)) (not (= x156 2757214935)) (not (= 1461501637330902918203684832716283019655932542975 x156)) (not (= 2052391781 x156)) (not (= 773487949 x156)) (not (= 31576340 x156)) (not (= 2209625481 x156)) (not (= 1401663147 x156)) (not (= x156 596573372)) (not (= x156 1000000000000000000)) (not (= x156 2835717307)) (not (= x156 274184521717934524641157099916833587200)) (not (= x156 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2484372501 x156)) (not (= x156 629314576)) (not (= 3184006219 x156)) (not (= 1977493762 x156)) (not (= 961581905 x156)) (not (= x156 4294967296)) (not (= 3296657447 x156)) (not (= x156 2869116585)) (not (= x156 3567397854)) (not (= 599290589 x156)) (> x156 10000) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x156)) (not (= 348537858 x156)) (not (= x156 2316151882)) (not (= 1889567281 x156)) (not (= 4267106866 x156))) (not ((_ is x1543) (x721 x156)))))
(assert (= (x519 320) (x808 320)))
(assert (x1480 x992))
(assert (= (x686 128) (x1794 (x721 (x686 128)))))
(assert (x1480 x119))
(assert (= (x1770 736) (x1272 736)))
(assert (x1480 x975))
(assert (= (x1443 704) (x249 704)))
(assert (= (ite (and x225 x674) (x548 672) (x21 672)) (x1462 672)))
(assert (= (x1322 (x1543 44)) (ite (= (x1543 44) (x1543 0)) 1 (x1323 (x1543 44)))))
(assert (= (x950 768) (x993 768)))
(assert (= (x576 352) x475))
(assert (= (x1606 768) (x1450 768)))
(assert (x1480 x140))
(assert (x1480 x1083))
(assert (= (x1679 704) (x811 704)))
(assert (= 629314576 (x1794 (x1543 629314576))))
(assert (= (x519 704) (x808 704)))
(assert (= (x175 224) (x260 224)))
(assert (= (and x1651 x650) x1846))
(assert (= (ite (and (not x166) x965) (ite (and x1315 x701 x637) (x1664 (x721 x1164)) (x875 (x721 x1164))) (x875 (x721 x1164))) (x1527 (x721 x1164))))
(assert (= (=> (and (= x1797 (x1396 320)) (= (> x1797 0) x437)) (and (=> (not x437) x357) (=> x437 x313))) x192))
(assert (x1480 x491))
(assert (x1480 x863))
(assert (= (x1904 672) (x889 672)))
(assert (= (x76 160) (x1794 (x721 (x76 160)))))
(assert (= (x1300 864) (x939 864)))
(assert (x1480 x546))
(assert (= x1561 x1896))
(assert (= (x506 896) (x1768 896)))
(assert (= (x1794 (x1543 2209625481)) 2209625481))
(assert (x1480 x1639))
(assert (= (x1281 640) (x191 640)))
(assert (= (x421 320) (x4 320)))
(assert (x1480 x1005))
(assert (= (x721 157198259) (x1543 157198259)))
(assert (x1480 x728))
(assert (x1480 x1043))
(assert (= (x170 160) (x1794 (x721 (x170 160)))))
(assert (x1480 x1352))
(assert (= (+ (x1794 x742) 6) (x1794 (x1777 x742 6))))
(assert (= x1123 (or (and x1035 (not x764)) (and x1677 x41) (and x379 x1520))))
(assert (= (x1679 928) (x811 928)))
(assert (x1480 x377))
(assert (= (x576 320) (x265 320)))
(assert (=> (<= (x191 128) 10000) (= (x721 (x191 128)) (x1543 (x191 128)))))
(assert (= (x1017 928) (x1497 928)))
(assert (= (x1485 640) (x1742 640)))
(assert (= (x1411 864) (x1859 864)))
(assert (x1480 x257))
(assert (x1480 x890))
(assert (= (x691 352) (x1403 352)))
(assert (x1480 x1531))
(assert (= (x993 736) (x950 736)))
(assert (= (x298 320) (x991 320)))
(assert (= (+ (x1794 x62) 6) (x1794 (x1777 x62 6))))
(assert (x1480 x632))
(assert (x1480 x1293))
(assert (= (x519 928) (x808 928)))
(assert (= (x1768 928) (x506 928)))
(assert (= (and x1510 x1310) x661))
(assert (= (x190 160) (x1794 (x721 (x190 160)))))
(assert (= (x1272 704) (x1770 704)))
(assert (= (x1183 768) (x618 768)))
(assert (= (x531 x579) (ite (= (x1543 0) x579) 1 (x59 x579))))
(assert (x1480 x1580))
(assert (= x136 (x1794 (x721 x136))))
(assert (= (x1794 (x721 (x1259 128))) (x1259 128)))
(assert (= (x487 672) (x7 672)))
(assert (= (x483 704) (x750 704)))
(assert (x1586 (x1208 128)))
(assert (= (x1272 320) (x1770 320)))
(assert (= (x686 672) (x1469 672)))
(assert (= (x544 320) (x1302 320)))
(assert (= (x1403 864) (x691 864)))
(assert (x1480 x236))
(assert (= (x763 768) (x611 768)))
(assert (= (x839 640) (x1008 640)))
(assert (x1480 x609))
(assert (= (x230 320) (x97 320)))
(assert (x1480 x195))
(assert (= (x1541 768) (x537 768)))
(assert (= (x307 352) (x1210 352)))
(assert (x1480 x504))
(assert (=> (>= 10000 x814) (= (x1543 x814) (x721 x814))))
(assert (x1586 (x347 160)))
(assert (x1480 x496))
(assert (= (x1794 (x721 x1299)) x1299))
(assert (x1480 x202))
(assert (x1480 x320))
(assert (= (x808 640) (x519 640)))
(assert (= (and (not x983) x102) x1476))
(assert (= (x175 160) (x1794 (x721 (x175 160)))))
(assert (= (x966 352) (x718 352)))
(assert (x1480 x765))
(assert (x1480 x554))
(assert (= (x170 704) (x149 704)))
(assert (= x1896 (=> (and (= (or x1715 x1870) x145) (or (and (= (or x1241 x374) x480) (> x1049 0) (= (x332 896) x214) (= x771 (x261 (x1543 44))) (= (x99 (+ x1901 x1819)) x860) (= (x1411 224) x778) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x16 x1))) (not (< x108 x746)) (= (div x1723 x168) x331) (not (< x1034 x752)) (= x755 (> 1000000000000000000 x778)) (= x528 (< 0 x1321)) (= (x285 (- x273 x852)) x168) (= (x882 864) x1901) (= x746 (x850 736)) (= (x261 (x1543 41)) x852) (= x667 (ite x480 1 0)) (= (x261 (x1543 40)) x1) (or (and (not x528) (= x1049 x1321)) (and x528 (= 1 x1049) (< x1455 4294967296))) (= (x1650 928) x1423) (= (x285 (- x1034 x752)) x1333) (or (and (= (mod (* x604 x910) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x172) (not (= 0 x1417)) (not (= x1160 0)) (= (or x1617 x472) x1729) (= x1417 (ite x1729 1 0)) (= (div x172 x1160) x1844) (= x910 (x261 (x1543 9))) (= (x4 352) x604) (= (div x172 x604) x1713) x1070 (= (= x1713 x910) x1617) (= (x4 384) x1160) (= (= x604 0) x472)) (not x1070)) (= (x4 384) x1776) (= (= x168 0) x1241) (not (< x64 x852)) (or (and (= (div x1106 x1834) x179) (= x1834 (x1420 224)) (not (> x922 x1258)) (not (= 0 x1341)) (= (ite x703 1 0) x1341) (= x703 (or x516 x614)) (= x1106 (mod (* x1667 x1834) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x922 (div x1106 1000000000000000000)) (= (x1420 256) x1667) (= (= x1667 x179) x614) (= x516 (= x1834 0)) (= (x261 (x1543 43)) x1092) (= x107 (x285 (- x1258 x922))) (= (x1420 256) x1258) x755) (not x755)) (= x752 (x768 320)) (= (= x771 x331) x374) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1901 x1819))) (> x1455 31) (= (> x1776 0) x1070) (= (x1859 288) x1034) (= x1320 (x99 (+ x16 x1))) x346 (not (= x667 0)) (= (mod (* x771 x168) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1723) (= x16 (x1397 224)) (= (x882 768) x1819) (= (x850 640) x108) (= x312 (x421 416))) (not x346)) (= x931 (x776 928)) (= (x340 864) x1524) (not (> x607 x1372)) (= (x340 768) x391) (= x346 (< x1733 x385)) (> x748 0) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x391 x1524))) (= x45 (mod (* x1624 x1675) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x45 x1624) x846) (not (= 0 x956)) (= x1624 (x340 704)) (= x1733 (x332 896)) (< 31 x1840) (= (div x45 10000) x1372) (= x1870 (= x1675 x846)) (= (< 0 x495) x430) (= x385 (x332 768)) (or (and (> 4294967296 x1840) (= x748 1) x430) (and (= x495 x748) (not x430))) (= (x340 864) x607) (= (= 0 x1624) x1715) (= (ite x145 1 0) x956) (= x1675 (x99 (+ x1524 x391)))) x1917)))
(assert (= x931 (x332 896)))
(assert (= (ite (= x615 (x1543 0)) 1 (x59 x615)) (x63 x615)))
(assert (= (x470 672) (x124 672)))
(assert (= (x170 928) (x149 928)))
(assert (x1480 x1245))
(assert (x1480 x248))
(assert (= (x1008 352) (x839 352)))
(assert (= (x453 352) (x561 352)))
(assert (x1480 x387))
(assert (x1480 x1754))
(assert (= (x1365 160) (x1794 (x721 (x1365 160)))))
(assert (= (x1793 704) (x1338 704)))
(assert (= (x750 320) (x483 320)))
(assert (x1480 x337))
(assert (= (x707 288) (x11 288)))
(assert (= (x282 736) (x1685 736)))
(assert (x1480 x1540))
(assert (x1480 x635))
(assert (x1480 x92))
(assert (= (x7 768) (x487 768)))
(assert (x1480 x922))
(assert (= (x1794 (x1777 x1234 2)) (+ 2 (x1794 x1234))))
(assert (= x819 (=> (and (= (x1566 224) x515) (= x1039 (x1566 256)) (= x176 (= (ite x37 1 0) 0)) (= (mod (* x515 x1226) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1522) (= x1226 (x1566 256)) (= x155 (x1330 (x1543 43))) (= x37 (or x616 x1641)) (= x1641 (= x1226 x286)) (= x286 (div x1522 x515)) (= x616 (= 0 x515))) (and (=> x176 x35) (=> (not x176) x158)))))
(assert (x1586 (x1077 160)))
(assert (x1586 (x1679 128)))
(assert (= (x306 256) (x76 256)))
(assert (x1480 x476))
(assert (x1480 x5))
(assert (x1480 x1573))
(assert (x1480 x1505))
(assert (= (x808 352) (x519 352)))
(assert (x1480 x1256))
(assert (x1480 x1217))
(assert (= (x1017 736) (x1497 736)))
(assert (x1480 x449))
(assert (x1480 x1839))
(assert (x1480 x1046))
(assert (x1480 x804))
(assert (x1480 x1640))
(assert (= (x1662 768) (x182 768)))
(assert (= (x537 352) (x1541 352)))
(assert (=> (<= (x262 128) 10000) (= (x1543 (x262 128)) (x721 (x262 128)))))
(assert (x1480 x1438))
(assert (= (x249 640) (x1443 640)))
(assert (x1480 x799))
(assert (x1480 x209))
(assert (x1480 x1299))
(assert (= (x1208 128) (x1794 (x721 (x1208 128)))))
(assert (= (=> (= (> x884 0) x737) (and (=> x737 x1774) (=> (not x737) x35))) x907))
(assert (= (x97 224) (x230 224)))
(assert (= (x1615 352) (x835 352)))
(assert (x1480 x1563))
(assert (x1480 x384))
(assert (x1480 x735))
(assert (= (x582 320) (x1822 320)))
(assert (x1480 x937))
(assert (x1480 x1521))
(assert (x1480 x465))
(assert (= (x318 224) x1398))
(assert (x1480 x896))
(assert (= (x1403 736) (x691 736)))
(assert (= (x1439 352) (x1152 352)))
(assert (= (x582 352) (x1822 352)))
(assert (= (x835 256) (x1615 256)))
(assert (= x1190 (and x1187 (not x40))))
(assert (x1480 x1326))
(assert (= (x812 672) (x493 672)))
(assert (x1586 (x1259 128)))
(assert (= (x1450 224) (x1606 224)))
(assert (= (x718 736) (x966 736)))
(assert (x1480 x1249))
(assert (=> (<= (x1615 160) 10000) (= (x1543 (x1615 160)) (x721 (x1615 160)))))
(assert (= (x253 160) (x1794 (x721 (x253 160)))))
(assert (x1480 x393))
(assert (= (x21 768) (x1381 768)))
(assert (x1480 x370))
(assert (= (or x1557 (and x1370 (not x300))) x980))
(assert (= (x598 352) x1811))
(assert (= (x1685 672) (x282 672)))
(assert (x1480 x814))
(assert (= (x688 320) (x945 320)))
(assert (x1480 x513))
(assert (x1480 x725))
(assert (= (x1322 (x1543 40)) (ite (= (x1543 40) (x1543 0)) 1 (x1323 (x1543 40)))))
(assert (x1480 x1205))
(assert (= (x1462 352) (ite (and x674 x225) (x548 352) (x21 352))))
(assert (= x1294 (x1794 (x721 x1294))))
(assert (= (x812 768) (x493 768)))
(assert (= (=> (and (= (> 1000000000000000000 x1087) x1581) (= (x249 224) x1087)) (and (=> (not x1581) x181) (=> x1581 x819))) x1673))
(assert (= (and x1277 x813) x414))
(assert (x1480 x1098))
(assert (x1480 x1630))
(assert (= x313 (=> (and (= (x1396 320) x1413) (= (> (x817 x500 x977) 0) x959) (= x500 (x1396 352)) (= (mod (* x1883 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x977) (= x1883 (x285 (- 32 x1413)))) (and (=> x959 x357) (=> (not x959) x35)))))
(assert (x1480 x1502))
(assert (= (x776 672) (x332 672)))
(assert (x1586 (x76 128)))
(assert (= x86 (and (not x1407) x1612)))
(assert (= (x306 768) (x76 768)))
(assert (= (x1403 640) (x691 640)))
(assert (and (= 45671926166590716193865151022383844364247891968 (x1118 2 155)) (= 696898287454081973172991196020261297061888 (x1118 2 139)) (= (x1118 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x1118 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 140737488355328 (x1118 2 47)) (= 4611686018427387904 (x1118 2 62)) (= (x1118 2 1) 2) (= 18889465931478580854784 (x1118 2 74)) (= 17179869184 (x1118 2 34)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x1118 2 227)) (= (x1118 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x1118 2 128) 340282366920938463463374607431768211456) (= (x1118 2 84) 19342813113834066795298816) (= 4194304 (x1118 2 22)) (= (x1118 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x1118 2 176) 95780971304118053647396689196894323976171195136475136) (= 618970019642690137449562112 (x1118 2 89)) (= (x1118 2 45) 35184372088832) (= (x1118 2 98) 316912650057057350374175801344) (= (x1118 2 124) 21267647932558653966460912964485513216) (= (x1118 2 37) 137438953472) (= 1532495540865888858358347027150309183618739122183602176 (x1118 2 180)) (= (x1118 2 86) 77371252455336267181195264) (= 75557863725914323419136 (x1118 2 76)) (= 6427752177035961102167848369364650410088811975131171341205504 (x1118 2 202)) (= (x1118 2 8) 256) (= (x1118 2 165) 46768052394588893382517914646921056628989841375232) (= (x1118 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x1118 2 172) 5986310706507378352962293074805895248510699696029696) (= 324518553658426726783156020576256 (x1118 2 108)) (= 309485009821345068724781056 (x1118 2 88)) (= (x1118 2 136) 87112285931760246646623899502532662132736) (= 162259276829213363391578010288128 (x1118 2 107)) (= 23945242826029513411849172299223580994042798784118784 (x1118 2 174)) (= 36028797018963968 (x1118 2 55)) (= (x1118 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x1118 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 72057594037927936 (x1118 2 56)) (= 576460752303423488 (x1118 2 59)) (= 10141204801825835211973625643008 (x1118 2 103)) (= 187072209578355573530071658587684226515959365500928 (x1118 2 167)) (= 8796093022208 (x1118 2 43)) (= (x1118 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x1118 2 109) 649037107316853453566312041152512) (= (x1118 2 18) 262144) (= 748288838313422294120286634350736906063837462003712 (x1118 2 169)) (= (x1118 2 60) 1152921504606846976) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x1118 2 228)) (= 2048 (x1118 2 11)) (= (x1118 2 81) 2417851639229258349412352) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x1118 2 246)) (= (x1118 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 562949953421312 (x1118 2 49)) (= (x1118 2 52) 4503599627370496) (= 144115188075855872 (x1118 2 57)) (= 83076749736557242056487941267521536 (x1118 2 116)) (= 302231454903657293676544 (x1118 2 78)) (= (x1118 2 32) 4294967296) (= 1073741824 (x1118 2 30)) (= (x1118 2 51) 2251799813685248) (= (x1118 2 97) 158456325028528675187087900672) (= (x1118 2 10) 1024) (= (x1118 2 17) 131072) (= 85070591730234615865843651857942052864 (x1118 2 126)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x1118 2 216)) (= (x1118 2 4) 16) (= 2993155353253689176481146537402947624255349848014848 (x1118 2 171)) (= 365375409332725729550921208179070754913983135744 (x1118 2 158)) (= (x1118 2 179) 766247770432944429179173513575154591809369561091801088) (= (x1118 2 27) 134217728) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x1118 2 237)) (= 2305843009213693952 (x1118 2 61)) (= 22300745198530623141535718272648361505980416 (x1118 2 144)) (= (x1118 2 14) 16384) (= 11150372599265311570767859136324180752990208 (x1118 2 143)) (= 295147905179352825856 (x1118 2 68)) (= 43556142965880123323311949751266331066368 (x1118 2 135)) (= (x1118 2 188) 392318858461667547739736838950479151006397215279002157056) (= 22835963083295358096932575511191922182123945984 (x1118 2 154)) (= (x1118 2 71) 2361183241434822606848) (= (x1118 2 106) 81129638414606681695789005144064) (= (x1118 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 9007199254740992 (x1118 2 53)) (= (x1118 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x1118 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x1118 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 67108864 (x1118 2 26)) (= 147573952589676412928 (x1118 2 67)) (= (x1118 2 28) 268435456) (= (x1118 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 1645504557321206042154969182557350504982735865633579863348609024 (x1118 2 210)) (= (x1118 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 10633823966279326983230456482242756608 (x1118 2 123)) (= (x1118 2 13) 8192) (= (x1118 2 111) 2596148429267413814265248164610048) (= (x1118 2 0) 1) (= (x1118 2 31) 2147483648) (= 102844034832575377634685573909834406561420991602098741459288064 (x1118 2 206)) (= 1237940039285380274899124224 (x1118 2 90)) (= (x1118 2 15) 32768) (= (x1118 2 50) 1125899906842624) (= (x1118 2 148) 356811923176489970264571492362373784095686656) (= 205688069665150755269371147819668813122841983204197482918576128 (x1118 2 207)) (= 44601490397061246283071436545296723011960832 (x1118 2 145)) (= (x1118 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x1118 2 65) 36893488147419103232) (= (x1118 2 112) 5192296858534827628530496329220096) (= 170141183460469231731687303715884105728 (x1118 2 127)) (= (x1118 2 46) 70368744177664) (= 1569275433846670190958947355801916604025588861116008628224 (x1118 2 190)) (= (x1118 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x1118 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x1118 2 226)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x1118 2 219)) (= 41538374868278621028243970633760768 (x1118 2 115)) (= (x1118 2 104) 20282409603651670423947251286016) (= (x1118 2 101) 2535301200456458802993406410752) (= 4096 (x1118 2 12)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1118 2 256)) (= (x1118 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x1118 2 21) 2097152) (= (x1118 2 152) 5708990770823839524233143877797980545530986496) (= (x1118 2 19) 524288) (= (x1118 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 348449143727040986586495598010130648530944 (x1118 2 138)) (= (x1118 2 170) 1496577676626844588240573268701473812127674924007424) (= (x1118 2 117) 166153499473114484112975882535043072) (= (x1118 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 20769187434139310514121985316880384 (x1118 2 114)) (= (x1118 2 66) 73786976294838206464) (= 47890485652059026823698344598447161988085597568237568 (x1118 2 175)) (= (x1118 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 17592186044416 (x1118 2 44)) (= (x1118 2 85) 38685626227668133590597632) (= (x1118 2 140) 1393796574908163946345982392040522594123776) (= (x1118 2 173) 11972621413014756705924586149611790497021399392059392) (= 64 (x1118 2 6)) (= 784637716923335095479473677900958302012794430558004314112 (x1118 2 189)) (= 664613997892457936451903530140172288 (x1118 2 119)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x1118 2 245)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x1118 2 255)) (= (x1118 2 178) 383123885216472214589586756787577295904684780545900544) (= 2475880078570760549798248448 (x1118 2 91)) (= (x1118 2 79) 604462909807314587353088) (= 411376139330301510538742295639337626245683966408394965837152256 (x1118 2 208)) (= 5070602400912917605986812821504 (x1118 2 102)) (= (x1118 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 288230376151711744 (x1118 2 58)) (= (x1118 2 160) 1461501637330902918203684832716283019655932542976) (= (x1118 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 42535295865117307932921825928971026432 (x1118 2 125)) (= (x1118 2 186) 98079714615416886934934209737619787751599303819750539264) (= 1298074214633706907132624082305024 (x1118 2 110)) (= 512 (x1118 2 9)) (= 10889035741470030830827987437816582766592 (x1118 2 133)) (= 2787593149816327892691964784081045188247552 (x1118 2 141)) (= 91343852333181432387730302044767688728495783936 (x1118 2 156)) (= (x1118 2 87) 154742504910672534362390528) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x1118 2 251)) (= (x1118 2 48) 281474976710656) (= 421249166674228746791672110734681729275580381602196445017243910144 (x1118 2 218)) (= (x1118 2 105) 40564819207303340847894502572032) (= 19807040628566084398385987584 (x1118 2 94)) (= (x1118 2 64) 18446744073709551616) (= 5444517870735015415413993718908291383296 (x1118 2 132)) (= (x1118 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x1118 2 120) 1329227995784915872903807060280344576) (= 34359738368 (x1118 2 35)) (= (x1118 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 12855504354071922204335696738729300820177623950262342682411008 (x1118 2 203)) (= (x1118 2 159) 730750818665451459101842416358141509827966271488) (= 4722366482869645213696 (x1118 2 72)) (= 8589934592 (x1118 2 33)) (= (x1118 2 130) 1361129467683753853853498429727072845824) (= (x1118 2 5) 32) (= (x1118 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x1118 2 164) 23384026197294446691258957323460528314494920687616) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x1118 2 224)) (= 274877906944 (x1118 2 38)) (= (x1118 2 137) 174224571863520493293247799005065324265472) (= (x1118 2 36) 68719476736) (= 4951760157141521099596496896 (x1118 2 92)) (= (x1118 2 142) 5575186299632655785383929568162090376495104) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x1118 2 254)) (= 6277101735386680763835789423207666416102355444464034512896 (x1118 2 192)) (= (x1118 2 7) 128) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x1118 2 230)) (= (x1118 2 16) 65536) (= (x1118 2 162) 5846006549323611672814739330865132078623730171904) (= (x1118 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 2199023255552 (x1118 2 41)) (= 536870912 (x1118 2 29)) (= 89202980794122492566142873090593446023921664 (x1118 2 146)) (= 93536104789177786765035829293842113257979682750464 (x1118 2 166)) (= 33554432 (x1118 2 25)) (= 1180591620717411303424 (x1118 2 70)) (= 1267650600228229401496703205376 (x1118 2 100)) (= (x1118 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x1118 2 3) 8) (= (x1118 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 18014398509481984 (x1118 2 54)) (= 182687704666362864775460604089535377456991567872 (x1118 2 157)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x1118 2 222)) (= 4 (x1118 2 2)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x1118 2 221)) (= 374144419156711147060143317175368453031918731001856 (x1118 2 168)) (= 590295810358705651712 (x1118 2 69)) (= 39614081257132168796771975168 (x1118 2 95)) (= 11417981541647679048466287755595961091061972992 (x1118 2 153)) (= 6129982163463555433433388108601236734474956488734408704 (x1118 2 182)) (= (x1118 2 149) 713623846352979940529142984724747568191373312) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x1118 2 223)) (= (x1118 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 151115727451828646838272 (x1118 2 77)) (= (x1118 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 10384593717069655257060992658440192 (x1118 2 113)) (= (x1118 2 96) 79228162514264337593543950336) (= 332306998946228968225951765070086144 (x1118 2 118)) (= (x1118 2 163) 11692013098647223345629478661730264157247460343808) (= (x1118 2 42) 4398046511104) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x1118 2 250)) (= (x1118 2 187) 196159429230833773869868419475239575503198607639501078528) (= 9444732965739290427392 (x1118 2 73)) (= (x1118 2 24) 16777216) (= (x1118 2 181) 3064991081731777716716694054300618367237478244367204352) (= 37778931862957161709568 (x1118 2 75)) (= 1606938044258990275541962092341162602522202993782792835301376 (x1118 2 200)) (= 9903520314283042199192993792 (x1118 2 93)) (= 2658455991569831745807614120560689152 (x1118 2 121)) (= (x1118 2 177) 191561942608236107294793378393788647952342390272950272) (= (x1118 2 122) 5316911983139663491615228241121378304) (= 2854495385411919762116571938898990272765493248 (x1118 2 151)) (= 9223372036854775808 (x1118 2 63)) (= (x1118 2 99) 633825300114114700748351602688) (= 3291009114642412084309938365114701009965471731267159726697218048 (x1118 2 211)) (= (x1118 2 131) 2722258935367507707706996859454145691648) (= (x1118 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x1118 2 134) 21778071482940061661655974875633165533184) (= 178405961588244985132285746181186892047843328 (x1118 2 147)) (= (x1118 2 82) 4835703278458516698824704) (= 2923003274661805836407369665432566039311865085952 (x1118 2 161)) (= (x1118 2 20) 1048576) (= (x1118 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x1118 2 40) 1099511627776) (= (x1118 2 83) 9671406556917033397649408) (= (x1118 2 150) 1427247692705959881058285969449495136382746624) (= (x1118 2 80) 1208925819614629174706176) (= (x1118 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x1118 2 129) 680564733841876926926749214863536422912) (= (x1118 2 23) 8388608) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x1118 2 248)) (= (x1118 2 39) 549755813888) (= (x1118 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x1118 2 183) 12259964326927110866866776217202473468949912977468817408) (= 50216813883093446110686315385661331328818843555712276103168 (x1118 2 195)) (= (x1118 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x1118 2 225) 53919893334301279589334030174039261347274288845081144962207220498432)))
(assert (x1480 x1767))
(assert (= (=> (and (= x136 (x99 (+ x434 17))) (= (x1322 (x721 x136)) x1047) (= x1297 (x182 896)) (= (x1662 928) x434) (= (> x1297 0) x1189)) (and (=> (not x1189) x316) (=> (and x1189 (= (< 0 x1085) x1559) (or (and (not x1559) (= x1085 x401)) (and (= x401 1) x1559 (> 4294967296 x1046)))) x1101))) x1890))
(assert (x1480 x865))
(assert (x1480 x1769))
(assert (x1480 x391))
(assert (= (x508 768) (x594 768)))
(assert (x1480 x1455))
(assert (x1480 x1678))
(assert (x1480 x1162))
(assert (= (x1543 2780307423) (x721 2780307423)))
(assert (= (x347 640) (x1807 640)))
(assert (= (x531 x422) (ite (= (x1543 0) x422) 1 (x59 x422))))
(assert (= (x149 320) (x170 320)))
(assert (= (x543 928) (x375 928)))
(assert (= (x462 352) (x1452 352)))
(assert (x1480 x108))
(assert (x1480 x845))
(assert (= (x332 768) (x776 768)))
(assert (= x1627 x316))
(assert (= 3567397854 (x1794 (x1543 3567397854))))
(assert (= (x1543 3504541104) (x721 3504541104)))
(assert (= (or x749 (and x102 x983) (and x1314 (not x947))) x627))
(assert (= (x1770 640) (x1272 640)))
(assert (= (x835 672) (x1615 672)))
(assert (x1480 x212))
(assert (= (x618 736) (x1183 736)))
(assert (= (ite (= x486 (x1543 0)) 1 (x59 x486)) (x531 x486)))
(assert (= x989 (x1345 736)))
(assert (= (ite (and x325 x947 x1314) (ite (and x947 x325 x85 x1314) (x1658 (x721 x917)) (x1262 (x721 x917))) (x1262 (x721 x917))) (x704 (x721 x917))))
(assert (x1480 x1440))
(assert (= (x508 864) (x594 864)))
(assert (x1480 x1512))
(assert (= (x1300 640) (x939 640)))
(assert (x1480 x1622))
(assert (= (x1322 x1332) (ite (= x1332 (x1543 0)) 1 (x1323 x1332))))
(assert (= (x839 768) (x1008 768)))
(assert (= (x4 672) (x421 672)))
(assert (x1480 x1076))
(assert (= (and x1628 (not x1727)) x857))
(assert (x1480 x1854))
(assert (= (x688 768) (x945 768)))
(assert (= (x282 768) (x1685 768)))
(assert (= (ite (= x219 (x1543 0)) 1 (x59 x219)) (x531 x219)))
(assert (x1480 x1395))
(assert (x1480 x622))
(assert (=> (>= 10000 (x1077 160)) (= (x721 (x1077 160)) (x1543 (x1077 160)))))
(assert (x1586 x1299))
(assert (x1480 x830))
(assert (= x505 (and x1881 x1220)))
(assert (x1480 x818))
(assert (= (x707 256) (x11 256)))
(assert (x1480 x547))
(assert (= (x1615 864) (x835 864)))
(assert (= (or (and x959 x564) (and x1846 (not x437))) x985))
(assert (= (x1685 896) (x282 896)))
(assert (x1480 x252))
(assert (x1480 x355))
(assert (= (x483 928) x1174))
(assert (= (x1823 704) (x1418 704)))
(assert (x1480 x1589))
(assert (x1480 x105))
(assert (x1480 x628))
(assert (x1480 x981))
(assert (x1480 x1626))
(assert (= (x462 640) (x1452 640)))
(assert (x1480 x1830))
(assert (x1480 x1488))
(assert (= (x839 320) (x1008 320)))
(assert (x1480 x1267))
(assert (= x451 (and (not x364) x1743)))
(assert (= (=> (= (> x401 0) x1734) (and (=> (not x1734) x35) (=> x1734 x1610))) x1101))
(assert (x1480 x1034))
(assert (= (x835 736) (x1615 736)))
(assert (= (x686 896) (x1469 896)))
(assert (= (ite (= x694 (x1543 0)) 1 (x59 x694)) (x63 x694)))
(assert (= (x282 992) x845))
(assert (= (x1904 864) (x889 864)))
(assert (= (x939 384) x1752))
(assert (= (x185 672) (x1345 672)))
(assert (x1480 x1350))
(assert (x1480 x499))
(assert (x1480 x1333))
(assert (x1480 x254))
(assert (x1480 x693))
(assert (x1586 (x1192 128)))
(assert (= (x1485 224) (x1742 224)))
(assert (x1480 x1148))
(assert (= x1364 (and x469 x419)))
(assert (x1480 x714))
(assert (x1480 x1049))
(assert (x1480 x1894))
(assert (= (=> (and (= (= x503 x353) x290) (= x1694 (or x130 x290)) (= x1214 (mod (* x353 x1760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x130 (= x1760 0)) (= (x1330 (x1543 9)) x353) (= x1760 (x939 352)) (= (= (ite x1694 1 0) 0) x1544) (= (div x1214 x1760) x503)) (and (=> (not x1544) x32) (=> x1544 x35))) x1422))
(assert (= (x1000 704) (ite (and x1616 x980) (x317 704) (x991 704))))
(assert (x1480 x1669))
(assert (x1480 x777))
(assert (x1586 (x686 160)))
(assert (x1480 x1401))
(assert (= x880 x471))
(assert (= x67 (x1541 576)))
(assert (= (x526 128) (x1794 (x721 (x526 128)))))
(assert (= (x534 896) (x1171 896)))
(assert (= (div x1878 (x1118 2 x255)) (x817 x1878 x255)))
(assert (= (x733 672) (x648 672)))
(assert (x1480 x695))
(assert (= (x543 992) (x375 992)))
(assert (= (x307 928) x1554))
(assert (= 2835717307 (x1794 (x1543 2835717307))))
(assert (x1586 (x191 160)))
(assert (x1480 x372))
(assert (x1480 x1419))
(assert (= (x1272 1056) (x1770 1056)))
(assert (= (x175 768) (x260 768)))
(assert (x1480 x1899))
(assert (= (x63 x1104) (ite (= (x1543 0) x1104) 1 (x59 x1104))))
(assert (= (x1171 736) (x534 736)))
(assert (x1480 x1879))
(assert (= (x1794 (x721 (x1363 128))) (x1363 128)))
(assert (= x1249 (x940 576)))
(assert (x1480 x846))
(assert (x1480 x1088))
(assert (x1480 x78))
(assert (= (x1794 (x1777 x929 2)) (+ (x1794 x929) 2)))
(assert (= (ite (= (x721 x785) (x1543 0)) 1 (x59 (x721 x785))) (x531 (x721 x785))))
(assert (= (x721 2052391781) (x1543 2052391781)))
(assert (= (x1794 (x1777 x1109 2)) (+ 2 (x1794 x1109))))
(assert (x1480 x477))
(assert (= (x1794 (x1543 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x1324 672) (x180 672)))
(assert (x1480 x779))
(assert (x1480 x1085))
(assert (x1480 x18))
(assert (x1480 x1867))
(assert (x1480 x1268))
(assert (= x1798 (=> (and (= (x285 (- x1256 x1570)) x1366) (= x1882 (x44 (x1543 40))) (= x166 (< x1882 x372)) (= (x1363 1056) x372)) (and (=> (and (not x166) (= (x285 (- x1882 x372)) x1655)) x724) (=> x166 x35)))))
(assert (= (x1135 864) (x1141 864)))
(assert (= (x1541 736) (x537 736)))
(assert (x1480 x456))
(assert (= (and x676 (not x74)) x396))
(assert (x1480 x71))
(assert (= (x1543 464926286) (x721 464926286)))
(assert (= (x1794 (x721 (x1343 128))) (x1343 128)))
(assert (= (x1770 672) (x1272 672)))
(assert (x1586 (x1192 160)))
(assert (x1480 x1153))
(assert (= (or (and x1029 (not x1902)) (and (not x1684) x104)) x1719))
(assert (x1480 x1494))
(assert (= x1353 (=> (and (= (= 0 x924) x1779) (= (= 0 (ite x967 1 0)) x621) (= x967 (or x639 x1779)) (= x894 (x1322 (x1543 44))) (= x1398 (mod (* x894 x924) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x285 (- x914 x400)) x924) (= (= x894 x33) x639) (= x33 (div x1398 x924))) (and (=> x621 x35) (=> (not x621) x619)))))
(assert (x1480 x1092))
(assert (= (x1543 3963136098) (x721 3963136098)))
(assert (x1480 x795))
(assert (=> (>= 10000 (x1365 128)) (= (x1543 (x1365 128)) (x721 (x1365 128)))))
(assert (= x275 (x1794 (x721 x275))))
(assert (x1586 (x1782 160)))
(assert (=> (>= 10000 (x170 160)) (= (x721 (x170 160)) (x1543 (x170 160)))))
(assert (= (x483 352) (x750 352)))
(assert (x1480 x1463))
(assert (x1480 x910))
(assert (x1586 (x1259 160)))
(assert (= (x185 704) (x1345 704)))
(assert (x1480 x1765))
(assert (= (x1794 (x721 x785)) x785))
(assert (= x566 (=> (and (= x355 (x847 (x1543 40))) (= (x285 (- x1382 x236)) x862) (= x477 (x253 256)) (= x774 (x1777 x840 6)) (= (x1077 224) x188) (= (x973 (x721 (x253 128)) (x721 (x253 160)) 0) x840) (= (< x355 x477) x341)) (and (=> (and (not x341) (= x571 (x285 (- x355 x477)))) x1030) (=> x341 x35)))))
(assert (= (x332 352) (x776 352)))
(assert (= (x811 992) x758))
(assert (=> (<= (x1615 128) 10000) (= (x1543 (x1615 128)) (x721 (x1615 128)))))
(assert (x1480 x790))
(assert (= (+ (x1794 x376) 6) (x1794 (x1777 x376 6))))
(assert (x1480 x697))
(assert (=> (>= 10000 (x686 160)) (= (x721 (x686 160)) (x1543 (x686 160)))))
(assert (x1480 x1072))
(assert (= x1314 (and x1487 x1361)))
(assert (= (x249 224) x865))
(assert (x1480 x1739))
(assert (= (x835 768) (x1615 768)))
(assert (x1480 x1294))
(assert (x1480 x1313))
(assert (= (x950 864) (x993 864)))
(assert (= (x506 320) (x1768 320)))
(assert (= x1371 (=> (and (= (< x802 x557) x1204) (= (x365 768) x802) (= (x365 1024) x557)) (and (=> (not x1204) x1276) (=> x1204 x35)))))
(assert (x1480 x1341))
(assert (= (x470 864) (x124 864)))
(assert (x1586 (x262 128)))
(assert (= (x253 128) (x1794 (x721 (x253 128)))))
(assert (= (x698 160) (x1794 (x721 (x698 160)))))
(assert (= (x722 864) (x665 864)))
(assert (= (ite (= x918 (x1543 0)) 1 (x59 x918)) (x531 x918)))
(assert (x1480 x1897))
(assert (x1480 x762))
(assert (x1480 x1067))
(assert (x1480 x1033))
(assert (= (+ (x1794 x269) 6) (x1794 (x1777 x269 6))))
(assert (= (x531 (x1543 40)) (ite (= (x1543 0) (x1543 40)) 1 (x59 (x1543 40)))))
(assert (= x1035 (and (not x713) x356)))
(assert (x1480 x1795))
(assert (x1480 x924))
(assert (x1586 x1827))
(assert (x1480 x1074))
(assert (x1480 x1265))
(assert (= (x836 768) (x271 768)))
(assert (= (ite (= (x1543 0) (x1543 9)) 1 (x59 (x1543 9))) (x531 (x1543 9))))
(assert (= (x182 896) x1047))
(assert (x1480 x565))
(assert (= (ite (and x1616 x980) (x317 352) (x991 352)) (x1000 352)))
(assert (x1586 (x1430 160)))
(assert (= (x1077 160) (x1794 (x721 (x1077 160)))))
(assert (= (x347 704) (x1807 704)))
(assert (x1480 x571))
(assert (= x630 (or x985 x690)))
(assert (x1480 x633))
(assert (= x413 (=> (and (= x647 (x285 (- x1813 x1115))) (= x1140 (< 0 x1532)) (= x1532 (x365 1024))) (and (=> (not x1140) x1030) (=> x1140 x1371)))))
(assert (= (=> (and (= (= 20 x1554) x40) (= x254 (x1210 928)) (= x1554 (x99 (+ x254 1)))) (and (=> (not x40) x363) (=> x40 x464))) x1284))
(assert (x1480 x1442))
(assert (= (x1904 704) (x889 704)))
(assert (x1480 x540))
(assert (= (x306 1056) (x76 1056)))
(assert (=> (>= 10000 (x1192 128)) (= (x1543 (x1192 128)) (x721 (x1192 128)))))
(assert (x1480 x935))
(assert (= (=> (and (= x333 (x1807 320)) (= x890 (div x1387 x645)) (= x1332 (x1777 x1216 2)) (= (= 0 x333) x1520) (= (ite (> x890 x975) x975 x890) x1604) (= (x306 224) x1098) (= x975 (x1322 x1332)) (= (x973 (x721 (x347 128)) (x721 (x347 160)) 0) x1216)) (and (=> x1520 x20) (=> (not x1520) x1874))) x1821))
(assert (=> (<= x1164 10000) (= (x721 x1164) (x1543 x1164))))
(assert (= (x531 x507) (ite (= (x1543 0) x507) 1 (x59 x507))))
(assert (= x917 (x1794 (x721 x917))))
(assert (x1480 x1713))
(assert (= x1312 (and x626 (not x751))))
(assert (x1480 x1837))
(assert (= x200 (and x994 x1818)))
(assert (x1480 x1675))
(assert (= x212 (x603 896)))
(assert (= (x1443 672) (x249 672)))
(assert (x1480 x1375))
(assert (x1480 x1850))
(assert (= (x817 x500 x977) (div x500 (x1118 2 x977))))
(assert (x1480 x1554))
(assert (= (x1823 640) (x1418 640)))
(assert (x1480 x829))
(assert (= (x282 640) (x1685 640)))
(assert (x1586 (x1365 160)))
(assert (x1480 x1483))
(assert (= (=> (and (= x1537 (not x1666)) (= x1666 x1172) (= x1537 x1875)) x1875) x517))
(assert (= (+ (x1794 x1393) 8) (x1794 (x1777 x1393 8))))
(assert (x1480 x1629))
(assert (= x1048 (x1469 288)))
(assert (= (x1543 2681579215) (x721 2681579215)))
(assert (= x83 (=> (and (= x1181 (= x1839 0)) (= x1529 (x1400 256)) (= x1498 (or x1099 x1181)) (= x1080 (mod (* x1839 x1529) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1649 (div x1080 x1839)) (= (= x1529 x1649) x1099) (= x1255 (x1400 256)) (= (= 0 (ite x1498 1 0)) x1911) (= x1839 (x1400 224)) (= (x1322 (x1543 43)) x841)) (and (=> (not x1911) x1607) (=> x1911 x35)))))
(assert (= (x691 1088) (x1403 1088)))
(assert (= (x1794 (x721 (x76 128))) (x76 128)))
(assert (= (x260 256) (x175 256)))
(assert (= (x1662 704) (x182 704)))
(assert (= (ite (and x947 x1314 x325) (ite (and x325 x85 x1314 x947) (x1658 (x721 274184521717934524641157099916833587200)) (x1262 (x721 274184521717934524641157099916833587200))) (x1262 (x721 274184521717934524641157099916833587200))) (x704 (x721 274184521717934524641157099916833587200))))
(assert (= x826 (=> (= x1744 (< 0 x1376)) (and (=> x1744 x1197) (=> (not x1744) x35)))))
(assert (= (=> (and (= (x534 768) x1074) (= x1224 (> x351 x1074)) (= x351 (x534 960))) (and (=> (not x1224) x94) (=> x1224 x35))) x730))
(assert (= (=> (= x424 (< 31 x1711)) (and (=> (not x424) x35) (=> (and (= x1233 (x283 1056)) x424 (= x403 (< 0 x1308)) (or (and (= x501 x1308) (not x403)) (and (= x501 1) x403 (< x395 4294967296)))) x568))) x1774))
(assert (= (x1794 (x721 (x1679 128))) (x1679 128)))
(assert (= x952 (=> (and (= x1720 (> x1115 x1813)) (= (x1225 960) x1115) (= (x1225 1088) x1813)) (and (=> x1720 x35) (=> (not x1720) x413)))))
(assert (= (x1206 224) (x530 224)))
(assert (= x1638 (=> (and (= x764 (< x762 x147)) (= x147 (x190 320)) (= (x285 (- x223 x297)) x514) (= (x1803 (x1543 39)) x762)) (and (=> (and (not x764) (= (x285 (- x762 x147)) x1379)) x20) (=> x764 x35)))))
(assert (x1586 (x1615 128)))
(assert (x1480 x810))
(assert (x1480 x244))
(assert (= (x182 864) (x1662 864)))
(assert (x1480 x1670))
(assert (= (x1679 160) (x1794 (x721 (x1679 160)))))
(assert (x1480 x1819))
(assert (= x911 (and x505 (not x1911))))
(assert (= (x1770 960) (x1272 960)))
(assert (x1480 x1848))
(assert (= (x835 640) (x1615 640)))
(assert (x1480 x1457))
(assert (= (x611 352) (x763 352)))
(assert (= (x487 352) (x7 352)))
(assert (= (x648 736) (x733 736)))
(assert (x1480 x255))
(assert (= (x1794 (x1543 1020253707)) 1020253707))
(assert (x1480 x709))
(assert (x1480 x1427))
(assert (x1480 x1657))
(assert (x1480 x1898))
(assert (x1480 x1131))
(assert (x1480 x148))
(assert (= (x1832 640) (x318 640)))
(assert (= (x1135 992) (x1141 992)))
(assert (x1480 x833))
(assert (= (ite (= x219 (x1543 0)) 1 (x1323 x219)) (x1322 x219)))
(assert (x1480 x802))
(assert (= (x97 768) (x230 768)))
(assert (= (=> (and (= x1739 (x1564 (x721 274184521717934524641157099916833587200))) (not (< x1356 4)) (< 0 x1739) (= x1493 (< 0 x818))) (and (=> (not x1493) x1481) (=> x1493 x35))) x1110))
(assert (x1586 x1419))
(assert (= (x493 928) (x812 928)))
(assert (x1480 x1716))
(assert (= (x365 672) (x1225 672)))
(assert (= (=> (and (= x642 (x285 (- x468 x545))) (= (x121 x1783) x828) (= x1783 (x973 (x721 (x262 128)) (x721 (x262 160)) 0)) (= (x262 736) x934) (= x1359 (> x934 x828))) (and (=> x1359 x35) (=> (and (= (x1051 768) x981) (= x1731 (x1745 256)) (= (x230 224) x1164) (not x1359) (= (x262 736) x1769) (or (not x1147) (and x1179 (= (<= x1887 (x1659 (x721 274184521717934524641157099916833587200))) x110) x110 (< x897 4294967296) (= (= (x1659 (x721 x1164)) x546) x1179) (= (x593 (x721 x1164)) x546) (= x1887 (x593 (x721 274184521717934524641157099916833587200))) x1147)) (= (x69 672) x1217) (= (x285 (- x828 x934)) x303) (= (< 0 x415) x1425) (= x1550 (x197 288)) (= x629 (x99 (+ 512 x213))) (= (x99 (+ 480 x213)) x932) (= x18 (x99 (+ 64 x213))) (or (not x1425) (and x1425 (< x1736 4294967296))) (= x1147 (< 0 x1305)) (= (x291 (x1543 10)) x1501) (= x213 (x1745 384))) x48))) x1728))
(assert (= (x1403 960) (x691 960)))
(assert (= (x1450 256) (x1606 256)))
(assert (= (x175 640) (x260 640)))
(assert (= (x598 736) (x726 736)))
(assert (x1480 x1692))
(assert (= (x63 (x1543 41)) (ite (= (x1543 0) (x1543 41)) 1 (x59 (x1543 41)))))
(assert (x1480 x217))
(assert (= (x1608 352) (x1146 352)))
(assert (= (x1469 1056) (x686 1056)))
(assert (x1480 x434))
(assert (= (x1806 352) (ite (and x1613 x1525) (x1266 352) (x1676 352))))
(assert (= (x1679 320) (x811 320)))
(assert (x1480 x199))
(assert (= (x576 640) (x265 640)))
(assert (= (x1272 896) (x1770 896)))
(assert (=> (<= (x262 160) 10000) (= (x1543 (x262 160)) (x721 (x262 160)))))
(assert (= (x1543 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x721 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= x427 (=> (and (= x407 (= (ite x10 1 0) 0)) (= (x99 (+ x444 x609)) x554) (= x382 (= x1850 0)) (= x169 (= x554 x1697)) (= x580 (mod (* x554 x1850) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1697 (div x580 x1850)) (= x10 (or x382 x169))) (and (=> (not x407) x651) (=> x407 x35)))))
(assert (= (x939 704) (x1300 704)))
(assert (= (=> (and (= x1165 (x973 (x721 (x1316 128)) (x721 (x1316 160)) 0)) (not (= x1640 2757214935)) (not (< x75 4)) (= (x99 (+ 64 x855)) x804) (= x507 (x973 (x721 (x726 128)) (x721 (x726 160)) 0)) x879 (not (= x1640 31576340)) (= x1811 (x726 736)) (= x109 (= x900 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x1401 x1717) (= (> x1817 0) x624) (= (x284 256) x1521) (= x520 (< 0 x1573)) (not (= x1640 157198259)) (< 0 x390) (>= x1517 0) (not (= 3184006219 x1640)) (or (not x520) (and x1468 (= (x1050 (x721 274184521717934524641157099916833587200)) x1898) (> 4294967296 x1591) (= (<= x1898 (x492 (x721 274184521717934524641157099916833587200))) x1468) x293 (= (x1050 (x721 x1907)) x988) x520 (= x293 (= x988 (x492 (x721 x1907)))))) (not (< x1058 x177)) (= x1804 (x1150 (x1543 9))) (<= 0 x1236) (not (= 1020253707 x1640)) (not (= 2484372501 x1640)) (not (= x1640 4267106866)) (= x247 x56) (= x1287 (x285 (- x1058 x177))) (= x420 (x99 (+ x855 512))) (= x64 x273) (= x202 x1329) (not (> x405 0)) (= x1605 (x285 (- x1804 x1879))) (not (= 961581905 x1640)) (or (not x646) (and (= x525 (x817 x1852 x623)) (= (x982 352) x1852) (= (mod (* 8 x1851) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x623) x646 (> x525 0) (= (x982 320) x1205) (= x1851 (x285 (- 32 x1205))))) (= x783 (x710 672)) (= x1879 (x1237 736)) (not (= 2780307423 x1640)) (= x1635 (x1793 704)) (= false x80) (not (= x1640 1977493762)) (= x803 true) (not (= 3963136098 x1640)) (not (= x1640 629314576)) (not (= 2681579215 x1640)) (= x1155 (x1130 800)) (or (not x1185) (and (> 4294967296 x1906) x1185)) (= (x1358 768) x1156) (= x1907 (x561 224)) (<= x695 1461501637330902918203684832716283019655932542975) (not (= x1640 2869116585)) (not (= x1640 1888058147)) (not (= 1851080549 x1640)) (<= x1530 1461501637330902918203684832716283019655932542975) (= (x982 320) x1669) (= x695 x247) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x75)) (not (= 3092021830 x1640)) (= x646 (> x1669 0)) (not (= x1640 2835717307)) (not (= x1640 3065339685)) (= (x1541 576) x1483) (not (= 1401663147 x1640)) (not (> x141 0)) (= x247 x1503) (= (x99 (+ x855 480)) x810) (<= x1236 1461501637330902918203684832716283019655932542975) (= x405 x476) (= x1817 (x531 (x1543 9))) (not (< x1804 x1879)) (= x177 (x1316 736)) (= (x284 384) x855) (= x1236 x1350) (<= 0 x1530) (>= x695 0) (= x1500 (x1316 736)) (= (x1708 288) x1245) (or (not x1519) (and (> 4294967296 x1326) x1519)) (or (and (= x1824 (x531 x579)) (= (x973 (x721 (x1782 128)) (x721 (x1782 160)) 0) x579) x109) (not x109)) (= (x982 736) x597) (not (= 348537858 x1640)) (= (x1564 (x721 274184521717934524641157099916833587200)) x390) (= 773487949 x1640) (or (and (not x1616) (= x499 x446)) (and (= x446 1) (> 4294967296 x153) x1616)) (= (x641 x1165) x1058) (< 35 x75) (or (and (= (ite x1431 1 0) x1826) (= x1796 (= x1833 x58)) (< 0 x1250) (= x129 (x531 (x1543 41))) (not (< x64 x129)) (= (or x1180 x1796) x984) (= (div x1512 x976) x990) (= (x285 (- x273 x129)) x906) (= (> 1000000000000000000 x203) x39) (= (x285 (- x1053 x1680)) x1279) (< 31 x700) (= (x531 (x1543 44)) x1833) (= x1563 (x1560 224)) (= (x598 352) x976) (= (x718 224) x203) (or (and (not x800) (= x71 x1250)) (and (= x1250 1) (> 4294967296 x700) x800)) x624 (= (or x831 x1408) x1431) (= x1053 (x966 288)) (= (x1044 384) x1083) (= x1680 (x1535 320)) (not (= 0 x779)) (or (not x39) (and (= (x1545 256) x1442) (= x277 (x1545 224)) (= (x285 (- x1442 x1457)) x1772) (= (= x1432 x1701) x995) (= (div x98 1000000000000000000) x1457) (= x926 (= 0 x277)) (= (or x926 x995) x490) x39 (= x1348 (ite x490 1 0)) (not (= 0 x1348)) (= (x1545 256) x1701) (= x98 (mod (* x1701 x277) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1432 (div x98 x277)) (= x240 (x531 (x1543 43))) (not (< x1442 x1457)))) (= (< 0 x71) x800) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x148 x1563))) (= (mod (* x1833 x906) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1589) (= x779 (ite x984 1 0)) (= x1812 (x99 (+ x1563 x148))) (= x148 (x531 (x1543 40))) (= x58 (div x1589 x906)) (= x1180 (= 0 x906)) (= x1408 (= x976 0)) (= (x531 (x1543 9)) x257) (not (> x1680 x1053)) (= (div x1512 x257) x1148) (not (= 0 x1826)) (= (mod (* x1083 x976) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1512) (not (= x257 0)) (= (= x990 x1083) x831)) (and (not x624) (= (x598 352) x1067))) (not (= 3567397854 x1640)) (not (= 464926286 x1640)) (= x67 (ite (< x1591 32) x1591 32)) (< 0 x1573) (= (x531 x507) x29) (> x1369 0) (not (= x1640 596573372)) (>= 1461501637330902918203684832716283019655932542975 x1517) (>= 1461501637330902918203684832716283019655932542975 x1503) (= x1185 (> x377 0)) (= x47 (x408 768)) (not (< x29 x439)) (not (= 599290589 x1640)) (= x1757 (x964 800)) (not (= x1640 2052391781)) (= (x1338 640) x461) (not (= 2316151882 x1640)) (= x879 (not (= x56 x1329))) (= x1369 (x726 736)) (= (x59 (x1543 0)) x141) (= x1292 (x99 (+ x1483 32))) (= (x727 768) x1490) (= (x1793 736) x900) (= x1059 x1530) (= x1059 x1629) (= (< 0 x824) x1519) (= x1144 (x809 (x1543 10))) (>= x1503 0) (= (x726 736) x439) (not (= 2209625481 x1640)) (not (= 3296657447 x1640)) (= (< 0 x499) x1616) (not (< 10000 x1635)) (not (= x1640 3504541104))) x877) x1702))
(assert (x1480 x201))
(assert (= (x170 896) (x149 896)))
(assert (x1586 (x1685 160)))
(assert (= (x375 640) (x543 640)))
(assert (= (=> (= (< 31 x359) x1674) (and (=> x1674 x31) (=> (not x1674) x35))) x1390))
(assert (x1480 x915))
(assert (= (=> (and (= (< x1473 x84) x961) (= (x1171 992) x682) (= (x534 768) x84) (= (x534 960) x1473)) (and (=> x961 x730) (=> (not x961) x1627))) x1022))
(assert (= (x721 3567397854) (x1543 3567397854)))
(assert (= (x1794 (x1543 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x1480 x638))
(assert (= (x945 928) (x688 928)))
(assert (x1480 x1710))
(assert (x1480 x1448))
(assert (= (x598 672) (x726 672)))
(assert (x1480 x987))
(assert (x1480 x521))
(assert (= (and x1698 x66) x705))
(assert (x1480 x420))
(assert (= (x332 320) (x776 320)))
(assert (x1480 x1169))
(assert (= x1200 (=> (= x1061 (< 0 x160)) (and (=> x1061 x123) (=> (not x1061) x35)))))
(assert (x1480 x1215))
(assert (= (x1543 2757214935) (x721 2757214935)))
(assert (= (ite (and x1081 x478) (x781 (x721 x275)) (x1585 (x721 x275))) (x875 (x721 x275))))
(assert (x1480 x1048))
(assert (= (x1807 1056) (x347 1056)))
(assert (x1480 x1458))
(assert (= (and (not x1159) x1778) x61))
(assert (=> (>= 10000 (x1430 128)) (= (x721 (x1430 128)) (x1543 (x1430 128)))))
(assert (= (x167 224) x1841))
(assert (x1480 x1618))
(assert (= (x1198 704) (x234 704)))
(assert (= (x811 352) (x1679 352)))
(assert (= x577 (and x511 (not x350))))
(assert (x1480 x216))
(assert (= x1246 (=> (and (= x1802 (x63 (x721 x1827))) (= (x234 928) x1274) (= x923 (x1198 896)) (= (> x923 0) x1482) (= (x99 (+ x1274 17)) x1827)) (and (=> (and (or (and (= x1891 x1184) (not x823)) (and (< x1124 4294967296) x823 (= 1 x1184))) (= (< 0 x1891) x823) x1482) x942) (=> (not x1482) x1218)))))
(assert (= (x603 352) (x1534 352)))
(assert (= 274184521717934524641157099916833587200 (x1794 (x1543 274184521717934524641157099916833587200))))
(assert (= (x282 320) (x1685 320)))
(assert (= (x271 704) (x836 704)))
(assert (x1480 x444))
(assert (= (x1322 (x721 x785)) (ite (= (x1543 0) (x721 x785)) 1 (x1323 (x721 x785)))))
(assert (= x1589 (x718 224)))
(assert (= (x1017 864) (x1497 864)))
(assert (= (x594 896) x895))
(assert (= (x1794 (x721 (x24 160))) (x24 160)))
(assert (= (x835 1056) (x1615 1056)))
(assert (x1480 x1297))
(assert (x1480 x251))
(assert (= (x721 3065339685) (x1543 3065339685)))
(assert (x1480 x617))
(assert (x1480 x522))
(assert (x1480 x1578))
(assert (= x1066 (and (not x842) x663)))
(assert (= (x726 320) (x598 320)))
(assert (= (x519 896) (x808 896)))
(assert (= (x7 864) (x487 864)))
(assert (= x1373 (and x961 x705)))
(assert (x1480 x1475))
(assert (x1586 (x1456 128)))
(assert (= (x598 640) (x726 640)))
(assert (= (x763 896) (x611 896)))
(assert (= (x162 672) (x167 672)))
(assert (= (x979 704) (x996 704)))
(assert (= (x611 864) (x763 864)))
(assert (= (x812 960) (x493 960)))
(assert (= (ite (and x674 x225) (x548 736) (x21 736)) (x1462 736)))
(assert (x1480 x139))
(assert (x1480 x700))
(assert (x1480 x1097))
(assert (x1480 x931))
(assert (x1480 x1124))
(assert (x1480 x392))
(assert (= (and x1312 (not x1603)) x1743))
(assert (= x464 x1218))
(assert (x1480 x1726))
(assert (x1480 x122))
(assert (= (x1806 640) (ite (and x1613 x1525) (x1266 640) (x1676 640))))
(assert (x1480 x26))
(assert (x1480 x312))
(assert (= x1475 (x717 352)))
(assert (= (x1450 736) (x1606 736)))
(assert (= (x1281 256) (x191 256)))
(assert (= (x618 320) (x1183 320)))
(assert (x1480 x1813))
(assert (= (x1300 320) (x939 320)))
(assert (x1480 x157))
(assert (= (ite (and x1616 x980) (x317 672) (x991 672)) (x1000 672)))
(assert (x1480 x397))
(assert (x1480 x1))
(assert (x1480 x1529))
(assert (= (x531 x1847) (ite (= x1847 (x1543 0)) 1 (x59 x1847))))
(assert (= (x347 288) (x1807 288)))
(assert (= (and x1370 x300) x1042))
(assert (= (x1135 320) (x1141 320)))
(assert (x1480 x1142))
(assert (= (x1794 (x721 (x191 160))) (x191 160)))
(assert (= (x149 992) x617))
(assert (x1480 x968))
(assert (x1480 x258))
(assert (= (x1281 896) (x191 896)))
(assert (x1480 x457))
(assert (= (x1794 (x721 (x686 160))) (x686 160)))
(assert (= x567 (x1823 736)))
(assert (x1480 x1565))
(assert (x1480 x514))
(assert (x1480 x606))
(assert (x1480 x1602))
(assert (= (x1794 (x1777 x1289 8)) (+ 8 (x1794 x1289))))
(assert (x1480 x1432))
(assert (x1480 x867))
(assert (= (x1807 672) (x347 672)))
(assert (= (and x396 (not x741)) x1677))
(assert (x1480 x286))
(assert (= (x1210 640) (x307 640)))
(assert (x1480 x1398))
(assert (x1480 x859))
(assert (= (x375 864) (x543 864)))
(assert (x1480 x771))
(assert (= (x603 864) (x1534 864)))
(assert (x1586 (x175 128)))
(assert (x1480 x1010))
(assert (= (x698 128) (x1794 (x721 (x698 128)))))
(assert (= (x306 864) (x76 864)))
(assert (= (x234 352) (x1198 352)))
(assert (x1480 x50))
(assert (= (=> (and (= x1188 (> x1514 x113)) (= (div x580 10000) x113) (= (x1263 864) x1514)) (and (=> (not x1188) x233) (=> x1188 x35))) x651))
(assert (= (x534 704) (x1171 704)))
(assert (x1480 x828))
(assert (x1480 x245))
(assert (x1480 x1788))
(assert (= (x996 224) (x979 224)))
(assert (= 157198259 (x1794 (x1543 157198259))))
(assert (x1480 x423))
(assert (x1586 (x175 160)))
(assert (= (x1794 (x721 x968)) x968))
(assert (= (x603 320) (x1534 320)))
(assert (x1480 x1760))
(assert (= (=> (and (= (x973 (x721 (x1363 128)) (x721 (x1363 160)) 0) x269) (= (x1777 x269 6) x219) (= x1618 (x806 896)) (= (x1363 1056) x1570) (= x1256 (x1706 x219)) (= x494 (< x1256 x1570))) (and (=> (not x494) x1798) (=> x494 x35))) x1030))
(assert (x1480 x1372))
(assert (not x459))
(assert (x1480 x107))
(assert (x1586 (x1365 128)))
(assert (= (x1281 224) (x191 224)))
(assert (= x461 (x1793 736)))
(assert (x1480 x400))
(assert (= x152 (and x53 (not x176))))
(assert (= (x1462 768) (ite (and x674 x225) (x548 768) (x21 768))))
(assert (= (x1794 (x721 (x265 160))) (x265 160)))
(assert (x1480 x586))
(assert (x1480 x976))
(assert (x1480 x385))
(assert (= (x306 896) (x76 896)))
(assert (= (x1439 864) (x1152 864)))
(assert (= (x603 672) (x1534 672)))
(assert (= (x124 640) (x470 640)))
(assert (= (x1794 (x1543 2052391781)) 2052391781))
(assert (= (x298 640) (x991 640)))
(assert (x1480 x335))
(assert (=> (>= 10000 (x1685 128)) (= (x721 (x1685 128)) (x1543 (x1685 128)))))
(assert (= (x1403 768) (x691 768)))
(assert (x1480 x1536))
(assert (x1480 x1766))
(assert (= x570 (and x1280 x1066)))
(assert (= (x63 x1389) (ite (= (x1543 0) x1389) 1 (x59 x1389))))
(assert (x1480 x1160))
(assert (x1480 x1591))
(assert (= (x686 352) (x1469 352)))
(assert (= (x1443 352) (x249 352)))
(assert (= (x531 (x1543 44)) (ite (= (x1543 0) (x1543 44)) 1 (x59 (x1543 44)))))
(assert (=> (<= (x24 160) 10000) (= (x1543 (x24 160)) (x721 (x24 160)))))
(assert (= (x763 960) (x611 960)))
(assert (= (x1017 640) (x1497 640)))
(assert (=> (>= 10000 (x1456 160)) (= (x1543 (x1456 160)) (x721 (x1456 160)))))
(assert (= (x1146 768) (x1608 768)))
(assert (= (x1135 928) (x1141 928)))
(assert (x1480 x333))
(assert (= (x688 672) (x945 672)))
(assert (= x663 (and x1196 x414)))
(assert (x1480 x671))
(assert (= x564 (and x437 x1846)))
(assert (x1480 x1047))
(assert (= (x1171 320) (x534 320)))
(assert (= x517 x1738))
(assert (= (x603 640) (x1534 640)))
(assert (x1586 x1164))
(assert (= (x1146 320) (x1608 320)))
(assert (x1480 x205))
(assert (x1480 x894))
(assert (= (x170 640) (x149 640)))
(assert (x1480 x418))
(assert (x1480 x608))
(assert (= (x1662 928) (x182 928)))
(assert (x1480 x1423))
(assert (x1480 x667))
(assert (x1586 x1294))
(assert (= (x1822 864) (x582 864)))
(assert (x1586 (x698 160)))
(assert (= (x191 352) (x1281 352)))
(assert (x1480 x1593))
(assert (= (x1017 352) (x1497 352)))
(assert (x1480 x1059))
(assert (x1480 x98))
(assert (x1480 x1707))
(assert (x1480 x188))
(assert (= (x718 704) (x966 704)))
(assert (= (x271 640) (x836 640)))
(assert (= (x11 736) (x707 736)))
(assert (x1480 x415))
(assert (= (x812 864) (x493 864)))
(assert (= (x1742 736) (x1485 736)))
(assert (x1480 x792))
(assert (x1480 x256))
(assert (x1480 x1723))
(assert (= x1861 x630))
(assert (= (x531 x72) (ite (= x72 (x1543 0)) 1 (x59 x72))))
(assert (x1586 (x265 160)))
(assert (x1480 x1342))
(assert (x1480 x443))
(assert (= (x726 704) (x598 704)))
(assert (= (x721 1000000000000000000) (x1543 1000000000000000000)))
(assert (= (x1794 (x721 (x1430 128))) (x1430 128)))
(assert (x1480 x1825))
(assert (= (x1322 x1567) (ite (= (x1543 0) x1567) 1 (x1323 x1567))))
(assert (x1586 (x191 128)))
(assert (x1480 x574))
(assert (= (x1338 640) (x1793 640)))
(assert (= (=> (and (= (x470 992) x633) (= (x124 768) x1435) (< 31 x591) (= (x124 960) x1511) (= (> x1435 x1511) x947) (> x1466 0)) (and (=> (and (= (< 0 x1914) x325) (= (x124 768) x689) (= (x1777 x1775 6) x918) (= x671 (x531 x918)) (not (> x348 x689)) x947 (= (x811 992) x1914) (= (x1137 992) x1161) (= (x1137 896) x90) (= x758 (ite (> x1161 x671) x671 x1161)) (or (not x325) (and (= x1867 (x1259 1056)) (= x486 (x1777 x734 6)) (= (> x680 0) x85) (= x256 (x1336 (x1543 40))) (= x386 (x285 (- x256 x1867))) (= (x1787 896) x473) (= (x1768 1024) x1463) (= x1546 (x945 992)) (= x1002 (x506 960)) (= (x1211 x486) x456) (= x1131 (x1259 1056)) (= x612 (x285 (- x496 x1002))) (not (< x256 x1867)) x325 (= x734 (x973 (x721 (x1259 128)) (x721 (x1259 160)) 0)) (or (and (= (x838 1024) x205) (= (x285 (- x992 x793)) x217) (= (x285 (- x135 x1528)) x790) (= x157 (x1343 256)) (= x106 (x193 (x1543 40))) (= x46 (x99 (+ x556 x157))) (not (< x992 x793)) (= x1536 (x25 864)) (= (x1343 256) x793) (= x135 (x1768 768)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1163 x1536))) (= x120 (x1213 224)) (= (x973 (x721 (x175 128)) (x721 (x175 160)) 0) x587) (= (x531 x1625) x1005) x1309 (= x387 (x723 224)) (= x338 (x1271 256)) (= (x1343 288) x992) (= (x1311 896) x1267) (= x1614 (x1777 x1761 6)) (= (x1777 x1393 8) x308) (= (x973 (x721 (x1271 128)) (x721 (x1271 160)) 0) x1761) (= (x260 256) x856) (= x1528 (x1768 1024)) (not (> x1528 x135)) (= x1838 (x531 (x1543 39))) (not (< x1795 x856)) (= (x463 x308) x556) (= (x285 (- x106 x338)) x1478) (or (and (or x757 (and (not x757) (= (x973 (x721 (x1587 128)) (x721 (x1587 160)) 0) x1109) (= (x1687 (x1543 39)) x1013) (not (< x1260 x1700)) (not (< x1013 x714)) (= x165 (x285 (- x1013 x714))) (= x1168 (x285 (- x1260 x1700))) (= (x1777 x1109 2) x72) (= x1260 (x531 x72)) (= (x1281 224) x1154) (= x714 (x1587 320)) (= x1700 (x1587 320)))) (= x454 (x1777 x1234 2)) (not (= 0 x1010)) (= x328 (ite (> x1766 x1244) x1244 x1766)) (= (x260 256) x1247) (= (x973 (x721 (x191 128)) (x721 (x191 160)) 0) x1234) (= x259 (div x1025 x1247)) (= (or x134 x1746) x1424) (not x652) (= x1788 (x531 (x1543 39))) (= x1025 (mod (* x1788 x1247) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x531 x454) x1244) (= x757 (= x1762 0)) (= (ite x1424 1 0) x1010) (= (= x259 x1788) x1746) (= x154 (x531 (x1543 40))) (not (= x154 0)) (= (= x1247 0) x134) (= (div x1025 x154) x1766) (= (x1281 320) x1762) (= x139 (x260 224))) x652) (= x1064 (x1343 224)) (= (x1777 x587 6) x1625) (= (x260 288) x1795) (= (x99 (+ x1163 x1536)) x418) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x556 x157))) (not (> x338 x106)) (= (x973 (x721 (x1343 128)) (x721 (x1343 160)) 0) x1393) (= (= x1838 0) x652) (= (x25 1024) x1163)) (not x1309)) (< 0 x12) (> x680 0) (= (x506 1088) x496) (not (> x1002 x496)) (= x1309 (> x1463 0)) (= (> x1394 0) x222) (= (x1337 1056) x367) (= (x285 (- x456 x1131)) x1339) (or (and (> 4294967296 x1790) (= 1 x12) x222) (and (= x1394 x12) (not x222))) (or (and (> 4294967296 x244) x1491 (= x863 (x1262 (x721 x1294))) (= x1491 (>= (x1658 (x721 274184521717934524641157099916833587200)) x339)) (= (x1262 (x721 274184521717934524641157099916833587200)) x339) x1437 (= (= (x1658 (x721 x1294)) x863) x1437) x85) (not x85)) (= x1294 (x688 896)) (< 31 x1790) (not (< x456 x1131)) (< 31 x244))) (= x1775 (x973 (x721 (x1679 128)) (x721 (x1679 160)) 0)) (= (x124 960) x348) (= (x285 (- x689 x348)) x1730)) x1690) (=> (not x947) x1896))) x541))
(assert (= (x271 320) (x836 320)))
(assert (= (ite (= x422 (x1543 0)) 1 (x1323 x422)) (x1322 x422)))
(assert (= (=> (= x1172 true) x1738) x35))
(assert (x1586 (x1615 160)))
(assert (= (x1587 160) (x1794 (x721 (x1587 160)))))
(assert (= (x24 128) (x1794 (x721 (x24 128)))))
(assert (= (x260 352) (x175 352)))
(assert (= (x1485 352) (x1742 352)))
(assert (= (x1017 672) (x1497 672)))
(assert (x1480 x467))
(assert (= x1504 (=> (and (= (div x865 x1434) x309) (= (= (ite x575 1 0) 0) x1159) (= (x1330 (x1543 44)) x1865) (= x575 (or x827 x263)) (= (mod (* x1434 x1865) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x865) (= x263 (= x1865 x309)) (= (= x1434 0) x827) (= x1434 (x285 (- x914 x873)))) (and (=> x1159 x35) (=> (not x1159) x1673)))))
(assert (= (x191 672) (x1281 672)))
(assert (= (x1198 864) (x234 864)))
(assert (x1480 x917))
(assert (= (x175 128) (x1794 (x721 (x175 128)))))
(assert (=> (<= (x1363 128) 10000) (= (x1543 (x1363 128)) (x721 (x1363 128)))))
(assert (= (=> (and (= (x1322 (x1543 40)) x645) (= x54 (= x645 0))) (and (=> x54 x35) (=> (not x54) x1821))) x1721))
(assert (= (x531 x1625) (ite (= (x1543 0) x1625) 1 (x59 x1625))))
(assert (= x1029 (and (not x1544) x949)))
(assert (x1586 (x1430 128)))
(assert (= (x21 352) (x1381 352)))
(assert (x1480 x578))
(assert (= (x1794 (x721 (x347 128))) (x347 128)))
(assert (x1480 x1473))
(assert (= (x1562 672) (x766 672)))
(assert (x1480 x128))
(assert (x1586 (x1271 128)))
(assert (= (=> (and (= (x435 (x721 x1299)) x78) (= x1299 (x99 (+ 17 x1753))) (= x935 (x683 896)) (= (not (< 0 x935)) x211) (= x1753 (x307 928))) (and x1218 x211)) x363))
(assert (x1480 x503))
(assert (= (x776 704) (x332 704)))
(assert (= (and x562 x200) x1252))
(assert (= x50 (x835 320)))
(assert (= (x534 640) (x1171 640)))
(assert (x1586 (x1679 160)))
(assert (x1480 x1387))
(assert (= (=> (and (= (div x1522 1000000000000000000) x373) (= (< x1039 x373) x613)) (and (=> x613 x35) (=> (and (= (x285 (- x1039 x373)) x1162) (not x613)) x181))) x158))
(assert (= x813 (and x471 x1061)))
(assert (= (x722 640) (x665 640)))
(assert (= (x76 672) (x306 672)))
(assert (= x1055 (and x1515 (not x207))))
(assert (= (ite (= (x1543 9) (x1543 0)) 1 (x59 (x1543 9))) (x63 (x1543 9))))
(assert (x1480 x1863))
(assert (= (x318 704) (x1832 704)))
(assert (= (or (and x1510 (not x1310)) (and x1699 (not x1188))) x87))
(assert (= (x1543 773487949) (x721 773487949)))
(assert (= (x544 352) (x1302 352)))
(assert (= (and x857 (not x206)) x891))
(assert (= (x21 800) (x1381 800)))
(assert (x1586 (x190 128)))
(assert (x1480 x1464))
(assert (= (x1676 640) (x1835 640)))
(assert (x1480 x270))
(assert (x1480 x515))
(assert (= (x170 960) (x149 960)))
(assert (x1586 (x1271 160)))
(assert (= (x1469 256) (x686 256)))
(assert (x1480 x1582))
(assert (= (x531 x1567) (ite (= (x1543 0) x1567) 1 (x59 x1567))))
(assert (x1480 x873))
(assert (x1480 x1243))
(assert (= (x470 320) (x124 320)))
(assert (= (x1794 (x721 (x1782 128))) (x1782 128)))
(assert (= (x1543 2316151882) (x721 2316151882)))
(assert (x1480 x1733))
(assert (x1480 x899))
(assert (x1480 x232))
(assert (= (x298 352) (x991 352)))
(assert (= (=> (and (= (= x1872 x1488) x151) (= x1872 (div x770 x1201)) (= x770 (mod (* x1201 x1488) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= 0 x1201) x673) (= (x858 384) x1488) (= (or x151 x673) x1749) (= x206 (= (ite x1749 1 0) 0)) (= (x285 (- x1076 x119)) x320)) (and (=> x206 x35) (=> (not x206) x1718))) x314))
(assert (x1480 x604))
(assert (x1480 x778))
(assert (= (x1859 640) (x1411 640)))
(assert (x1480 x338))
(assert (= (and x1239 x552) x1818))
(assert (x1480 x708))
(assert (=> (>= 10000 x1299) (= (x1543 x1299) (x721 x1299))))
(assert (= (x1782 160) (x1794 (x721 (x1782 160)))))
(assert (= (x1300 768) (x939 768)))
(assert (= (x1403 896) (x691 896)))
(assert (=> (>= 10000 (x1365 160)) (= (x1543 (x1365 160)) (x721 (x1365 160)))))
(assert (= (x191 736) (x1281 736)))
(assert (= (x175 672) (x260 672)))
(assert (= (x889 640) (x1904 640)))
(assert (= (x1794 (x721 (x1685 128))) (x1685 128)))
(assert (= (and (not x1720) x1405) x1193))
(assert (x1480 x1235))
(assert (x1480 x311))
(assert (= x1149 (and x1674 x570)))
(assert (= (x721 3092021830) (x1543 3092021830)))
(assert (= x411 (=> (and (= (x1024 224) x1633) (= (x1322 (x1543 40)) x22) (= x237 (> x1633 x276)) (= x276 (x99 (+ x1633 x22)))) (and (=> (not x237) x1207) (=> x237 x35)))))
(assert (x1480 x60))
(assert (x1480 x990))
(assert (= (x1676 320) (x1835 320)))
(assert (= (x462 768) (x1452 768)))
(assert (x1480 x150))
(assert (= (=> (= (< 0 x77) x994) (and (=> x994 x1325) (=> (not x994) x35))) x19))
(assert (x1480 x432))
(assert (= (x603 736) (x1534 736)))
(assert (x1480 x1023))
(assert (x1480 x1120))
(assert (= (x1146 224) (x1608 224)))
(assert (= 599290589 (x1794 (x1543 599290589))))
(assert (= (x611 640) (x763 640)))
(assert (x1480 x1517))
(assert (=> (>= 10000 x917) (= (x1543 x917) (x721 x917))))
(assert (= (x1794 (x1543 961581905)) 961581905))
(assert (= (x1469 864) (x686 864)))
(assert (= (x1497 896) (x1017 896)))
(assert (= x724 (=> (and (= (x1822 928) x1634) (= x350 (= x1622 20)) (= x1622 (x99 (+ x1634 1)))) (and (=> (not x350) x872) (=> x350 x1627)))))
(assert (= (x63 (x1543 40)) (ite (= (x1543 0) (x1543 40)) 1 (x59 (x1543 40)))))
(assert (x1480 x670))
(assert (x1480 x1748))
(assert (x1480 x446))
(assert (= (x686 640) (x1469 640)))
(assert (x1480 x1812))
(assert (x1480 x1260))
(assert (= (x1835 800) (x1676 800)))
(assert (= (x298 736) (x991 736)))
(assert (= (x1543 1020253707) (x721 1020253707)))
(assert (= (x688 864) (x945 864)))
(assert (x1480 x761))
(assert (= (x611 928) (x763 928)))
(assert (= (x1770 768) (x1272 768)))
(assert (x1480 x136))
(assert (x1480 x1667))
(assert (= (x470 896) (x124 896)))
(assert (x1480 x843))
(assert (x1480 x1730))
(assert (x1480 x204))
(assert (x1480 x1328))
(assert (x1480 x1329))
(assert (= (x1456 128) (x1794 (x721 (x1456 128)))))
(assert (= (ite (= (x1543 0) (x1543 43)) 1 (x1323 (x1543 43))) (x1322 (x1543 43))))
(assert (= (x1676 768) (x1835 768)))
(assert (= (x1794 (x721 x1164)) x1164))
(assert (= (=> (and (= (x99 (+ x655 x1582)) x1296) (= (> x1582 x1296) x1378) (= (x1330 (x1543 40)) x655) (= (x1556 224) x1582)) (and (=> x1378 x35) (=> (not x1378) x295))) x31))
(assert (= (x1794 (x1543 3504541104)) 3504541104))
(assert (= (x1615 928) (x835 928)))
(assert (= x650 (and x1453 (not x1359))))
(assert (x1480 x629))
(assert (= (x1562 704) (x766 704)))
(assert (= (x249 864) (x1443 864)))
(assert (x1480 x1012))
(assert (= (x561 320) (x453 320)))
(assert (= (x808 864) (x519 864)))
(assert (= (x1768 1056) x612))
(assert (= (ite (= (x1543 0) x822) 1 (x59 x822)) (x63 x822)))
(assert (x1480 x556))
(assert (= (x4 640) (x421 640)))
(assert (x1480 x15))
(assert (x1480 x1006))
(assert (x1480 x1914))
(assert (= (x1000 800) (ite (and x1616 x980) (x317 800) (x991 800))))
(assert (= (x1794 (x1543 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x1586 (x1363 160)))
(assert (= x699 (and x1252 (not x237))))
(assert (= (x1135 352) (x1141 352)))
(assert (= (x1615 160) (x1794 (x721 (x1615 160)))))
(assert (x1480 x1588))
(assert (= (x721 2209625481) (x1543 2209625481)))
(assert (= (x318 736) (x1832 736)))
(assert (x1480 x569))
(assert (= (x686 736) (x1469 736)))
(assert (= (x1008 672) (x839 672)))
(assert (= (x531 x905) (ite (= x905 (x1543 0)) 1 (x59 x905))))
(assert (= x1600 (x180 224)))
(assert (= (x1794 (x1543 1851080549)) 1851080549))
(assert (x1480 x1296))
(assert (= (x1543 4294967296) (x721 4294967296)))
(assert (x1480 x1501))
(assert (x1480 x1840))
(assert (= (x347 352) (x1807 352)))
(assert (x1480 x1058))
(assert (= x1197 (=> (= (< 31 x535) x114) (and (=> (not x114) x35) (=> x114 x529)))))
(assert (= (x1806 672) (ite (and x1613 x1525) (x1266 672) (x1676 672))))
(assert (= (x726 128) (x1794 (x721 (x726 128)))))
(assert (= (x365 352) (x1225 352)))
(assert (= (x1794 (x1543 464926286)) 464926286))
(assert (= (x124 704) (x470 704)))
(assert (= (x811 640) (x1679 640)))
(assert (x1480 x623))
(assert (x1480 x870))
(assert (= (x1281 928) (x191 928)))
(assert (x1480 x1637))
(assert (= true x1525))
(assert (x1480 x1122))
(assert (x1586 (x526 128)))
(assert (=> (<= (x1343 128) 10000) (= (x721 (x1343 128)) (x1543 (x1343 128)))))
(assert (x1480 x268))
(assert (= (x1794 (x1543 773487949)) 773487949))
(assert (= (and x1140 x1193) x666))
(assert (= (x162 640) (x167 640)))
(assert (= (x1806 800) (ite (and x1525 x1613) (x1266 800) (x1676 800))))
(assert (x1480 x1303))
(assert (= x659 (=> (and (= x444 (x1263 864)) (= x1444 (x99 (+ x609 x444))) (= x609 (x1263 768)) (= (x1263 704) x1850) (= (> x609 x1444) x1712)) (and (=> x1712 x35) (=> (not x1712) x427)))))
(assert (x1480 x1709))
(assert (x1480 x640))
(assert (= (x124 960) x633))
(assert (= x715 (and x404 x1744)))
(assert (x1480 x1417))
(assert (x1480 x1595))
(assert (= (and x715 x114) x1510))
(assert (x1480 x172))
(assert (x1586 (x726 160)))
(assert (= x1331 (or (and x1042 (not x1482)) x1190)))
(assert (=> (>= 10000 x1294) (= (x721 x1294) (x1543 x1294))))
(assert (x1480 x920))
(assert (= (ite (and x409 x1270 x780) (ite (and x1270 x354 x409 x780) (x362 (x721 274184521717934524641157099916833587200)) (x1262 (x721 274184521717934524641157099916833587200))) (x1262 (x721 274184521717934524641157099916833587200))) (x1019 (x721 274184521717934524641157099916833587200))))
(assert (=> (<= (x726 160) 10000) (= (x1543 (x726 160)) (x721 (x726 160)))))
(assert (x1480 x1647))
(assert (x1480 x1731))
(assert (x1480 x971))
(assert (x1480 x1697))
(assert (= (x63 x1724) (ite (= x1724 (x1543 0)) 1 (x59 x1724))))
(assert (= (x318 352) (x1832 352)))
(assert (= (=> (and (= (x271 896) x1913) (= x761 (x99 (+ x1837 x428))) (= x1837 (x510 864)) (= (> x428 x761) x842) (= x428 (x510 768))) (and (=> x842 x35) (=> (and (= x1609 (< 0 x406)) (not x842) (or (and (= x406 x370) (not x1609)) (and (> 4294967296 x359) (= 1 x370) x1609)) (= x1678 (x99 (+ x1837 x428)))) x360))) x786))
(assert (= (x1462 640) (ite (and x225 x674) (x548 640) (x21 640))))
(assert (= (x543 352) (x375 352)))
(assert (= (ite (and x980 x1616) (x317 640) (x991 640)) (x1000 640)))
(assert (x1480 x1489))
(assert (= (x24 320) (x717 320)))
(assert (x1480 x1362))
(assert (= (and (not x1224) x1373) x637))
(assert (x1586 x917))
(assert (= (x1859 704) (x1411 704)))
(assert (= (x1281 320) x328))
(assert (x1480 x194))
(assert (= (x721 3296657447) (x1543 3296657447)))
(assert (= x780 (and x1042 x1482)))
(assert (= (x506 864) (x1768 864)))
(assert (= (or (and x965 x166) (and x626 x751) (and (not x1698) x66) (and x176 x53) (and (not x1744) x404) (and x494 x893) (and x764 x1035) (and (not x114) x715) (and x570 (not x1674)) (and (not x737) x1513) (and x342 x891) (and x583 x1018) (and x1252 x237) (and x1778 x1159) (and x1373 x1224) (and x911 x1367) (and (not x1734) x784) (and x1712 x345) (and x1066 (not x1280)) (and x471 (not x1061)) (and x419 (not x469)) (and x1060 x699) (and x200 (not x562)) (and x663 x842) (and x1029 x1902) (and (not x1651) x650) (and x1720 x1405) (and x1095 x1493) (and x1407 x1612) (and x54 x1055) (and (not x424) x957) (and x676 x74) (and x1911 x505) (and x87 x999) (and x1359 x1453) (and x364 x1743) (and x1188 x1699) (and x1378 x1149) (and x1868 x927) (and x666 x1204) (and x1515 x207) (and x86 x341) (and x692 x1123) (and x741 x396) (and (not x538) x1364) (and x1544 x949) (and x813 (not x1277)) (and x206 x857) (and x1628 x1727) (and x451 (not x184)) (and x1656 x407) (and x621 x1470) (and x1603 x1312) (and x713 x356) (and x1818 (not x994)) (and x1719 x2) (and x564 (not x959)) (and x613 x152)) x690))
(assert (x1480 x1569))
(assert (x1480 x1282))
(assert (x1480 x1111))
(assert (= (x493 1056) (x812 1056)))
(assert (= (x1543 2869116585) (x721 2869116585)))
(assert (= (x811 672) (x1679 672)))
(assert (= (x618 352) (x1183 352)))
(assert (= (x648 928) (x733 928)))
(assert (=> (>= 10000 (x1316 160)) (= (x721 (x1316 160)) (x1543 (x1316 160)))))
(assert (x1586 (x1343 128)))
(assert (= (x1206 352) (x530 352)))
(assert (= (x483 640) (x750 640)))
(assert (= (x1606 384) (x1450 384)))
(assert (x1480 x1736))
(assert (= (+ 2 (x1794 x292)) (x1794 (x1777 x292 2))))
(assert (x1480 x49))
(assert (= (x260 1056) (x175 1056)))
(assert (= (x375 704) (x543 704)))
(assert (x1480 x55))
(assert (= (x1768 1024) (x506 1024)))
(assert (= (x1807 320) x1604))
(assert (x1480 x1668))
(assert (x1480 x1893))
(assert (x1480 x1112))
(assert (x1480 x366))
(assert (x1480 x1887))
(assert (x1480 x1700))
(assert (x1480 x14))
(assert (x1480 x28))
(assert (= (x76 640) (x306 640)))
(assert (x1480 x612))
(assert (= (x170 864) (x149 864)))
(assert (= (ite (= (x1543 9) (x1543 0)) 1 (x1323 (x1543 9))) (x1322 (x1543 9))))
(assert (x1480 x1844))
(assert (= x181 (=> (and (= x583 (< x14 x208)) (= x208 (x679 320))) (and (=> x583 x35) (=> (not x583) x474)))))
(assert (= (x282 704) (x1685 704)))
(assert (= (x1794 (x721 x1827)) x1827))
(assert (= (ite (= (x1543 43) (x1543 0)) 1 (x59 (x1543 43))) (x531 (x1543 43))))
(assert (=> (<= (x1259 128) 10000) (= (x1543 (x1259 128)) (x721 (x1259 128)))))
(assert (x1480 x1772))
(assert (= (and (not x927) x1868) x1778))
(assert (x1480 x406))
(assert (x1480 x1269))
(assert (x1480 x405))
(assert (x1480 x428))
(assert (= (x1807 928) (x347 928)))
(assert (= (x307 672) (x1210 672)))
(assert (x1480 x837))
(assert (= (x688 1056) (x945 1056)))
(assert (x1480 x1570))
(assert (= (x519 960) (x808 960)))
(assert (x1480 x75))
(assert (= (x1823 320) (x1418 320)))
(assert (= (x1679 864) (x811 864)))
(assert (x1480 x401))
(assert (= x1089 (=> (and (= x656 (x1806 768)) (= (x1806 800) x1303) (< 0 x371) (= x300 (> x656 x1303)) (< 31 x513)) (and (=> (not x300) x1702) (=> x300 x1246)))))
(assert (= (x1562 224) (x766 224)))
(assert (= (x1794 (x721 (x1685 160))) (x1685 160)))
(assert (=> (>= 10000 x1827) (= (x1543 x1827) (x721 x1827))))
(assert (= (x307 864) (x1210 864)))
(assert (x1480 x468))
(assert (x1480 x160))
(assert (x1480 x1444))
(assert (= (x704 (x721 x275)) (ite (and x325 x947 x1314) (ite (and x947 x1314 x325 x85) (x1658 (x721 x275)) (x1262 (x721 x275))) (x1262 (x721 x275)))))
(assert (= (x487 928) (x7 928)))
(assert (= (x1859 352) (x1411 352)))
(assert (= (x162 704) (x167 704)))
(assert (x1586 (x1587 160)))
(assert (x1480 x647))
(assert (= (x835 896) (x1615 896)))
(assert (x1480 x1514))
(assert (=> (<= (x1363 160) 10000) (= (x1543 (x1363 160)) (x721 (x1363 160)))))
(assert (x1480 x328))
(assert (= (=> (and (= x1639 (x318 224)) (= (> 1000000000000000000 x1639) x1220)) (and (=> x1220 x83) (=> (not x1220) x288))) x619))
(assert (= (x508 736) (x594 736)))
(assert (= (x1322 x1847) (ite (= (x1543 0) x1847) 1 (x1323 x1847))))
(assert (= (x1679 896) (x811 896)))
(assert (= (x175 704) (x260 704)))
(assert (=> (>= 10000 (x190 128)) (= (x1543 (x190 128)) (x721 (x190 128)))))
(assert (= (x940 736) (x398 736)))
(assert (= (x1615 288) (x835 288)))
(assert (= x1771 (=> (and (= x150 (x1322 x905)) (= (> x740 x150) x364) (= (x973 (x721 (x24 128)) (x721 (x24 160)) 0) x905) (= (x24 736) x740)) (and (=> (not x364) x1128) (=> x364 x35)))))
(assert (x1480 x1366))
(assert (= (x260 896) (x175 896)))
(assert (x1480 x1168))
(assert (=> (<= (x1208 160) 10000) (= (x1543 (x1208 160)) (x721 (x1208 160)))))
(assert (x1480 x1161))
(assert (= (or x577 (and (not x1189) x661)) x1349))
(assert (=> (>= 10000 (x1316 128)) (= (x721 (x1316 128)) (x1543 (x1316 128)))))
(assert (= (x63 (x721 x1827)) (ite (= (x1543 0) (x721 x1827)) 1 (x59 (x721 x1827)))))
(assert (= (x1411 672) (x1859 672)))
(assert (= (x175 928) (x260 928)))
(assert (x1480 x1191))
(assert (x1480 x159))
(assert (x1480 x597))
(assert (=> (>= 10000 (x170 128)) (= (x721 (x170 128)) (x1543 (x170 128)))))
(assert (= x1419 (x1794 (x721 x1419))))
(assert (x1480 x1866))
(assert (= (x733 896) (x648 896)))
(assert (= (x63 (x1543 10)) (ite (= (x1543 0) (x1543 10)) 1 (x59 (x1543 10)))))
(assert (x1480 x1851))
(assert (x1480 x1624))
(assert (x1480 x1855))
(assert (x1480 x395))
(assert (x1480 x1174))
(assert (= (x1794 (x721 (x726 160))) (x726 160)))
(assert (= (x1439 704) (x1152 704)))
(assert (= 348537858 (x1794 (x1543 348537858))))
(assert (x1480 x878))
(assert (x1480 x1907))
(assert (x1480 x1901))
(assert (x1480 x580))
(assert (= (x506 672) (x1768 672)))
(assert (= (x1198 640) (x234 640)))
(assert (= (x63 x553) (ite (= x553 (x1543 0)) 1 (x59 x553))))
(assert (= (x63 (x1543 44)) (ite (= (x1543 0) (x1543 44)) 1 (x59 (x1543 44)))))
(assert (= (x1823 672) (x1418 672)))
(assert (= (x487 704) (x7 704)))
(assert (= (x993 640) (x950 640)))
(assert (= (x365 864) (x1225 864)))
(assert (= (x1822 672) (x582 672)))
(assert (= 3296657447 (x1794 (x1543 3296657447))))
(assert (x1480 x1546))
(assert (x1480 x1757))
(assert (= (x1794 (x721 (x1615 128))) (x1615 128)))
(assert (=> (>= 10000 (x1685 160)) (= (x721 (x1685 160)) (x1543 (x1685 160)))))
(assert (= (x1171 672) (x534 672)))
(assert (x1480 x1094))
(assert (= (x506 736) (x1768 736)))
(assert (x1480 x1002))
(assert (x1586 (x1343 160)))
(assert (x1480 x1236))
(assert (= (x1443 768) (x249 768)))
(assert (= (=> (and (= (x954 896) x815) (= x431 (x582 928)) (= (x848 (x721 x785)) x1820) (= (not (< 0 x815)) x1344) (= x785 (x99 (+ 17 x431)))) (and x316 x1344)) x872))
(assert (= (x1225 640) (x365 640)))
(assert (= (x1794 (x721 (x1365 128))) (x1365 128)))
(assert (= x1481 (=> (and (not (= x1169 348537858)) (not (= x1169 4267106866)) (= 773487949 x1169) (not (= x1169 2835717307)) (not (= x1169 2757214935)) (not (= 464926286 x1169)) (not (= x1169 3296657447)) (not (= 3092021830 x1169)) (not (= x1169 31576340)) (not (= 596573372 x1169)) (= x1006 (x1323 (x1543 0))) (not (= x1169 1888058147)) (not (= 2681579215 x1169)) (not (= 2052391781 x1169)) (not (= 3504541104 x1169)) (not (= x1169 1401663147)) (not (= 2780307423 x1169)) (= x751 (> x1006 0)) (not (= 3065339685 x1169)) (not (= 2316151882 x1169)) (not (= 3184006219 x1169)) (not (= x1169 3963136098)) (not (= x1169 599290589)) (not (= 629314576 x1169)) (not (= x1169 1977493762)) (not (= 1851080549 x1169)) (not (= 1020253707 x1169)) (not (= 961581905 x1169)) (not (= x1169 157198259)) (not (= x1169 2209625481)) (not (= x1169 2869116585)) (not (= 3567397854 x1169)) (not (= 2484372501 x1169))) (and (=> x751 x35) (=> (not x751) x1763)))))
(assert (x1586 (x347 128)))
(assert (x1480 x1789))
(assert (x1480 x645))
(assert (=> (>= 10000 (x76 128)) (= (x1543 (x76 128)) (x721 (x76 128)))))
(assert (= (x1679 960) (x811 960)))
(assert (= (x1835 736) (x1676 736)))
(assert (x1480 x1895))
(assert (x1480 x758))
(assert (x1480 x1802))
(assert (x1480 x852))
(assert (= x1610 (=> (= x1698 (< 31 x1046)) (and (=> x1698 x1022) (=> (not x1698) x35)))))
(assert (= (x722 224) (x665 224)))
(assert (= (x543 736) (x375 736)))
(assert (x1480 x1355))
(assert (= (x185 640) (x1345 640)))
(assert (x1480 x67))
(assert (= (x722 768) (x665 768)))
(assert (= (x939 672) (x1300 672)))
(assert (x1480 x1883))
(assert (= (x1338 672) (x1793 672)))
(assert (= (x889 736) (x1904 736)))
(assert (=> (>= 10000 (x1456 128)) (= (x1543 (x1456 128)) (x721 (x1456 128)))))
(assert (= (x1794 (x1543 2869116585)) 2869116585))
(assert (x1480 x1244))
(assert (= (ite (= (x1543 0) x1783) 1 (x59 x1783)) (x531 x1783)))
(assert (x1586 (x253 160)))
(assert (= (x688 896) (x945 896)))
(assert (= x474 (=> (and (= (x285 (- x14 x208)) x716) (= x1540 (x939 384)) (= (< 0 x1540) x1684) (= (x1300 416) x1752)) (and (=> x1684 x1422) (=> (not x1684) x1016)))))
(assert (x1480 x275))
(assert (= (x594 640) (x508 640)))
(assert (= x1917 (=> (and (= x1235 x202) (= (ite (< x1231 32) x1231 32) x1249) (= (x138 x706) x1062) (= (x1608 224) x917) (or (not x196) (and (= (mod (* x1660 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x255) x196 (= (x817 x1878 x255) x327) (= (x285 (- 32 x1668)) x1660) (> x327 0) (= x1668 (x559 320)) (= (x559 352) x1878))) (= x479 x343) (= (> x264 0) x196) (= (x1430 736) x1254) (not (> x491 x799)) (= x491 (x1319 736)) (= (x940 576) x79) (= x635 x479) (> x1848 0) (or (and x497 (> 4294967296 x204)) (not x497)) (= (x285 (- x799 x491)) x1194) (= (x747 768) x1555) (= x1709 (x1368 384)) (= x540 x1191) (<= 0 x1235) (= x264 (x559 320)) (>= x335 0) (= (x1368 256) x252) (not (< x1062 x1449)) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1356) true) (= (> x1726 0) x805) (= x706 (x973 (x721 (x1430 128)) (x721 (x1430 160)) 0)) (= x874 (x27 672)) (= x536 (x760 (x1543 10))) (>= 1461501637330902918203684832716283019655932542975 x343) (<= x335 1461501637330902918203684832716283019655932542975) (= x859 (x99 (+ x1709 64))) (or (not x1081) (and (= x429 (<= x677 (x781 (x721 274184521717934524641157099916833587200)))) x429 x681 (= (= (x781 (x721 x917)) x640) x681) (= (x1585 (x721 274184521717934524641157099916833587200)) x677) (= x640 (x1585 (x721 x917))) x1081 (> 4294967296 x1231))) (= x1893 (x99 (+ x1709 512))) (<= x1235 1461501637330902918203684832716283019655932542975) (= (x559 736) x311) (= x1631 (x1860 768)) (= (x315 288) x1406) (= (x285 (- x1062 x1449)) x1386) (or (not x805) (and x805 (> 4294967296 x638))) (= x497 (> x1286 0)) (= (> x1848 0) x1081) (= x658 (x99 (+ x1709 480))) (= (x1157 800) x605) (= (x1447 768) x1815) (= x799 (x1704 (x1543 9))) (= (x99 (+ x79 32)) x1355) (>= x343 0) (< 35 x1356) (= (x1430 736) x1449)) x1110)))
(assert (= (x665 352) (x722 352)))
(assert (x1480 x1278))
(assert (x1480 x1605))
(assert (= (x950 320) (x993 320)))
(assert (=> (>= 10000 (x1343 160)) (= (x721 (x1343 160)) (x1543 (x1343 160)))))
(assert (=> (>= 10000 x275) (= (x1543 x275) (x721 x275))))
(assert (= (x332 736) (x776 736)))
(assert (x1480 x339))
(assert (= (=> (= x562 (< 31 x896)) (and (=> x562 x411) (=> (not x562) x35))) x1325))
(assert (= (x1008 896) (x839 896)))
(assert (= x957 (and x737 x1513)))
(assert (= (x307 320) (x1210 320)))
(assert (= (x1794 (x1543 1000000000000000000)) 1000000000000000000))
(assert (x1480 x371))
(assert (x1480 x1164))
(assert (x1480 x1824))
(assert (x1480 x1348))
(assert (x1480 x1454))
(assert (x1480 x1391))
(assert (= (ite (and x980 x1616) (x317 320) (x991 320)) (x1000 320)))
(assert (= x1037 (=> (and (= (x772 896) x243) (= (x1322 x1567) x1427) (= x1012 (x720 1024)) (= (x306 256) x1695) (= x1494 (x306 288)) (= (x973 (x721 (x76 128)) (x721 (x76 160)) 0) x1910) (= x1282 (x99 (+ x1602 x899))) (= (x1777 x1910 6) x1567) (= (x1054 224) x522) (= x741 (> x1695 x1494))) (and (=> (not x741) x426) (=> x741 x35)))))
(assert (x1586 (x526 160)))
(assert (= (x180 640) (x1324 640)))
(assert (x1480 x473))
(assert (= (and (not x54) x1055) x379))
(assert (x1480 x1828))
(assert (= (x875 (x721 x1164)) (ite (and x1081 x478) (x781 (x721 x1164)) (x1585 (x721 x1164)))))
(assert (= (x750 736) (x483 736)))
(assert (x1480 x689))
(assert (= (x1822 640) (x582 640)))
(assert (x1480 x782))
(assert (= (x1281 704) (x191 704)))
(assert (= (x1794 (x1777 x280 2)) (+ 2 (x1794 x280))))
(assert (x1480 x277))
(assert (x1480 x386))
(assert (= (x306 288) x1427))
(assert (= (x1462 320) (ite (and x225 x674) (x548 320) (x21 320))))
(assert (x1480 x264))
(assert (= (x996 736) (x979 736)))
(assert (x1480 x129))
(assert (= (x1794 (x721 (x262 160))) (x262 160)))
(assert (x1480 x1279))
(assert (x1480 x1864))
(assert (= (x1794 (x1777 x1910 6)) (+ (x1794 x1910) 6)))
(assert (x1480 x1701))
(assert (x1480 x135))
(assert (x1480 x38))
(assert (=> (<= (x347 128) 10000) (= (x721 (x347 128)) (x1543 (x347 128)))))
(assert (= (x945 704) (x688 704)))
(assert (x1480 x1376))
(assert (x1480 x273))
(assert (= (x835 704) (x1615 704)))
(assert (=> (>= 10000 (x1587 160)) (= (x1543 (x1587 160)) (x721 (x1587 160)))))
(assert (= (x306 352) (x76 352)))
(assert (=> (>= 10000 (x1271 128)) (= (x1543 (x1271 128)) (x721 (x1271 128)))))
(assert (= (x462 224) (x1452 224)))
(assert (= (x1259 160) (x1794 (x721 (x1259 160)))))
(assert (x1480 x359))
(assert (= (x594 320) (x508 320)))
(assert (x1480 x488))
(assert (= (=> (and (= (> x873 x914) x927) (= x873 (x1330 (x1543 41))) (= (x99 (+ x655 x1582)) x588) (= (x1443 288) x14)) (and (=> (not x927) x1504) (=> x927 x35))) x295))
(assert (x1480 x479))
(assert (= (x1794 (x1777 x1775 6)) (+ 6 (x1794 x1775))))
(assert (x1480 x853))
(assert (= (x979 672) (x996 672)))
(assert (x1480 x1144))
(assert (= (and x1470 (not x621)) x1881))
(assert (= (x271 864) (x836 864)))
(assert (= (x530 736) (x1206 736)))
(assert (x1480 x658))
(assert (x1480 x655))
(assert (x1480 x928))
(assert (x1480 x450))
(assert (= (x1615 224) (x835 224)))
(assert (x1480 x1528))
(assert (= (x1316 128) (x1794 (x721 (x1316 128)))))
(assert (x1480 x1811))
(assert (x1480 x656))
(assert (x1480 x989))
(assert (x1480 x16))
(assert (x1480 x1827))
(assert (= (x1008 992) (x839 992)))
(assert (x1480 x588))
(assert (x1480 x1154))
(assert (= (x1770 928) (x1272 928)))
(assert (x1586 (x1782 128)))
(assert (x1480 x43))
(assert (x1480 x327))
(assert (= x459 (=> (and (>= x1474 0) x1784 (not (> x1565 10000)) (= x818 x1313) (= x1663 false) (= x867 (x265 736)) (> x867 0) (not (= 961581905 x987)) (not (= x987 2835717307)) (<= 0 x381) (not (= x987 2757214935)) (not (= 31576340 x987)) (= x914 x670) (= x202 x248) (or (and (= x615 (x973 (x721 (x1456 128)) (x721 (x1456 160)) 0)) (= x1637 (x63 x615)) x1831) (not x1831)) (>= x248 0) (= x1825 (x265 736)) (>= 1461501637330902918203684832716283019655932542975 x1395) (<= 0 x1293) (not (= 2484372501 x987)) (= x1724 (x973 (x721 (x265 128)) (x721 (x265 160)) 0)) (= (x1262 (x721 274184521717934524641157099916833587200)) x381) (= (> x708 0) x1613) (not (= 629314576 x987)) (not (= x987 3184006219)) (= 773487949 x987) (not (= x987 3567397854)) (> x1356 35) (not (= x987 596573372)) (not (= 1020253707 x987)) (not (= 1888058147 x987)) (= x1784 (= x410 x908)) (= x635 x1342) (<= 0 x1395) (<= x248 1461501637330902918203684832716283019655932542975) (>= x1215 0) (>= 1461501637330902918203684832716283019655932542975 x1474) (= false x1212) (not (= 1401663147 x987)) (not (= 2052391781 x987)) (or (and (= x65 (x576 352)) (not x1653)) (and (or (and (= x971 x712) (not x1568)) (and (= x712 1) (< x829 4294967296) x1568)) (= x1518 (= 0 x974)) (= x578 (div x1600 x1692)) (or (not x1912) (and (= (div x1465 x861) x173) x1912 (not (= x43 0)) (= x861 (x1621 224)) (= (x1621 256) x843) (= x1465 (mod (* x251 x861) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< x843 x1670)) (= (x1621 256) x251) (= (x63 (x1543 43)) x1496) (= x43 (ite x1862 1 0)) (= (= x251 x173) x736) (= (or x736 x319) x1862) (= x450 (x285 (- x843 x1670))) (= x1670 (div x1465 1000000000000000000)) (= (= x861 0) x319))) (= (x63 (x1543 9)) x1857) (not (= 0 x1033)) (= x1623 (x63 (x1543 41))) (= x457 (x63 (x1543 40))) (= x565 (mod (* x574 x974) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x709 x765)) (= (x144 320) x709) (= (= x574 x1486) x1177) (= (< x122 1000000000000000000) x1912) (= x574 (x913 384)) (= (x902 224) x1866) (= (x576 352) x974) (not (= 0 x969)) (= x1033 (ite x1900 1 0)) (= x323 (= x578 x509)) (= (x180 224) x122) (= (div x565 x1857) x1391) (= (div x565 x974) x1486) x1653 (= (x63 (x1543 44)) x509) (= (x99 (+ x1866 x457)) x1173) (= (x285 (- x765 x709)) x423) (not (>= (+ x457 x1866) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (or x1177 x1518) x242) (= (> x971 0) x1568) (= x765 (x1324 288)) (not (> x1623 x670)) (= (mod (* x1692 x509) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1600) (= (ite x242 1 0) x969) (= (x285 (- x914 x1623)) x1692) (= x590 (= 0 x1692)) (= (or x323 x590) x1900) (not (= x1857 0)) (< 0 x712) (< 31 x829))) (= x210 (x59 (x1543 0))) (= x1565 (x1823 704)) (= x202 x908) x304 (= x410 x1448) (= x834 773487949) (not (= 157198259 x987)) (not (> x210 0)) (not (= 348537858 x987)) (= x878 x1215) (= (x1823 736) x1856) (not (= 2681579215 x987)) (= (x1564 (x721 274184521717934524641157099916833587200)) x380) (= false x334) (= x475 (x265 736)) (= (x63 x1724) x1855) (= x159 (x289 800)) (not (= x987 3296657447)) (not (= x987 2869116585)) (not (= x987 3092021830)) (not (= x987 1851080549)) (= x540 x460) (not (= 3504541104 x987)) (not (= 2209625481 x987)) (not (= 1977493762 x987)) (= x1895 (x63 (x1543 9))) (not (< x1855 x1825)) (= x1293 x202) (<= x1215 1461501637330902918203684832716283019655932542975) (not (= 4267106866 x987)) (= (> (x1564 (x721 274184521717934524641157099916833587200)) 0) x304) (not (> 4 x1356)) (= x1831 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1856)) (<= x1448 1461501637330902918203684832716283019655932542975) (= x1653 (> x1895 0)) (not (= x987 3065339685)) (not (= 2316151882 x987)) (not (= 464926286 x987)) (not (= 3963136098 x987)) (= x1395 x1342) (> x380 0) (>= 1461501637330902918203684832716283019655932542975 x1293) (not (= x987 599290589)) (or (and (not x1613) (= x371 x708)) (and (= 1 x371) x1613 (> 4294967296 x513))) (not (= x987 2780307423)) (not (> x1313 0)) (= x567 (x1418 640)) (= 1 x1153) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1356) true) (= x1036 false) (<= 0 x1448)) x1089)))
(assert (x1480 x390))
(assert (= x1248 (=> (and (= x552 (< 0 x199)) (= x199 (x1322 (x1543 9))) (= (x24 736) x1475)) (and (=> (and (= (x717 352) x569) (not x552)) x731) (=> (and (= (> x392 0) x854) (= (x717 352) x1201) x552 (or (and (= 1 x77) x854 (> 4294967296 x896)) (and (not x854) (= x392 x77)))) x19)))))
(assert (= (ite (= (x1543 0) x88) 1 (x59 x88)) (x531 x88)))
(assert (= (x1562 640) (x766 640)))
(assert (= (x1768 640) (x506 640)))
(assert (= (x1497 704) (x1017 704)))
(assert (=> (<= (x191 160) 10000) (= (x721 (x191 160)) (x1543 (x191 160)))))
(assert (= (x1403 320) (x691 320)))
(assert (= (ite (= x1165 (x1543 0)) 1 (x59 x1165)) (x63 x1165)))
(assert (x1480 x173))
(assert (=> (>= 10000 (x726 128)) (= (x721 (x726 128)) (x1543 (x726 128)))))
(assert (x1480 x1173))
(assert (x1480 x1156))
(assert (= (x307 768) (x1210 768)))
(assert (= (x1543 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x721 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x1794 (x721 274184521717934524641157099916833587200)) 274184521717934524641157099916833587200))
(assert true)
(assert (x1480 x567))
(assert (= (ite (and x225 x674) (x548 704) (x21 704)) (x1462 704)))
(assert (= (x594 352) (x508 352)))
(assert (= (x836 672) (x271 672)))
(assert (= (x1794 (x1543 2484372501)) 2484372501))
(assert (= x1874 (=> (and (= x297 (x190 320)) (= x223 (x1322 x1065)) (= x929 (x973 (x721 (x190 128)) (x721 (x190 160)) 0)) (= x1065 (x1777 x929 2)) (= x713 (< x223 x297)) (= x1288 (x1807 224))) (and (=> (not x713) x1638) (=> x713 x35)))))
(assert (x1480 x240))
(assert (x1480 x1717))
(assert (x1480 x841))
(assert (x1480 x1379))
(assert (= (x170 736) (x149 736)))
(assert (x1480 x1633))
(assert (x1480 x584))
(assert (= (x648 352) (x733 352)))
(assert (= (x1807 256) (x347 256)))
(assert (x1480 x47))
(assert (x1480 x1695))
(assert (= (=> (and (= (x133 (x1543 9)) x468) (= x545 (x226 736)) (= x999 (< x468 x545))) (and (=> (not x999) x1728) (=> x999 x35))) x233))
(assert (x1480 x1163))
(assert (= (x398 320) (x940 320)))
(assert (x1480 x1434))
(assert (= (x839 864) (x1008 864)))
(assert (x1480 x58))
(assert (x1480 x266))
(assert (x1480 x29))
(assert (x1480 x1356))
(assert (x1480 x1838))
(assert (= (ite (= x905 (x1543 0)) 1 (x1323 x905)) (x1322 x905)))
(assert (= (x191 1056) (x1281 1056)))
(assert (=> (<= (x1259 160) 10000) (= (x721 (x1259 160)) (x1543 (x1259 160)))))
(assert (= (=> (= (< 0 x501) x469) (and (=> x469 x941) (=> (not x469) x35))) x568))
(assert (= (x421 704) (x4 704)))
(assert (x1480 x607))
(assert (= 2316151882 (x1794 (x1543 2316151882))))
(assert (= (=> (and (= x358 (> x397 0)) (or (and (not x358) (= x160 x397)) (and (< x1362 4294967296) (= x160 1) x358))) x1200) x1627))
(assert (= (x487 320) (x7 320)))
(assert (x1480 x118))
(assert (x1480 x1522))
(assert (= (x1562 736) (x766 736)))
(assert (x1480 x770))
(assert (= x53 (and x61 x1581)))
(assert (x1586 (x726 128)))
(assert (= (x1904 352) (x889 352)))
(assert (x1480 x228))
(assert (= (x733 640) (x648 640)))
(assert (= (ite (= x706 (x1543 0)) 1 (x59 x706)) (x531 x706)))
(assert (= (x1381 736) (x21 736)))
(assert (x1480 x367))
(assert (x1480 x545))
(assert (= (x1171 352) (x534 352)))
(assert (=> (>= 10000 (x265 160)) (= (x1543 (x265 160)) (x721 (x265 160)))))
(assert (= (x1300 352) (x939 352)))
(assert (= (and (not x494) x893) x965))
(assert (x1480 x934))
(assert (x1480 x1026))
(assert (= (x1141 704) (x1135 704)))
(assert (= (x763 736) (x611 736)))
(assert (x1480 x1623))
(assert (x1480 x103))
(assert (= x942 (=> (and (= (x1497 768) x521) (> x1124 31) (= (x1017 992) x467) (= (> x521 x389) x1270) (= (x1497 960) x389) (< 0 x1184)) (and (=> (and (= (x1497 960) x915) (or (not x409) (and (= x1665 (x648 1024)) (not (< x60 x1538)) (= (x1777 x742 6) x553) (or (and (= (= x449 (x362 (x721 x968))) x919) (= x1232 (<= x1502 (x362 (x721 274184521717934524641157099916833587200)))) x354 x1232 x919 (= x1502 (x1262 (x721 274184521717934524641157099916833587200))) (> 4294967296 x5) (= (x1262 (x721 x968)) x449)) (not x354)) (or (and (= x218 (x285 (- x268 x1751))) (= (x1071 1024) x1864) (= (x973 (x721 (x686 128)) (x721 (x686 160)) 0) x62) (= (x698 224) x735) (= x694 (x1777 x215 8)) (= (x1590 (x1543 40)) x1084) (= (x648 768) x1269) (= (x698 288) x268) (not (> x1657 x1269)) (= x1595 (x1230 x694)) (not (>= (+ x928 x1595) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x853 (x99 (+ x1647 x1864))) (= x1894 (x369 224)) (= x1751 (x698 256)) (not (< x1084 x258)) (= x1104 (x1777 x62 6)) x589 (or (and (= (div x1854 x1112) x1643) (= x870 (x835 320)) (= (ite (> x1750 x178) x178 x1750) x50) (= x1764 (= x1626 x1643)) (not x660) (= x1112 (x1469 256)) (not (= x697 0)) (= (or x1764 x1317) x1551) (= (x63 (x1543 39)) x1626) (= x178 (x63 x822)) (= (x1777 x280 2) x822) (or (and (not (> x1088 x1781)) (not x1007) (= (x285 (- x1523 x432)) x547) (= x279 (x1777 x292 2)) (= x1588 (x285 (- x1781 x1088))) (= (x973 (x721 (x1365 128)) (x721 (x1365 160)) 0) x292) (= (x63 x279) x1781) (= (x267 (x1543 39)) x1523) (= (x835 224) x504) (= (x1365 320) x1088) (not (< x1523 x432)) (= (x1365 320) x432)) x1007) (= x280 (x973 (x721 (x1615 128)) (x721 (x1615 160)) 0)) (= x1317 (= x1112 0)) (= x1007 (= 0 x870)) (= (x1469 224) x1056) (not (= 0 x1278)) (= (mod (* x1112 x1626) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1854) (= (div x1854 x1278) x1750) (= x1278 (x63 (x1543 40))) (= x697 (ite x1551 1 0))) x660) (= x258 (x1192 256)) (= x1004 (x973 (x721 (x1192 128)) (x721 (x1192 160)) 0)) (= x925 (x600 1024)) (= (x63 x1104) x1048) (= (x1777 x1004 6) x8) (= x797 (x1469 256)) (not (> x797 x1703)) (= (x99 (+ x928 x1595)) x937) (not (>= (+ x1647 x1864) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1657 (x648 1024)) (not (< x268 x1751)) (= x215 (x973 (x721 (x698 128)) (x721 (x698 160)) 0)) (= x660 (= 0 x140)) (= (x698 256) x928) (= x1703 (x1469 288)) (= x936 (x285 (- x1084 x258))) (= (x955 896) x266) (= x1647 (x1071 864)) (= x140 (x63 (x1543 39))) (= (x285 (- x1269 x1657)) x1897) (= (x70 224) x1352)) (not x589)) (or (and (> 4294967296 x49) x1460 (= 1 x146)) (and (not x1460) (= x146 x194))) (< 31 x49) (< 31 x5) (= x1630 (x285 (- x131 x294))) (= (x1770 896) x968) x409 (= (x433 896) x488) (= (x1272 992) x728) (= x228 (x1842 1056)) (= (x1402 x553) x60) (= (x285 (- x1710 x1268)) x581) (not (< x1710 x1268)) (= x1710 (x1340 (x1543 40))) (= (x733 1088) x131) (= (< 0 x274) x354) (= x294 (x733 960)) (> x274 0) (= x1538 (x1208 1056)) (= x1460 (< 0 x194)) (= x1268 (x1208 1056)) (= (x285 (- x60 x1538)) x28) (> x146 0) (not (> x294 x131)) (= (x973 (x721 (x1208 128)) (x721 (x1208 160)) 0) x742) (= x589 (> x1665 0)))) (= (x1497 768) x622) (= x409 (< 0 x1111)) (= (x336 896) x465) x1270 (not (< x622 x915)) (= (ite (> x920 x1748) x1748 x920) x617) (= (x973 (x721 (x170 128)) (x721 (x170 160)) 0) x376) (= x1748 (x63 x1389)) (= x920 (x336 992)) (= (x285 (- x622 x915)) x209) (= (x1777 x376 6) x1389) (= x1111 (x149 992))) x1284) (=> (not x1270) x464)))))
(assert (x1480 x1413))
(assert (= x464 (=> (and (> x1409 31) (= (x101 768) x1026) (= (div x1093 10000) x628) (= x1526 (< x631 x1426)) (= (ite x1170 1 0) x1440) (> x1789 0) (not (> x901 x628)) (= (mod (* x1754 x1023) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1093) (= (x594 896) x631) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1593 x1026))) (= x1593 (x101 864)) (not (= 0 x1440)) (= (= x1023 0) x246) (= x1754 (x99 (+ x1026 x1593))) (= (or x246 x116) x1170) (= (= x1122 x1754) x116) (= x1426 (x594 768)) (= (div x1093 x1023) x1122) (or (not x1526) (and (= x349 (or x1542 x643)) (= x608 (x1384 768)) (= (x285 (- x245 x782)) x1464) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1863 x777))) (= x1542 (= x1027 x687)) (not (< x670 x100)) (not (< x55 x216)) (= x632 (x1384 864)) (or (and (not x1126) (= x1830 x81)) (and x1126 (= x81 1) (> 4294967296 x270))) (= (< x1063 1000000000000000000) x654) (= x216 (x281 736)) (= x1863 (x756 224)) (= (x162 288) x245) (= (x544 416) x1075) (not (> x782 x245)) (= x1102 (x1302 384)) (= x782 (x1041 320)) (< 0 x81) (not (= x921 0)) (= (= 0 x1578) x643) (= (x167 224) x1063) (= (< 0 x1102) x664) (= x1126 (< 0 x1830)) (= (x594 896) x1454) (= (mod (* x1578 x687) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1841) (= (x99 (+ x1863 x777)) x1461) (= (x198 928) x930) (or (and (= x1009 (x302 (x1543 9))) x664 (not (= x1020 0)) (= x1020 (x1302 384)) (= x443 (div x1707 x1020)) (= x1707 (mod (* x1009 x787) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1094 (div x1707 x787)) (= (or x438 x17) x1552) (= x438 (= x1094 x1009)) (= x17 (= 0 x787)) (= x787 (x1302 352)) (not (= 0 x92)) (= (ite x1552 1 0) x92)) (not x664)) (= x921 (ite x349 1 0)) (= (div x1841 x1578) x1027) (= x100 (x302 (x1543 41))) (= (x302 (x1543 40)) x777) (not (>= (+ x608 x632) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x302 (x1543 44)) x687) (or (not x654) (and (= x1681 (x1003 224)) (not (= x1489 0)) (= (div x1438 1000000000000000000) x725) (= x542 (x1003 256)) (= x1298 (or x1785 x1646)) (= (x285 (- x542 x725)) x15) (= x1646 (= 0 x1681)) x654 (= x1438 (mod (* x1716 x1681) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= x1072 x1716) x1785) (not (< x542 x725)) (= x1489 (ite x1298 1 0)) (= (x302 (x1543 43)) x791) (= x1072 (div x1438 x1681)) (= x1716 (x1003 256)))) (= x1578 (x285 (- x914 x100))) x1526 (= x55 (x281 640)) (< 31 x270) (= (x99 (+ x632 x608)) x163))) (= x901 (x101 864)) (= (x508 928) x895) (= x1903 (> x573 0)) (or (and (not x1903) (= x573 x1789)) (and (= 1 x1789) (< x1409 4294967296) x1903)) (= x1023 (x101 704))) x1702)))
(assert (= (x162 352) (x167 352)))
(assert (x1480 x1913))
(assert (= (x1543 1889567281) (x721 1889567281)))
(assert (x1480 x1649))
(assert (= 2780307423 (x1794 (x1543 2780307423))))
(assert (= (x347 224) (x1807 224)))
(assert (x1480 x895))
(assert (x1480 x475))
(assert (= (x1742 672) (x1485 672)))
(assert (= (x493 736) (x812 736)))
(assert (= (x1141 768) (x1135 768)))
(assert (x1480 x525))
(assert (= (x950 704) (x993 704)))
(assert (x1480 x509))
(assert (x1480 x1388))
(assert (x1480 x81))
(assert (= (=> (and (= (x24 736) x38) (= x184 (> x38 0))) (and (=> x184 x1248) (=> (not x184) x35))) x1128))
(assert (= (x76 704) (x306 704)))
(assert (x1586 (x76 160)))
(assert (= (x1469 928) (x686 928)))
(assert (x1480 x1155))
(assert (= (x1008 704) (x839 704)))
(assert (= (x1302 640) (x544 640)))
(assert (x1586 (x253 128)))
(assert (= (x7 736) (x487 736)))
(assert (= (x707 320) (x11 320)))
(assert (x1480 x783))
(assert (x1480 x1231))
(assert (x1480 x1852))
(assert (= (x1794 (x721 (x262 128))) (x262 128)))
(assert (= x48 (=> (= (< 0 x1305) x1651) (and (=> (not x1651) x35) (=> (and (= (x99 (+ 32 x1107)) x1257) (= (ite (< x897 32) x897 32) x795) (or (not x820) (and (< x310 4294967296) x820)) (= (> x693 0) x820) x1651 (= (x1183 576) x1107)) x192)))))
(assert (= (x1469 224) (x686 224)))
(assert (x1586 (x1316 160)))
(assert (= (x365 1056) x647))
(assert (= 4267106866 (x1794 (x1543 4267106866))))
(assert (= (ite (and x965 (not x166)) (ite (and x637 x1315 x701) (x1664 (x721 274184521717934524641157099916833587200)) (x875 (x721 274184521717934524641157099916833587200))) (x875 (x721 274184521717934524641157099916833587200))) (x1527 (x721 274184521717934524641157099916833587200))))
(assert (x1480 x1233))
(assert (= (x1452 672) (x462 672)))
(assert (x1480 x218))
(assert (= (x1198 896) x1802))
(assert (= (x1794 (x721 (x1077 128))) (x1077 128)))
(assert (x1480 x178))
(assert (= (x282 928) (x1685 928)))
(assert (= (x1272 864) (x1770 864)))
(assert (x1480 x542))
(assert (= (=> (= x538 (< 31 x395)) (and (=> x538 x952) (=> (not x538) x35))) x941))
(assert (= (x1849 320) 0))
(assert (x1586 (x190 160)))
(assert (x1480 x208))
(assert (=> (>= 10000 (x24 128)) (= (x1543 (x24 128)) (x721 (x24 128)))))
(assert (= x66 (and x784 x1734)))
(assert (x1480 x793))
(assert (x1480 x1654))
(assert (= (x1152 672) (x1439 672)))
(assert (x1480 x998))
(assert (x1480 x461))
(assert (= (x945 352) (x688 352)))
(assert (= x880 (or x1349 (and (not x961) x705) (and x511 x350))))
(assert (= (x1302 384) x1075))
(assert (x1480 x855))
(assert (= (x1794 (x1543 3092021830)) 3092021830))
(assert (x1480 x787))
(assert (x1480 x1449))
(assert (= (x63 x279) (ite (= x279 (x1543 0)) 1 (x59 x279))))
(assert (= (x1679 736) (x811 736)))
(assert (= (x561 768) (x453 768)))
(assert (x1480 x1254))
(assert (= (x493 896) (x812 896)))
(assert (= x104 (and x1018 (not x583))))
(assert (=> (<= (x76 160) 10000) (= (x1543 (x76 160)) (x721 (x76 160)))))
(assert (= (x721 596573372) (x1543 596573372)))
(assert (= (ite (= (x721 x1419) (x1543 0)) 1 (x59 (x721 x1419))) (x531 (x721 x1419))))
(assert (= x1276 (=> (and (= x74 (> x899 x998)) (= x1602 (x441 1024)) (= x1375 (x285 (- x802 x557))) (= x998 (x99 (+ x1602 x899))) (= (x441 864) x899)) (and (=> x74 x35) (=> (not x74) x1037)))))
(assert (= (x945 640) (x688 640)))
(assert (= (x1807 736) (x347 736)))
(assert (x1480 x79))
(assert (= (x582 704) (x1822 704)))
(assert (= (x530 288) (x1206 288)))
(assert (= (x1208 160) (x1794 (x721 (x1208 160)))))
(assert (x1480 x1500))
(assert (= (x124 928) (x470 928)))
(assert (x1480 x1750))
(assert (= (x1794 (x721 (x1192 128))) (x1192 128)))
(assert (x1480 x1857))
(assert (= (x11 352) (x707 352)))
(assert (x1480 x1382))
(assert (x1480 x1435))
(assert (= (x453 736) (x561 736)))
(assert (= (x648 1024) (x733 1024)))
(assert (= (x1135 672) (x1141 672)))
(assert (= (x11 384) (x707 384)))
(assert (=> (<= x1419 10000) (= (x1543 x1419) (x721 x1419))))
(assert (= (x182 640) (x1662 640)))
(assert (x1480 x834))
(assert (= (x1543 31576340) (x721 31576340)))
(assert (= (x1541 320) (x537 320)))
(assert (= (x1439 768) (x1152 768)))
(assert (x1480 x163))
(assert (= (x182 736) (x1662 736)))
(assert (= 3184006219 (x1794 (x1543 3184006219))))
(assert (x1480 x1790))
(assert (x1480 x460))
(assert (= (x506 768) (x1768 768)))
(assert (= (x483 864) (x750 864)))
(assert (x1480 x1461))
(assert (= (x1403 672) (x691 672)))
(assert (= (and x947 x1314) x102))
(assert (x1480 x900))
(assert (= (x611 672) (x763 672)))
(assert (x1480 x1817))
(assert (x1480 x1013))
(assert (= (x1439 640) (x1152 640)))
(assert (x1480 x1474))
(assert (x1480 x303))
(assert (= (x717 672) (x24 672)))
(assert (x1480 x373))
(assert (= x1868 (and x1149 (not x1378))))
(assert (= (x4 768) (x421 768)))
(assert (x1480 x748))
(assert (x1480 x1643))
(assert (= x1630 (x648 1056)))
(assert (=> (>= 10000 (x175 160)) (= (x721 (x175 160)) (x1543 (x175 160)))))
(assert (= (ite (= (x721 x1299) (x1543 0)) 1 (x59 (x721 x1299))) (x63 (x721 x1299))))
(assert (=> (>= 10000 x136) (= (x721 x136) (x1543 x136))))
(assert (= (x582 768) (x1822 768)))
(assert (= (x1225 896) (x365 896)))
(assert (= (x1198 768) (x234 768)))
(assert (= (x271 896) x128))
(assert (x1480 x56))
(assert (x1480 x1604))
(assert (= (x124 736) (x470 736)))
(assert (= (x594 672) (x508 672)))
(assert (x1480 x860))
(assert (=> (>= 10000 (x1679 160)) (= (x1543 (x1679 160)) (x721 (x1679 160)))))
(assert (x1586 (x1587 128)))
(assert (x1480 x310))
(assert (= (x648 320) (x733 320)))
(assert (= (x603 704) (x1534 704)))
(assert (x1480 x1820))
(assert (x1480 x1258))
(assert (= (=> (and (= (x1322 (x1543 39)) x1307) (= (mod (* x1307 x393) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1387) (= x207 (= 0 (ite x1227 1 0))) (= x1227 (or x1360 x960)) (= x393 (x306 256)) (= x960 (= 0 x393)) (= x1360 (= x1307 x1580)) (= x1580 (div x1387 x393))) (and (=> (not x207) x1721) (=> x207 x35))) x1385))
(assert (x1480 x1511))
(assert (= (x519 736) (x808 736)))
(assert (x1480 x1305))
(assert (x1480 x1255))
(assert (= (x265 704) (x576 704)))
(assert (= (ite (= (x721 x136) (x1543 0)) 1 (x1323 (x721 x136))) (x1322 (x721 x136))))
(assert (= x1470 (and (not x1060) x699)))
(assert (x1480 x100))
(assert (x1480 x595))
(assert (x1586 (x170 128)))
(assert (= (=> (and (= (x99 (+ 17 x837)) x1419) (= x837 (x483 928)) (= x1828 (x1429 (x721 x1419))) (= x416 (x1652 896)) (= (not (< 0 x416)) x1079)) (and x1561 x1079)) x368))
(assert (= (x185 320) (x1345 320)))
(assert (x1586 x136))
(assert (x1480 x1247))
(assert (x1480 x1856))
(assert (= (x307 736) (x1210 736)))
(assert (x1480 x680))
(assert (x1480 x977))
(assert (x1586 (x170 160)))
(assert (x1480 x1555))
(assert (= (x21 640) (x1381 640)))
(assert (= x814 (x1794 (x721 x814))))
(assert (= x1607 (=> (and (= (< x1255 x1142) x1367) (= x1142 (div x1080 1000000000000000000))) (and (=> (and (not x1367) (= (x285 (- x1255 x1142)) x1765)) x288) (=> x1367 x35)))))
(assert (x1480 x1226))
(assert (= (x530 256) (x1206 256)))
(assert (=> (>= 10000 (x253 128)) (= (x1543 (x253 128)) (x721 (x253 128)))))
(assert (= (=> (and (= (x1322 (x1543 9)) x1265) (= (= x1265 0) x342)) (and (=> (and (= x36 (div x770 x1265)) (not x342)) x731) (=> x342 x35))) x1718))
(assert (x1480 x631))
(assert (x1480 x1865))
(assert (= (x721 4267106866) (x1543 4267106866)))
(assert (= (x1198 736) (x234 736)))
(assert (= (x1324 704) (x180 704)))
(assert (x1586 x814))
(assert (= (x1497 768) (x1017 768)))
(assert (=> (>= 10000 (x1679 128)) (= (x1543 (x1679 128)) (x721 (x1679 128)))))
(assert (= (x1135 896) (x1141 896)))
(assert (= (x1271 128) (x1794 (x721 (x1271 128)))))
(assert (= (x1008 928) (x839 928)))
(assert (= (ite (= (x1543 0) (x1543 10)) 1 (x1323 (x1543 10))) (x1322 (x1543 10))))
(assert (= (x76 320) (x306 320)))
(assert (= (x162 768) (x167 768)))
(assert (= (x531 (x1543 39)) (ite (= (x1543 39) (x1543 0)) 1 (x59 (x1543 39)))))
(assert (= (x1806 736) (ite (and x1525 x1613) (x1266 736) (x1676 736))))
(assert (x1586 (x265 128)))
(assert (x1480 x1644))
(assert (= (x1835 352) (x1676 352)))
(assert (= (x1324 736) (x180 736)))
(assert (= (x63 (x1543 39)) (ite (= (x1543 39) (x1543 0)) 1 (x59 (x1543 39)))))
(assert (x1480 x930))
(assert (x1480 x1680))
(assert (x1586 x968))
(assert (= (x950 672) (x993 672)))
(assert (x1480 x84))
(assert (= (x1381 672) (x21 672)))
(assert (x1480 x1681))
(assert (= (x1272 352) (x1770 352)))
(assert (= (x1543 348537858) (x721 348537858)))
(assert (= (x686 768) (x1469 768)))
(assert (x1480 x921))
(assert (x1480 x716))
(assert (x1480 x447))
(assert (= (x940 768) (x398 768)))
(assert (= (ite (= (x1543 0) x308) 1 (x59 x308)) (x531 x308)))
(assert (= x749 (or x1476 (and x1361 (not x1487)))))
(assert (x1480 x294))
(assert (x1480 x1082))
(assert (= (x519 1088) (x808 1088)))
(assert (= (x63 (x1543 43)) (ite (= (x1543 0) (x1543 43)) 1 (x59 (x1543 43)))))
(assert (x1480 x897))
(assert (x1586 x275))
(assert (= (=> (and (= x586 (x99 (+ x118 x1082))) (= x1289 (x973 (x721 (x1077 128)) (x721 (x1077 160)) 0)) (= x1082 (x1747 x422)) (= (x1077 256) x118) (= x422 (x1777 x1289 8)) (= x692 (> x1082 x586)) (= (x287 224) x1243)) (and (=> (not x692) x738) (=> x692 x35))) x20))
(assert (= (x1225 1024) (x365 1024)))
(assert (x1480 x1078))
(assert (=> (<= (x175 128) 10000) (= (x721 (x175 128)) (x1543 (x175 128)))))
(assert (= (x576 672) (x265 672)))
(assert (x1480 x824))
(assert (= (x665 704) (x722 704)))
(assert (x1480 x1286))
(assert (x1480 x1752))
(assert (= (x24 736) (x717 736)))
(assert (= (x648 704) (x733 704)))
(assert (= (or x627 (and x1414 (not x1275))) x478))
(assert (= (x1141 640) (x1135 640)))
(assert (= (+ (x1794 x840) 6) (x1794 (x1777 x840 6))))
(assert (= (x24 640) (x717 640)))
(assert (x1586 (x698 128)))
(assert (= (x611 1088) (x763 1088)))
(assert (x1480 x932))
(assert (= (ite (= (x1543 0) x1065) 1 (x1323 x1065)) (x1322 x1065)))
(assert (x1480 x1711))
(assert (x1480 x1108))
(assert (x1480 x797))
(assert (= (ite (= (x1543 10) (x1543 0)) 1 (x59 (x1543 10))) (x531 (x1543 10))))
(assert (x1480 x22))
(assert (= (x1206 384) (x530 384)))
(assert (x1480 x1655))
(assert (x1480 x1240))
(assert (= (x1403 704) (x691 704)))
(assert (= (x347 160) (x1794 (x721 (x347 160)))))
(assert (x1480 x856))
(assert (x1480 x1762))
(assert (= (x347 896) (x1807 896)))
(assert (= (x1859 768) (x1411 768)))
(assert (= (x1794 (x1777 x734 6)) (+ (x1794 x734) 6)))
(assert (x1480 x274))
(assert (= (x11 768) (x707 768)))
(assert (= (x260 736) (x175 736)))
(assert (= (x1822 736) (x582 736)))
(assert (x1480 x1075))
(assert (= (x1662 672) (x182 672)))
(assert (x1480 x1426))
(assert (= (x531 x454) (ite (= (x1543 0) x454) 1 (x59 x454))))
(assert (x1480 x1490))
(assert (x1480 x1288))
(assert (= x1763 (=> (and (= x938 (x1345 704)) (= (x185 640) x989) (= (< 10000 x938) x1603)) (and (=> x1603 x35) (=> (and (= x1283 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1853)) (not x1603) (= x1853 (x1345 736)) (or (and (= (x1322 x88) x447) (= x88 (x973 (x721 (x526 128)) (x721 (x526 160)) 0)) x1283) (not x1283))) x1771)))))
(assert (x1480 x177))
(assert (= (x124 352) (x470 352)))
(assert (= x478 x1095))
(assert (= 596573372 (x1794 (x1543 596573372))))
(assert (= (x763 320) (x611 320)))
(assert (= (x365 768) (x1225 768)))
(assert (= (x721 274184521717934524641157099916833587200) (x1543 274184521717934524641157099916833587200)))
(assert (= (x721 629314576) (x1543 629314576)))
(assert (= (x421 864) (x4 864)))
(assert (= (x763 1024) (x611 1024)))
(assert (x1480 x861))
(assert (x1480 x1184))
(assert (= (x721 2835717307) (x1543 2835717307)))
(assert (x1480 x1214))
(assert (= (or (and (not x342) x891) (and (not x552) x1239)) x225))
(assert (= (x543 768) (x375 768)))
(assert (x1480 x247))
(assert (= (x149 352) (x170 352)))
(assert (= (x1543 2484372501) (x721 2484372501)))
(assert (x1480 x131))
(assert (= (x1904 320) (x889 320)))
(assert (= (x487 640) (x7 640)))
(assert (= (x1587 128) (x1794 (x721 (x1587 128)))))
(assert (x1480 x1486))
(assert (= (=> (and (= (x939 384) x1531) (= (= 0 x1531) x1902)) (and (=> x1902 x35) (=> (and (not x1902) (= (div x1214 x1531) x384)) x1016))) x32))
(assert (x1480 x1292))
(assert (= (x260 288) x1005))
(assert (x1480 x431))
(assert (= (ite (and x980 x1616) (x317 736) (x991 736)) (x1000 736)))
(assert (= (x234 928) (x1198 928)))
(assert (x1586 (x24 160)))
(assert (x1480 x712))
(assert (= (x76 224) (x306 224)))
(assert (= (x506 352) (x1768 352)))
(assert (= (x180 352) (x1324 352)))
(assert (= (x721 1461501637330902918203684832716283019655932542975) (x1543 1461501637330902918203684832716283019655932542975)))
(assert (= (x544 672) (x1302 672)))
(assert (= (x1316 160) (x1794 (x721 (x1316 160)))))
(assert (= (x1676 672) (x1835 672)))
(assert (= (x175 320) (x260 320)))
(assert (= (x594 704) (x508 704)))
(assert (= (and x637 x1315) x1513))
(assert (= (x149 768) (x170 768)))
(assert (x1480 x1339))
(assert (x1480 x495))
(assert (x1480 x535))
(assert (= (x940 352) (x398 352)))
(assert (= x1414 x980))
(assert (= (x808 672) (x519 672)))
(assert (= 1977493762 (x1794 (x1543 1977493762))))
(assert (= x1557 (or (and (not x1270) x780) (and x1187 x40) x1331)))
(assert (x1480 x988))
(assert (= x1361 (and x1275 x1414)))
(assert (= (x1606 288) (x1450 288)))
(assert (x1480 x1834))
(assert (= (x812 640) (x493 640)))
(assert (x1480 x791))
(assert (= x1515 (and (not x41) x1677)))
(assert (= (x1904 928) (x889 928)))
(assert (= (+ 8 (x1794 x215)) (x1794 (x1777 x215 8))))
(assert (= x94 (=> (and (= x845 (ite (< x195 x1120) x195 x1120)) (= (x1322 x1847) x195) (= x366 (x285 (- x1074 x351))) (= x1847 (x1777 x1732 6)) (= x337 (x282 992)) (= x1732 (x973 (x721 (x1685 128)) (x721 (x1685 160)) 0)) (= (< 0 x337) x1315) (= (x868 896) x301) (= x1120 (x868 992))) (and (=> (not x1315) x724) (=> (and (= x701 (> x884 0)) (or (not x701) (and (= (>= (x1664 (x721 274184521717934524641157099916833587200)) x1644) x898) (> 4294967296 x1711) x1167 (= (x875 (x721 x275)) x1598) (= x1167 (= x1598 (x1664 (x721 x275)))) (= x1644 (x875 (x721 274184521717934524641157099916833587200))) x701 x898)) (= (x812 992) x394) (= (x493 896) x275) x1315) x907)))))
(assert (= (x298 704) (x991 704)))
(assert (= 1889567281 (x1794 (x1543 1889567281))))
(assert (= (x1381 704) (x21 704)))
(assert (x1480 x1274))
(assert (= (ite (and x780 x409 x1270) (ite (and x780 x1270 x409 x354) (x362 (x721 x1907)) (x1262 (x721 x1907))) (x1262 (x721 x1907))) (x1019 (x721 x1907))))
(assert (x1480 x1600))
(assert (= (x182 320) (x1662 320)))
(assert (= (x234 320) (x1198 320)))
(assert (x1480 x351))
(assert (= (x1281 768) (x191 768)))
(assert (x1480 x77))
(assert (x1480 x1872))
(assert (x1480 x1550))
(assert (x1480 x938))
(assert (= x949 (and x104 x1684)))
(assert (=> (<= (x190 160) 10000) (= (x1543 (x190 160)) (x721 (x190 160)))))
(assert (= (x167 864) (x162 864)))
(assert (x1586 (x1208 160)))
(assert (= (x1794 (x721 (x265 128))) (x265 128)))
(assert (x1480 x502))
(assert (= (x1381 320) (x21 320)))
(assert (= (and x1095 (not x1493)) x626))
(assert (= (x808 1024) (x519 1024)))
(assert (= (x1794 (x721 (x1456 160))) (x1456 160)))
(assert (x1480 x1106))
(assert (=> (<= (x265 128) 10000) (= (x1543 (x265 128)) (x721 (x265 128)))))
(assert (= 4294967296 (x1794 (x1543 4294967296))))
(assert (x1480 x1635))
(assert (= (div x1852 (x1118 2 x623)) (x817 x1852 x623)))
(assert (= (x1562 352) (x766 352)))
(assert (= x312 (x4 384)))
(assert (= x529 (=> (and (= x232 (x1462 800)) (= x103 (x1462 768)) (= x1310 (> x103 x232))) (and (=> x1310 x1890) (=> (not x1310) x233)))))
(assert (= (x1183 576) x795))
(assert (= (x686 704) (x1469 704)))
(assert (= (and x379 (not x1520)) x356))
(assert (= (x1807 768) (x347 768)))
(assert (x1480 x1201))
(assert (x1480 x147))
(assert (x1480 x1257))
(assert (= (x298 672) (x991 672)))
(assert (x1480 x573))
(assert (x1480 x1776))
(assert (= (x76 928) (x306 928)))
(assert (= 0 (x1229 320)))
(assert (=> (<= (x1782 160) 10000) (= (x721 (x1782 160)) (x1543 (x1782 160)))))
(assert (x1480 x1598))
(assert (= (x1322 (x1543 41)) (ite (= (x1543 0) (x1543 41)) 1 (x1323 (x1543 41)))))
(assert (x1480 x1320))
(assert (x1480 x394))
(assert (= (x1302 768) (x544 768)))
(assert (=> (>= 10000 (x1782 128)) (= (x721 (x1782 128)) (x1543 (x1782 128)))))
(assert (x1480 x1878))
(assert (= (x265 736) (x576 736)))
(assert (x1480 x153))
(assert (x1480 x297))
(assert (x1480 x1287))
(assert (x1480 x46))
(assert (= (x1363 160) (x1794 (x721 (x1363 160)))))
(assert (= (x991 768) (x298 768)))
(assert (= (and x424 x957) x419))
(assert (= (x707 224) (x11 224)))
(assert (= (x686 320) (x1469 320)))
(assert (= (x1343 160) (x1794 (x721 (x1343 160)))))
(assert (x1480 x1478))
(assert (x1480 x1751))
(assert (= (x534 928) (x1171 928)))
(assert (x1480 x936))
(assert (= x225 x404))
(assert (x1480 x1080))
(assert (x1480 x214))
(assert (= (x688 736) (x945 736)))
(assert (=> (<= (x686 128) 10000) (= (x1543 (x686 128)) (x721 (x686 128)))))
(assert (x1480 x115))
(assert (x1480 x906))
(assert (x1480 x179))
(assert (= (x1534 928) (x603 928)))
(assert (x1480 x969))
(assert (= (x733 864) (x648 864)))
(assert (= (=> (and (= x1097 (x750 928)) (= (= x1174 20) x983) (= (x99 (+ 1 x1097)) x1174)) (and (=> x983 x1896) (=> (not x983) x368))) x1690))
(assert (= (ite (= (x1543 0) (x721 x814)) 1 (x59 (x721 x814))) (x531 (x721 x814))))
(assert (= (x191 288) (x1281 288)))
(assert (x1480 x36))
(assert (=> (>= 10000 (x698 160)) (= (x1543 (x698 160)) (x721 (x698 160)))))
(assert (= x731 (=> (and (or (and (= x115 x1376) (not x674)) (and (< x535 4294967296) (= 1 x1376) x674)) (= x674 (> x115 0)) (= (x1318 800) x1043)) x826)))
(assert (x1480 x1129))
(assert (= x357 (=> (and (= x1354 (x1396 736)) (= (x972 768) x606) (= x1767 (x326 800)) (= x830 (x1549 768)) (= false x1172)) x1738)))
(assert (= (x462 704) (x1452 704)))
(assert (= (=> (and (= x128 (x836 928)) (= x584 (x271 896)) (= x792 (x271 768)) (= x1196 (> x792 x584))) (and (=> x1196 x786) (=> (not x1196) x659))) x1045))
(assert (x1480 x120))
(assert (= (x1135 736) (x1141 736)))
(assert (= (x230 736) (x97 736)))
(assert (x1480 x785))
(assert (= (x332 864) (x776 864)))
(assert (x1586 (x262 160)))
(assert (x1586 x1907))
(assert (x1480 x1833))
(assert (= (+ (x1794 x1216) 2) (x1794 (x1777 x1216 2))))
(assert (x1480 x1053))
(assert (x1480 x1250))
(assert (x1480 x874))
(assert (= (x190 128) (x1794 (x721 (x190 128)))))
(assert (= (x1411 224) x1723))
(assert (x1480 x203))
(assert (= (x945 960) (x688 960)))
(assert (x1480 x740))
(assert (= (x718 640) (x966 640)))
(assert (= (=> (and (= (> x236 x1382) x1407) (= x1899 (x99 (+ x118 x1082))) (= x236 (x1077 256)) (= (x1077 288) x1382)) (and (=> (not x1407) x566) (=> x1407 x35))) x738))
(assert (= (x493 704) (x812 704)))
(assert (x1480 x1084))
(assert (x1480 x956))
(assert (= x360 (=> (= (< 0 x370) x1280) (and (=> x1280 x1390) (=> (not x1280) x35)))))
(assert (= x682 (x534 960)))
(assert (= (x76 736) (x306 736)))
(assert (x1480 x933))
(assert (x1480 x1703))
(assert (x1480 x642))
(assert (= 31576340 (x1794 (x1543 31576340))))
(assert (= (x1497 960) x467))
(assert (= (x1452 864) (x462 864)))
(assert (x1480 x1660))
(assert (x1480 x1056))
(assert (= (x506 704) (x1768 704)))
(assert (=> (<= (x1587 128) 10000) (= (x1543 (x1587 128)) (x721 (x1587 128)))))
(assert (= (x307 704) (x1210 704)))
(assert (x1480 x1102))
(assert (= (x531 x1065) (ite (= (x1543 0) x1065) 1 (x59 x1065))))
(assert (x1480 x1386))
(assert (x1480 x1496))
(assert (=> (>= 10000 (x1192 160)) (= (x721 (x1192 160)) (x1543 (x1192 160)))))
(assert (and (= 1 (x1118 10 0)) (= (x1118 10 3) 1000) (= (x1118 10 11) 100000000000) (= (x1118 10 5) 100000) (= 100000000000000000000 (x1118 10 20)) (= (x1118 10 30) 1000000000000000000000000000000) (= (x1118 10 28) 10000000000000000000000000000) (= 1000000000000000000 (x1118 10 18)) (= 10000000 (x1118 10 7)) (= 10000000000000000000 (x1118 10 19)) (= 10000000000000000000000000 (x1118 10 25)) (= (x1118 10 23) 100000000000000000000000) (= (x1118 10 27) 1000000000000000000000000000) (= (x1118 10 10) 10000000000) (= 10 (x1118 10 1)) (= 100000000 (x1118 10 8)) (= 100000000000000000000000000 (x1118 10 26)) (= (x1118 10 6) 1000000) (= (x1118 10 21) 1000000000000000000000) (= 1000000000 (x1118 10 9)) (= 100000000000000000 (x1118 10 17)) (= 1000000000000000 (x1118 10 15)) (= (x1118 10 12) 1000000000000) (= 100 (x1118 10 2)) (= (x1118 10 29) 100000000000000000000000000000) (= 1000000000000000000000000 (x1118 10 24)) (= (x1118 10 13) 10000000000000) (= (x1118 10 14) 100000000000000) (= 10000000000000000 (x1118 10 16)) (= 10000000000000000000000 (x1118 10 22)) (= 10000 (x1118 10 4))))
(assert (x1480 x243))
(assert (= x1016 (=> (and (= (x1691 640) x1458) (= x2 (> x1328 x1458)) (= x1328 (x1691 736)) (= x1558 (x1809 928))) (and (=> (not x2) x659) (=> x2 x35)))))
(assert (x1480 x165))
(assert (x1480 x1409))
(assert (= (x1152 224) (x1439 224)))
(assert (x1480 x33))
(assert (x1480 x745))
(assert (= (x979 640) (x996 640)))
(assert (= (or (and x61 (not x1581)) (and x152 (not x613))) x1018))
(assert (= (x318 672) (x1832 672)))
(assert (= (x776 640) (x332 640)))
(assert (= (or (and (not x1220) x1881) (and (not x1367) x911)) x1628))
(assert (= (=> (and (= (< x1076 x119) x1727) (= x119 (x278 320))) (and (=> x1727 x35) (=> (not x1727) x314))) x288))
(assert (= (x966 672) (x718 672)))
(assert (x1480 x1538))
(assert (x1480 x343))
(assert (= (x1794 (x721 (x1430 160))) (x1430 160)))
(assert (x1480 x862))
(assert (x1480 x1093))
(assert (x1480 x1558))
(assert (x1480 x1466))
(assert (= (x993 352) (x950 352)))
(assert (x1480 x591))
(assert (= x1525 x1370))
(assert (= (x1206 320) (x530 320)))
(assert (x1480 x1307))
(assert (x1480 x146))
(assert (x1586 (x1363 128)))
(assert (x1480 x1503))
(assert (= (x1685 352) (x282 352)))
(assert (x1480 x974))
(assert (= (x1322 x88) (ite (= (x1543 0) x88) 1 (x1323 x88))))
(assert (x1480 x914))
(assert (x1480 x677))
(assert (x1480 x1027))
(assert (= (x1225 704) (x365 704)))
(assert (= (x1543 1401663147) (x721 1401663147)))
(assert (x1480 x1523))
(assert (x1480 x1665))
(assert (x1586 (x686 128)))
(assert (x1480 x925))
(assert (x1480 x45))
(assert (x1480 x1634))
(assert (= (x1450 352) (x1606 352)))
(assert (= (=> (and (= (x1534 928) x745) (= (> x1654 0) x1487) (= (x603 896) x1654) (= x814 (x99 (+ x745 17))) (= (x531 (x721 x814)) x212)) (and (=> (and (= (> x1240 0) x739) (or (and (< x591 4294967296) (= x1466 1) x739) (and (= x1466 x1240) (not x739))) x1487) x541) (=> (not x1487) x1561))) x1383))
(assert (= (+ 6 (x1794 x587)) (x1794 (x1777 x587 6))))
(assert (= (=> (and (< 0 x446) (> x153 31) (= x1569 (x1000 800)) (= x595 (x1000 768)) (= (< x1569 x595) x1275)) (and (=> (not x1275) x1917) (=> x1275 x1383))) x877))
(assert (x1586 274184521717934524641157099916833587200))
(assert (=> (>= 10000 x968) (= (x721 x968) (x1543 x968))))
(assert (= (ite (= (x721 x136) (x1543 0)) 1 (x59 (x721 x136))) (x531 (x721 x136))))
(assert (x1480 x1020))
(assert (= x784 (and x661 x1189)))
(assert (=> (>= 10000 (x347 160)) (= (x721 (x347 160)) (x1543 (x347 160)))))
(assert (= (x1807 864) (x347 864)))
(assert (=> (<= (x698 128) 10000) (= (x1543 (x698 128)) (x721 (x698 128)))))
(assert (x1480 x501))
(assert (= (x230 352) (x97 352)))
(assert (= (x993 928) (x950 928)))
(assert (= (x691 928) (x1403 928)))
(assert (= (x704 (x721 x1164)) (ite (and x325 x1314 x947) (ite (and x1314 x85 x325 x947) (x1658 (x721 x1164)) (x1262 (x721 x1164))) (x1262 (x721 x1164)))))
(assert (x1480 x301))
(assert (= (ite (= x1783 (x1543 0)) 1 (x1323 x1783)) (x1322 x1783)))
(assert (= (x875 (x721 274184521717934524641157099916833587200)) (ite (and x478 x1081) (x781 (x721 274184521717934524641157099916833587200)) (x1585 (x721 274184521717934524641157099916833587200)))))
(assert (= (x991 800) (x298 800)))
(assert (= (x611 704) (x763 704)))
(assert (= (x170 672) (x149 672)))
(assert (= (x1794 (x1543 1401663147)) 1401663147))
(assert (=> (<= (x253 160) 10000) (= (x1543 (x253 160)) (x721 (x253 160)))))
(assert (= (x375 896) (x543 896)))
(assert (= (x811 768) (x1679 768)))
(assert (x1480 x1194))
(assert (x1480 x12))
(assert (x1480 x687))
(assert (x1586 (x1685 128)))
(assert (x1480 x1087))
(assert (= (x603 768) (x1534 768)))
(assert (= (x721 599290589) (x1543 599290589)))
(assert (= (x808 768) (x519 768)))
(assert (x1480 x1107))
(assert (x1480 x1062))
(assert (= (x1497 320) (x1017 320)))
(assert (= x123 (=> (= (< 31 x1362) x1277) (and (=> (not x1277) x35) (=> x1277 x1045)))))
(assert (x1480 x276))
(assert (x1480 x1524))
(assert (x1480 x1308))
(assert (x1480 x1063))
(assert (= x676 (and (not x1204) x666)))
(assert (= (x1794 (x1543 3963136098)) 3963136098))
(assert (x1480 x536))
(assert (x1480 x1532))
(assert (= (+ 6 (x1794 x1761)) (x1794 (x1777 x1761 6))))
(assert (= (x1171 768) (x534 768)))
(assert (= (and x538 x1364) x1405))
(assert (= (x1794 (x721 (x1192 160))) (x1192 160)))
(assert (= x1907 (x1794 (x721 x1907))))
(assert (x1480 x908))
(assert (=> (<= (x1077 128) 10000) (= (x1543 (x1077 128)) (x721 (x1077 128)))))
(assert (x1480 x141))
(assert (= (x1008 736) (x839 736)))
(assert (x1480 x259))
(assert (x1480 x154))
(assert (= (and x345 (not x1712)) x1656))
(assert (x1480 x1631))
(assert (= (x1302 704) (x544 704)))
(assert (= (x1794 (x1543 2757214935)) 2757214935))
(assert (x1480 x1369))
(assert (x1480 x557))
(assert (= (x1835 704) (x1676 704)))
(assert (= (ite (and x674 x225) (x548 800) (x21 800)) (x1462 800)))
(assert (=> (>= 10000 (x1271 160)) (= (x721 (x1271 160)) (x1543 (x1271 160)))))
(assert (= x1612 (and x1123 (not x692))))
(assert (= (ite (and x1525 x1613) (x1266 768) (x1676 768)) (x1806 768)))
(assert (= (x271 736) (x836 736)))
(assert (x1480 x923))
(assert (= (x493 320) (x812 320)))
(assert (x1480 x1025))
(assert (= (x1794 (x1777 x1004 6)) (+ (x1794 x1004) 6)))
(assert (= (x1543 961581905) (x721 961581905)))
(assert (= (x1171 864) (x534 864)))
(assert (=> (>= 10000 (x526 128)) (= (x721 (x526 128)) (x1543 (x526 128)))))
(assert (x1480 x309))
(assert (x1480 x1406))
(assert (x1480 x1853))
(assert (x1586 (x24 128)))
(assert (=> (<= x1907 10000) (= (x1543 x1907) (x721 x1907))))
(assert (= (x234 672) (x1198 672)))
(assert (=> (<= x785 10000) (= (x1543 x785) (x721 x785))))
(assert (= (x453 224) (x561 224)))
(assert (= x1453 (and x87 (not x999))))
(assert (= (x543 672) (x375 672)))
(assert (x1480 x752))
(assert (= (x812 352) (x493 352)))
(assert (= (x1685 864) (x282 864)))
(assert (x1480 x113))
(assert (=> (<= (x1430 160) 10000) (= (x721 (x1430 160)) (x1543 (x1430 160)))))
(assert (x1480 x1039))
(assert (x1586 x785))
(assert (= (x365 320) (x1225 320)))
(assert (= (x889 768) (x1904 768)))
(assert (x1480 x682))
(assert (= (x1794 (x721 (x526 160))) (x526 160)))
(assert (= x1187 (and x780 x1270)))
(assert (= (x124 768) (x470 768)))
(assert (= (x365 736) (x1225 736)))
(assert (x1480 x1321))
(assert (x1480 x223))
(assert (x1480 x815))
(assert (= (x1794 (x1543 1888058147)) 1888058147))
(assert (= (x543 320) (x375 320)))
(assert (x1480 x901))
(assert (= (x1322 (x1543 39)) (ite (= (x1543 0) (x1543 39)) 1 (x1323 (x1543 39)))))
(assert (= (x1794 (x721 (x191 128))) (x191 128)))
(assert (= (+ (x1794 x1732) 6) (x1794 (x1777 x1732 6))))
(assert (= (x365 928) (x1225 928)))
(assert (x1586 (x1316 128)))
(assert (x1480 x90))
(assert (= (x182 352) (x1662 352)))
(assert (x1480 x155))
(assert (= 3065339685 (x1794 (x1543 3065339685))))
(assert (= (x1742 704) (x1485 704)))
(assert (= (x175 864) (x260 864)))
(assert (= (x421 352) (x4 352)))
(assert (= (x305 320) 0))
(assert (= (x24 704) (x717 704)))
(assert (= x1622 (x582 928)))
(assert (= (x1000 768) (ite (and x980 x1616) (x317 768) (x991 768))))
(assert (=> (>= 10000 (x526 160)) (= (x1543 (x526 160)) (x721 (x526 160)))))
(assert (= (x1685 960) (x282 960)))
(assert (x1480 x381))
(assert (= (and x184 x451) x1239))
(assert (x1480 x348))
(assert (x1586 (x1456 160)))
(assert (= (x722 672) (x665 672)))
(assert (= (x1281 864) (x191 864)))
(assert (= (x1608 736) (x1146 736)))
(assert (x1480 x1841))
(assert (x1480 x581))
(assert (x1480 x1804))
(assert (= (=> (and (= (x99 (+ x1633 x22)) x1078) (= x1076 (x1832 288)) (= x400 (x1322 (x1543 41))) (= x1060 (< x914 x400))) (and (=> x1060 x35) (=> (not x1060) x1353))) x1207))
(assert (= (x1543 1851080549) (x721 1851080549)))
(assert (x1480 x1115))
(assert (x1480 x389))
(assert (= (x531 x1332) (ite (= x1332 (x1543 0)) 1 (x59 x1332))))
(assert (x1480 x1465))
(assert (= (x483 672) (x750 672)))
(assert (x1480 x65))
(assert (x1480 x106))
(assert (= (x1403 1024) (x691 1024)))
(assert (x1480 x380))
(assert (= (ite (= (x1543 0) (x1543 41)) 1 (x59 (x1543 41))) (x531 (x1543 41))))
(assert (= (and (not x407) x1656) x1699))
(assert (x1480 x353))
(assert (= (x1806 704) (ite (and x1613 x1525) (x1266 704) (x1676 704))))
(assert (x1480 x1394))
(assert (x1480 x884))
(assert (= (x1806 320) (ite (and x1525 x1613) (x1266 320) (x1676 320))))
(assert (x1480 x168))
(assert (= (x1606 320) (x1450 320)))
(assert (x1480 x213))
(assert (= x426 (=> (and (= x41 (= 0 x1108)) (= x1108 (x1322 (x1543 39)))) (and (=> (not x41) x1385) (=> x41 x20)))))
(assert (x1480 x746))
(assert (= (or (and x965 (not x166)) (and x637 (not x1315))) x511))
(assert (= (x1543 1888058147) (x721 1888058147)))
(assert (= (or (and x1719 (not x2)) (and x414 (not x1196))) x345))
(assert (= 2681579215 (x1794 (x1543 2681579215))))
(assert (x1480 x1530))
(assert (x1480 x1064))
(assert (x1586 (x1077 128)))
(assert (x1480 x605))
(assert (x1480 x331))
(assert (= (x721 1977493762) (x1543 1977493762)))
(assert (x1480 x64))
(assert (= (x1794 (x721 (x170 128))) (x170 128)))
(assert (= (x836 352) (x271 352)))
(assert (x1480 x1906))
(assert (x1480 x416))
(assert (x1480 x1826))
(assert (x1480 x1354))
(assert (x1480 x1781))
(assert (= (x1206 768) (x530 768)))
(assert (x1480 x1891))
(assert (=> (>= 10000 (x1208 128)) (= (x1543 (x1208 128)) (x721 (x1208 128)))))
(assert (x1480 x439))
(assert (= (x1543 3184006219) (x721 3184006219)))
(assert (= (or (and x86 (not x341)) (and x1193 (not x1140))) x893))
(assert (x1480 x1815))
(assert (= (x979 352) (x996 352)))
(assert (= (x1794 (x721 (x1271 160))) (x1271 160)))
(assert (= (x1302 864) (x544 864)))
(assert (x1480 x500))
(assert (= (x483 768) (x750 768)))
(assert (x1480 x1882))
(assert (= (x1793 320) (x1338 320)))
(assert (x1480 x1753))
(assert (x1480 x410))
(assert (x1480 x210))
(assert (x1480 x1797))
(assert (x1480 x1009))
(assert (= (x648 768) (x733 768)))
(check-sat)
