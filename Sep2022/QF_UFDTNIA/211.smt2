(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_UFDTNIA)
(declare-datatypes ((x865 0)) (((x1141 (x1813 x865) (x880 x865) (x705 Int)) (x368 (x1641 Int)) (x520 (x787 x865) (x984 Int)))))
(declare-fun x1315 () Int)
(declare-fun x76 () Int)
(declare-fun x1077 () Bool)
(declare-fun x105 () Bool)
(declare-fun x5 () Int)
(declare-fun x1487 () Bool)
(declare-fun x1153 () Bool)
(declare-fun x611 () Bool)
(declare-fun x1543 (Int Int) Int)
(declare-fun x1051 () Int)
(declare-fun x173 () Bool)
(declare-fun x873 () Int)
(declare-fun x253 (Int) Int)
(declare-fun x381 () Bool)
(declare-fun x955 () Bool)
(declare-fun x266 () Bool)
(declare-fun x1419 (Int) Int)
(declare-fun x27 () Int)
(declare-fun x176 () Int)
(declare-fun x1367 () Bool)
(declare-fun x299 () Int)
(declare-fun x1554 () x865)
(declare-fun x72 () Bool)
(declare-fun x914 () Bool)
(declare-fun x461 () Int)
(declare-fun x1503 () Int)
(declare-fun x1621 () Int)
(declare-fun x1030 (Int) Int)
(declare-fun x1146 () Int)
(declare-fun x1671 () Bool)
(declare-fun x554 () Bool)
(declare-fun x1093 () Int)
(declare-fun x1808 () Int)
(declare-fun x507 () Bool)
(declare-fun x419 () Int)
(declare-fun x417 () Bool)
(declare-fun x1382 () Bool)
(declare-fun x1485 () Bool)
(declare-fun x34 () Int)
(declare-fun x342 () Bool)
(declare-fun x869 () Int)
(declare-fun x323 (Int) Int)
(declare-fun x1265 () Int)
(declare-fun x1913 () Int)
(declare-fun x566 () Bool)
(declare-fun x132 (Int) Int)
(declare-fun x613 () Bool)
(declare-fun x1652 () Bool)
(declare-fun x1008 () x865)
(declare-fun x954 () Int)
(declare-fun x203 () Int)
(declare-fun x1817 () Bool)
(declare-fun x635 () Int)
(declare-fun x363 () Int)
(declare-fun x952 () Bool)
(declare-fun x717 (Int) Int)
(declare-fun x53 () Bool)
(declare-fun x1147 () Bool)
(declare-fun x1759 (x865) Int)
(declare-fun x1344 () Int)
(declare-fun x1443 () Int)
(declare-fun x1508 () Int)
(declare-fun x838 () Int)
(declare-fun x918 () Int)
(declare-fun x932 () Bool)
(declare-fun x1749 () x865)
(declare-fun x997 () Bool)
(declare-fun x390 () Bool)
(declare-fun x1026 () Int)
(declare-fun x1823 () Bool)
(declare-fun x911 () Int)
(declare-fun x1099 () Int)
(declare-fun x284 () Bool)
(declare-fun x408 (Int) Int)
(declare-fun x38 () Bool)
(declare-fun x341 () Bool)
(declare-fun x1835 (Int) Int)
(declare-fun x906 () Bool)
(declare-fun x1612 () Int)
(declare-fun x1100 (Int) Int)
(declare-fun x904 () Bool)
(declare-fun x1601 () Bool)
(declare-fun x1558 () x865)
(declare-fun x50 () Bool)
(declare-fun x935 () Bool)
(declare-fun x797 () Int)
(declare-fun x1377 () Int)
(declare-fun x1082 () Int)
(declare-fun x868 () Bool)
(declare-fun x187 () Bool)
(declare-fun x792 () Int)
(declare-fun x706 () Bool)
(declare-fun x1096 () Int)
(declare-fun x1446 () Int)
(declare-fun x393 () Bool)
(declare-fun x626 () Bool)
(declare-fun x562 () Int)
(declare-fun x230 () Int)
(declare-fun x1091 () Int)
(declare-fun x1885 () Bool)
(declare-fun x783 () Bool)
(declare-fun x1033 () Int)
(declare-fun x1221 () Bool)
(declare-fun x1726 () Int)
(declare-fun x202 () Int)
(declare-fun x1421 () Int)
(declare-fun x452 () Int)
(declare-fun x1783 () Int)
(declare-fun x741 (Int) Int)
(declare-fun x1329 (Int) Int)
(declare-fun x719 () Int)
(declare-fun x620 () Int)
(declare-fun x700 () Int)
(declare-fun x786 (Int) Int)
(declare-fun x278 () Int)
(declare-fun x236 () Bool)
(declare-fun x1208 () Bool)
(declare-fun x1614 () Bool)
(declare-fun x427 () Bool)
(declare-fun x1287 () Int)
(declare-fun x1246 () Bool)
(declare-fun x910 () Bool)
(declare-fun x324 (x865) Int)
(declare-fun x488 () Bool)
(declare-fun x1240 () Int)
(declare-fun x1138 () Int)
(declare-fun x831 () Int)
(declare-fun x425 () Int)
(declare-fun x1801 () Bool)
(declare-fun x1312 () Int)
(declare-fun x564 () Bool)
(declare-fun x1090 () Int)
(declare-fun x1768 () Bool)
(declare-fun x118 () Int)
(declare-fun x192 () Bool)
(declare-fun x1424 () Int)
(declare-fun x886 () Int)
(declare-fun x1453 () Int)
(declare-fun x483 () Int)
(declare-fun x1681 () Int)
(declare-fun x1068 () Int)
(declare-fun x1210 () Bool)
(declare-fun x1505 () Int)
(declare-fun x89 () Int)
(declare-fun x642 () Bool)
(declare-fun x161 () Bool)
(declare-fun x125 () Bool)
(declare-fun x1866 () Int)
(declare-fun x272 () Int)
(declare-fun x448 () Bool)
(declare-fun x1003 () Int)
(declare-fun x1886 () Int)
(declare-fun x1746 () Bool)
(declare-fun x264 () Int)
(declare-fun x1276 () Bool)
(declare-fun x1107 () Bool)
(declare-fun x443 () Int)
(declare-fun x552 () x865)
(declare-fun x31 () Int)
(declare-fun x1196 () x865)
(declare-fun x1712 () Int)
(declare-fun x1524 () Int)
(declare-fun x519 () Bool)
(declare-fun x1741 () Int)
(declare-fun x569 () Int)
(declare-fun x1905 () Int)
(declare-fun x1436 () Int)
(declare-fun x1854 () Int)
(declare-fun x1843 () Bool)
(declare-fun x1796 () Int)
(declare-fun x1795 () Bool)
(declare-fun x239 () Bool)
(declare-fun x902 () Bool)
(declare-fun x1235 () Int)
(declare-fun x1701 () Int)
(declare-fun x1169 () Int)
(declare-fun x1471 () Bool)
(declare-fun x1730 () Int)
(declare-fun x1525 () Bool)
(declare-fun x1388 () Int)
(declare-fun x1195 () Bool)
(declare-fun x881 () Bool)
(declare-fun x147 () Bool)
(declare-fun x432 () Bool)
(declare-fun x1535 () Bool)
(declare-fun x953 () Bool)
(declare-fun x1390 () Int)
(declare-fun x1893 () Int)
(declare-fun x252 () Int)
(declare-fun x1571 () x865)
(declare-fun x1242 () Int)
(declare-fun x426 () Bool)
(declare-fun x322 () Bool)
(declare-fun x30 () Int)
(declare-fun x753 () Bool)
(declare-fun x570 () Bool)
(declare-fun x33 () Bool)
(declare-fun x106 () Int)
(declare-fun x8 () Int)
(declare-fun x156 () Int)
(declare-fun x1314 () Int)
(declare-fun x279 () Int)
(declare-fun x1170 () Int)
(declare-fun x666 () Bool)
(declare-fun x1198 () Int)
(declare-fun x961 () Bool)
(declare-fun x1190 () Bool)
(declare-fun x712 () Bool)
(declare-fun x697 () Bool)
(declare-fun x1423 () Int)
(declare-fun x907 () Bool)
(declare-fun x1928 () Int)
(declare-fun x923 () Bool)
(declare-fun x992 () Bool)
(declare-fun x1038 () Int)
(declare-fun x58 () Bool)
(declare-fun x1676 () Bool)
(declare-fun x543 () Int)
(declare-fun x1391 () Int)
(declare-fun x847 () x865)
(declare-fun x177 () Bool)
(declare-fun x227 () Bool)
(declare-fun x1724 () Bool)
(declare-fun x1032 () Bool)
(declare-fun x1757 () Bool)
(declare-fun x1600 () Bool)
(declare-fun x962 () Int)
(declare-fun x28 () Int)
(declare-fun x399 () x865)
(declare-fun x1405 () Int)
(declare-fun x1775 () Int)
(declare-fun x928 () Bool)
(declare-fun x956 () Int)
(declare-fun x1882 () Int)
(declare-fun x137 () Int)
(declare-fun x1145 () Bool)
(declare-fun x1460 () Bool)
(declare-fun x1 () Int)
(declare-fun x1085 () Int)
(declare-fun x1179 () Int)
(declare-fun x1536 (Int) Int)
(declare-fun x548 () Int)
(declare-fun x311 () Bool)
(declare-fun x396 () Int)
(declare-fun x1150 () Int)
(declare-fun x424 () Int)
(declare-fun x59 () Bool)
(declare-fun x1365 () Int)
(declare-fun x1698 () Int)
(declare-fun x652 (Int) Int)
(declare-fun x598 () Bool)
(declare-fun x1903 (Int) Int)
(declare-fun x1353 () Int)
(declare-fun x1050 () Int)
(declare-fun x1397 () Bool)
(declare-fun x1279 () Bool)
(declare-fun x1451 () x865)
(declare-fun x1664 () Int)
(declare-fun x802 () Int)
(declare-fun x343 () x865)
(declare-fun x790 () Bool)
(declare-fun x679 () Bool)
(declare-fun x1418 () Bool)
(declare-fun x401 () Bool)
(declare-fun x1870 () Int)
(declare-fun x383 () Bool)
(declare-fun x1158 () Int)
(declare-fun x638 () Bool)
(declare-fun x286 () Int)
(declare-fun x555 () Int)
(declare-fun x951 () Bool)
(declare-fun x1134 () Bool)
(declare-fun x1618 () x865)
(declare-fun x1766 () Bool)
(declare-fun x1354 () Bool)
(declare-fun x1184 () Bool)
(declare-fun x480 (Int) Int)
(declare-fun x668 () Int)
(declare-fun x386 (Int) Int)
(declare-fun x998 () Int)
(declare-fun x619 () Int)
(declare-fun x109 () Bool)
(declare-fun x842 () Int)
(declare-fun x1509 () Int)
(declare-fun x1498 () Int)
(declare-fun x1688 () Int)
(declare-fun x224 () Int)
(declare-fun x1881 () Bool)
(declare-fun x663 () Int)
(declare-fun x1648 () x865)
(declare-fun x183 () Int)
(declare-fun x1137 () Int)
(declare-fun x1115 () Bool)
(declare-fun x1407 () Int)
(declare-fun x599 () Bool)
(declare-fun x1455 () Int)
(declare-fun x1440 () Bool)
(declare-fun x770 () Bool)
(declare-fun x870 () Bool)
(declare-fun x1043 () Bool)
(declare-fun x1309 () Bool)
(declare-fun x1305 (Int) Int)
(declare-fun x1289 () Bool)
(declare-fun x1541 () Int)
(declare-fun x547 () Int)
(declare-fun x155 (x865) Int)
(declare-fun x265 () Bool)
(declare-fun x1393 () Bool)
(declare-fun x107 () Bool)
(declare-fun x312 (Int) Int)
(declare-fun x565 () Bool)
(declare-fun x1466 () Bool)
(declare-fun x822 () Int)
(declare-fun x1739 () Int)
(declare-fun x775 () Bool)
(declare-fun x1623 () Int)
(declare-fun x1159 () Int)
(declare-fun x139 () Int)
(declare-fun x640 () Bool)
(declare-fun x1921 () Int)
(declare-fun x1769 () Bool)
(declare-fun x1191 () Int)
(declare-fun x1130 () Int)
(declare-fun x740 () Int)
(declare-fun x1234 () Bool)
(declare-fun x534 () Bool)
(declare-fun x10 () Int)
(declare-fun x303 (Int) Int)
(declare-fun x718 () Bool)
(declare-fun x1468 () Bool)
(declare-fun x467 (Int) Int)
(declare-fun x1072 () x865)
(declare-fun x692 () Int)
(declare-fun x751 () Bool)
(declare-fun x693 () Int)
(declare-fun x1579 () Int)
(declare-fun x757 (Int) Int)
(declare-fun x1909 () Int)
(declare-fun x1306 () Int)
(declare-fun x814 () Bool)
(declare-fun x819 () Int)
(declare-fun x632 () Int)
(declare-fun x1708 () Bool)
(declare-fun x1327 () Int)
(declare-fun x400 () Bool)
(declare-fun x392 () Int)
(declare-fun x389 () Int)
(declare-fun x1902 () x865)
(declare-fun x591 () Bool)
(declare-fun x1379 () Bool)
(declare-fun x623 () Int)
(declare-fun x485 () Int)
(declare-fun x1685 () Bool)
(declare-fun x1488 () Bool)
(declare-fun x184 () Int)
(declare-fun x1782 () Int)
(declare-fun x1832 (Int) Int)
(declare-fun x336 () Bool)
(declare-fun x1200 () Int)
(declare-fun x1674 () Int)
(declare-fun x1363 () Bool)
(declare-fun x1887 () Bool)
(declare-fun x924 () x865)
(declare-fun x660 () Int)
(declare-fun x1182 () Int)
(declare-fun x595 () Int)
(declare-fun x823 () Int)
(declare-fun x500 () Int)
(declare-fun x1185 () Int)
(declare-fun x333 () Int)
(declare-fun x1632 () Bool)
(declare-fun x207 () Int)
(declare-fun x1744 () Bool)
(declare-fun x716 () Int)
(declare-fun x1197 () Int)
(declare-fun x334 () Int)
(declare-fun x898 () Bool)
(declare-fun x1476 () Int)
(declare-fun x544 () Int)
(declare-fun x198 () Bool)
(declare-fun x1463 () Int)
(declare-fun x1258 () Bool)
(declare-fun x313 () Bool)
(declare-fun x157 () Bool)
(declare-fun x1512 () Int)
(declare-fun x214 () Bool)
(declare-fun x1790 (Int) Int)
(declare-fun x438 () Int)
(declare-fun x1238 () Int)
(declare-fun x844 () Bool)
(declare-fun x453 (Int) Int)
(declare-fun x145 () Int)
(declare-fun x545 () Bool)
(declare-fun x948 () Int)
(declare-fun x605 () Bool)
(declare-fun x937 () Int)
(declare-fun x138 (Int) Int)
(declare-fun x1291 () Int)
(declare-fun x219 () Bool)
(declare-fun x1838 () Bool)
(declare-fun x594 () Bool)
(declare-fun x87 () Int)
(declare-fun x1157 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x1432 () Int)
(declare-fun x217 (Int Int) Int)
(declare-fun x358 () x865)
(declare-fun x1639 () Int)
(declare-fun x79 () Int)
(declare-fun x1732 () Bool)
(declare-fun x486 () Int)
(declare-fun x690 () Bool)
(declare-fun x16 () Bool)
(declare-fun x758 () Bool)
(declare-fun x1401 () x865)
(declare-fun x1444 () Bool)
(declare-fun x575 () Bool)
(declare-fun x352 () Bool)
(declare-fun x146 () Int)
(declare-fun x492 () Int)
(declare-fun x142 () Int)
(declare-fun x1855 () Bool)
(declare-fun x1898 () Int)
(declare-fun x724 () Int)
(declare-fun x971 () Int)
(declare-fun x81 () Int)
(declare-fun x1480 () Bool)
(declare-fun x1086 () Bool)
(declare-fun x1876 () Int)
(declare-fun x1729 () Int)
(declare-fun x1095 () Bool)
(declare-fun x1027 () Int)
(declare-fun x451 () Int)
(declare-fun x282 () x865)
(declare-fun x1591 (Int) Int)
(declare-fun x1493 () Int)
(declare-fun x397 () Int)
(declare-fun x1519 () Bool)
(declare-fun x1080 () Int)
(declare-fun x766 () Int)
(declare-fun x73 () Bool)
(declare-fun x433 () Int)
(declare-fun x1413 () Int)
(declare-fun x1438 () Int)
(declare-fun x1848 () Bool)
(declare-fun x586 () Bool)
(declare-fun x1019 () Int)
(declare-fun x169 () Int)
(declare-fun x764 () Bool)
(declare-fun x1555 () Int)
(declare-fun x747 () Bool)
(declare-fun x1662 () Bool)
(declare-fun x1542 () Int)
(declare-fun x1364 (Int) Int)
(declare-fun x1042 () Bool)
(declare-fun x1831 (Int) Int)
(declare-fun x512 () Int)
(declare-fun x1007 () Bool)
(declare-fun x633 () Int)
(declare-fun x1929 () Int)
(declare-fun x516 () Int)
(declare-fun x1620 () Int)
(declare-fun x1845 (Int) Int)
(declare-fun x568 () Bool)
(declare-fun x1217 () Bool)
(declare-fun x596 () Int)
(declare-fun x1435 () Int)
(declare-fun x628 (x865) Int)
(declare-fun x1328 () Bool)
(declare-fun x1797 () Bool)
(declare-fun x143 () Bool)
(declare-fun x1809 () Int)
(declare-fun x1578 () Bool)
(declare-fun x1000 () x865)
(declare-fun x458 () Bool)
(declare-fun x887 () Int)
(declare-fun x756 () Bool)
(declare-fun x1565 (x865) Int)
(declare-fun x9 () Int)
(declare-fun x1494 () Int)
(declare-fun x1102 (Int) Int)
(declare-fun x1151 () Int)
(declare-fun x1834 () Bool)
(declare-fun x478 () Bool)
(declare-fun x794 (Int) Int)
(declare-fun x859 () Int)
(declare-fun x1411 () Bool)
(declare-fun x1507 () Int)
(declare-fun x188 () Int)
(declare-fun x1430 () Int)
(declare-fun x1437 () Int)
(declare-fun x639 (Int) Int)
(declare-fun x1927 () Bool)
(declare-fun x1045 () Int)
(declare-fun x672 () Bool)
(declare-fun x1551 () Bool)
(declare-fun x46 () Bool)
(declare-fun x915 () x865)
(declare-fun x1861 () Int)
(declare-fun x788 () Int)
(declare-fun x1713 () Bool)
(declare-fun x852 () Int)
(declare-fun x460 () Bool)
(declare-fun x457 () Bool)
(declare-fun x398 () Bool)
(declare-fun x561 () Int)
(declare-fun x307 () Bool)
(declare-fun x1627 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x974 () Bool)
(declare-fun x258 () Int)
(declare-fun x1860 () Int)
(declare-fun x44 () Int)
(declare-fun x896 () Bool)
(declare-fun x1537 () Bool)
(declare-fun x1384 () Bool)
(declare-fun x1826 () Int)
(declare-fun x1174 () Bool)
(declare-fun x136 () Int)
(declare-fun x1168 (x865) Int)
(declare-fun x1467 () Bool)
(declare-fun x1426 () Bool)
(declare-fun x1500 () Int)
(declare-fun x405 (Int) Int)
(declare-fun x422 () Int)
(declare-fun x736 () Int)
(declare-fun x1237 () Int)
(declare-fun x671 () Bool)
(declare-fun x1606 () Bool)
(declare-fun x815 () Bool)
(declare-fun x1470 () Bool)
(declare-fun x856 () Bool)
(declare-fun x930 () Bool)
(declare-fun x969 () Bool)
(declare-fun x1140 () Int)
(declare-fun x688 () Bool)
(declare-fun x835 (Int) Int)
(declare-fun x1218 () Int)
(declare-fun x1566 () Bool)
(declare-fun x24 () Int)
(declare-fun x734 () Bool)
(declare-fun x1139 () Int)
(declare-fun x1696 () Int)
(declare-fun x1607 () Bool)
(declare-fun x270 () Int)
(declare-fun x1737 () Bool)
(declare-fun x884 () Bool)
(declare-fun x330 () x865)
(declare-fun x181 () Int)
(declare-fun x1399 () Int)
(declare-fun x1532 () Bool)
(declare-fun x1323 () Int)
(declare-fun x1280 (Int) Int)
(declare-fun x1015 () Int)
(declare-fun x1171 () Int)
(declare-fun x903 (Int) Int)
(declare-fun x1833 () Int)
(declare-fun x557 () Bool)
(declare-fun x103 () Int)
(declare-fun x541 () Int)
(declare-fun x40 () Int)
(declare-fun x375 () Bool)
(declare-fun x1272 () Bool)
(declare-fun x1513 () Bool)
(declare-fun x1136 () Bool)
(declare-fun x665 () Int)
(declare-fun x1381 () Int)
(declare-fun x54 () Bool)
(declare-fun x1625 () Int)
(declare-fun x1577 () Int)
(declare-fun x550 () Int)
(declare-fun x1244 () Int)
(declare-fun x1047 () Int)
(declare-fun x1520 () Bool)
(declare-fun x17 () Bool)
(declare-fun x1844 () Bool)
(declare-fun x165 () Bool)
(declare-fun x669 () Int)
(declare-fun x733 () Bool)
(declare-fun x1793 () Int)
(declare-fun x1873 (Int) Int)
(declare-fun x1366 () Int)
(declare-fun x1018 () Int)
(declare-fun x263 () Int)
(declare-fun x686 () Bool)
(declare-fun x1189 () Int)
(declare-fun x827 () Int)
(declare-fun x1853 () Int)
(declare-fun x1628 () Bool)
(declare-fun x1081 () Bool)
(declare-fun x366 () Bool)
(declare-fun x447 () Bool)
(declare-fun x1926 (Int) Int)
(declare-fun x996 () Bool)
(declare-fun x1650 () Bool)
(declare-fun x1556 () Bool)
(declare-fun x920 () Int)
(declare-fun x1262 () Int)
(declare-fun x431 () Bool)
(declare-fun x71 () Bool)
(declare-fun x468 () Bool)
(declare-fun x1255 () Bool)
(declare-fun x800 () Bool)
(declare-fun x376 () Int)
(declare-fun x752 () Int)
(declare-fun x1163 () Bool)
(declare-fun x175 () Bool)
(declare-fun x1867 (Int) Int)
(declare-fun x304 () Int)
(declare-fun x1079 () Int)
(declare-fun x746 () Int)
(declare-fun x1361 () Bool)
(declare-fun x1515 () Int)
(declare-fun x84 () Bool)
(declare-fun x704 () Int)
(declare-fun x94 () Int)
(declare-fun x1721 () Int)
(declare-fun x1892 () Int)
(declare-fun x195 () Bool)
(declare-fun x1679 () Int)
(declare-fun x75 () Int)
(declare-fun x556 () Bool)
(declare-fun x421 () Int)
(declare-fun x760 () Int)
(declare-fun x510 () Int)
(declare-fun x171 () Int)
(declare-fun x1063 () Int)
(declare-fun x889 () Bool)
(declare-fun x1820 (Int) Int)
(declare-fun x1918 () Int)
(declare-fun x1304 () Bool)
(declare-fun x976 () Bool)
(declare-fun x250 (Int) Int)
(declare-fun x493 () x865)
(declare-fun x472 () Bool)
(declare-fun x893 () Int)
(declare-fun x162 () Bool)
(declare-fun x223 () Bool)
(declare-fun x675 () Bool)
(declare-fun x877 () Int)
(declare-fun x197 () x865)
(declare-fun x260 () Int)
(declare-fun x378 () Int)
(declare-fun x1915 () Bool)
(declare-fun x1251 () Bool)
(declare-fun x589 () Bool)
(declare-fun x1634 () Int)
(declare-fun x1149 () Int)
(declare-fun x51 (Int) Int)
(declare-fun x559 () Int)
(declare-fun x1123 () Bool)
(declare-fun x1611 () Int)
(declare-fun x1900 () Int)
(declare-fun x35 () Int)
(declare-fun x189 () Bool)
(declare-fun x466 () Bool)
(declare-fun x1459 () Int)
(declare-fun x515 () Int)
(declare-fun x1241 () Int)
(declare-fun x495 () Int)
(declare-fun x122 () Bool)
(declare-fun x982 () Int)
(declare-fun x1922 () Int)
(declare-fun x1547 () Bool)
(declare-fun x297 () Int)
(declare-fun x1187 () Bool)
(declare-fun x470 () Bool)
(declare-fun x1703 () Bool)
(declare-fun x350 () Int)
(declare-fun x1682 () Int)
(declare-fun x1088 () Bool)
(declare-fun x1647 () Int)
(declare-fun x1404 () Int)
(declare-fun x1212 () Bool)
(declare-fun x484 () Int)
(declare-fun x67 () Int)
(declare-fun x1516 () Bool)
(declare-fun x1911 () Int)
(declare-fun x154 () x865)
(declare-fun x1084 () Int)
(declare-fun x190 () Int)
(declare-fun x1657 () Bool)
(declare-fun x1672 () Int)
(declare-fun x1841 () Int)
(declare-fun x926 () Bool)
(declare-fun x1173 () Bool)
(declare-fun x1017 () Bool)
(declare-fun x1359 () Bool)
(declare-fun x80 () Int)
(declare-fun x1331 () Int)
(declare-fun x1731 () Bool)
(declare-fun x435 () Bool)
(declare-fun x1527 () Int)
(declare-fun x1670 () Bool)
(declare-fun x1313 () Bool)
(declare-fun x1819 () Int)
(declare-fun x1699 () Bool)
(declare-fun x1720 () Bool)
(declare-fun x1617 () Int)
(declare-fun x1216 () Bool)
(declare-fun x1548 () Bool)
(declare-fun x732 () Int)
(declare-fun x1643 () Bool)
(declare-fun x711 () Int)
(declare-fun x1630 () Int)
(declare-fun x1412 () Int)
(declare-fun x1805 () Int)
(declare-fun x428 () Int)
(declare-fun x115 () Bool)
(declare-fun x86 () Bool)
(declare-fun x218 (Int) Int)
(declare-fun x1037 () Bool)
(declare-fun x225 (Int) Int)
(declare-fun x1226 () Int)
(declare-fun x981 () Bool)
(declare-fun x727 (Int) Int)
(declare-fun x985 () Int)
(declare-fun x768 (Int) Int)
(declare-fun x696 (Int) Int)
(declare-fun x1385 () x865)
(declare-fun x789 () Bool)
(declare-fun x742 (Int) Int)
(declare-fun x1786 () Int)
(declare-fun x1120 () Int)
(declare-fun x1472 () Int)
(declare-fun x863 () Int)
(declare-fun x1711 () Bool)
(declare-fun x1760 () Int)
(declare-fun x344 () Int)
(declare-fun x1346 () Int)
(declare-fun x1714 () Int)
(declare-fun x241 () Int)
(declare-fun x1439 () Int)
(declare-fun x220 () x865)
(declare-fun x1164 () Int)
(declare-fun x659 () Int)
(declare-fun x1062 (Int) Int)
(declare-fun x454 () Bool)
(declare-fun x573 () Int)
(declare-fun x1514 () Bool)
(declare-fun x837 () Int)
(declare-fun x55 () Bool)
(declare-fun x701 (x865) Int)
(declare-fun x228 () Int)
(declare-fun x14 () Int)
(declare-fun x213 () Int)
(declare-fun x1890 () Int)
(declare-fun x244 () Bool)
(declare-fun x1572 () x865)
(declare-fun x890 () Int)
(declare-fun x656 () Int)
(declare-fun x1770 () Int)
(declare-fun x533 (Int) Int)
(declare-fun x1071 () Bool)
(declare-fun x878 () Bool)
(declare-fun x681 () Int)
(declare-fun x149 () Int)
(declare-fun x694 () Int)
(declare-fun x208 (Int) Int)
(declare-fun x625 () Bool)
(declare-fun x1178 () Int)
(declare-fun x403 () Int)
(declare-fun x960 () Bool)
(declare-fun x1307 () Int)
(declare-fun x1177 () Int)
(declare-fun x1031 () Int)
(declare-fun x293 (Int) Int)
(declare-fun x525 () Int)
(declare-fun x255 () Bool)
(declare-fun x1387 () Bool)
(declare-fun x1288 () Bool)
(declare-fun x1227 (Int) Int)
(declare-fun x899 () Int)
(declare-fun x1479 () Int)
(declare-fun x1392 () Int)
(declare-fun x1375 () Int)
(declare-fun x762 () Bool)
(declare-fun x429 () Bool)
(declare-fun x1649 () Int)
(declare-fun x1442 () Int)
(declare-fun x1747 () Bool)
(declare-fun x1266 () Int)
(declare-fun x578 () Int)
(declare-fun x1568 () Bool)
(declare-fun x404 () Int)
(declare-fun x1798 () Int)
(declare-fun x1209 () Bool)
(declare-fun x436 () Bool)
(declare-fun x616 () Int)
(declare-fun x1103 () Int)
(declare-fun x950 () x865)
(declare-fun x916 (Int) Int)
(declare-fun x1284 () Int)
(declare-fun x77 () Bool)
(declare-fun x1457 () Int)
(declare-fun x1584 () Int)
(declare-fun x1341 () Bool)
(declare-fun x1859 () Bool)
(declare-fun x1416 () Int)
(declare-fun x829 () Int)
(declare-fun x1002 () Bool)
(declare-fun x456 () Bool)
(declare-fun x501 () Bool)
(declare-fun x767 () Bool)
(declare-fun x1478 () Int)
(declare-fun x1593 () Bool)
(declare-fun x803 () Int)
(declare-fun x1270 () Int)
(declare-fun x193 () Int)
(declare-fun x846 () x865)
(declare-fun x1633 () Int)
(declare-fun x1155 () Int)
(declare-fun x1587 () Bool)
(declare-fun x1575 () Int)
(declare-fun x1199 () x865)
(declare-fun x68 () x865)
(declare-fun x229 () Int)
(declare-fun x1061 () Int)
(declare-fun x144 () Bool)
(declare-fun x1663 () Int)
(declare-fun x1347 () Int)
(declare-fun x1092 () Int)
(declare-fun x995 () Int)
(declare-fun x406 () Int)
(declare-fun x88 () Int)
(declare-fun x1074 (Int) x865)
(declare-fun x359 () Bool)
(declare-fun x722 () Int)
(declare-fun x1529 () Bool)
(declare-fun x1024 () Bool)
(declare-fun x1756 () Int)
(declare-fun x1133 () Int)
(declare-fun x606 () Bool)
(declare-fun x934 (Int) Int)
(declare-fun x1560 () Int)
(declare-fun x1358 () Int)
(declare-fun x1452 () Bool)
(declare-fun x1431 () Bool)
(declare-fun x1245 () Int)
(declare-fun x913 () Bool)
(declare-fun x1207 () Bool)
(declare-fun x1486 () Int)
(declare-fun x93 () Bool)
(declare-fun x853 (Int) Int)
(declare-fun x1188 () Int)
(declare-fun x296 () Int)
(declare-fun x1604 () Int)
(declare-fun x1326 () Int)
(declare-fun x1695 () Int)
(declare-fun x120 () Bool)
(declare-fun x130 () Int)
(declare-fun x231 () Bool)
(declare-fun x601 () Int)
(declare-fun x1785 () Bool)
(declare-fun x1111 () Bool)
(declare-fun x509 () Int)
(declare-fun x1692 (x865) Int)
(declare-fun x1856 () Bool)
(declare-fun x1888 () Bool)
(declare-fun x85 () Int)
(declare-fun x36 () Int)
(declare-fun x310 () Bool)
(declare-fun x1635 () Bool)
(declare-fun x721 () Bool)
(declare-fun x1322 () Int)
(declare-fun x1736 () Int)
(declare-fun x936 () Bool)
(declare-fun x677 () Int)
(declare-fun x612 () Bool)
(declare-fun x1129 () Int)
(declare-fun x658 (Int) Int)
(declare-fun x1449 () Bool)
(declare-fun x1709 () Bool)
(declare-fun x1590 () Bool)
(declare-fun x337 () Int)
(declare-fun x1117 () Int)
(declare-fun x1725 (x865) Int)
(declare-fun x1268 () Int)
(declare-fun x128 (Int) Int)
(declare-fun x194 () Int)
(declare-fun x1839 () Int)
(declare-fun x1310 () Int)
(declare-fun x1303 () Bool)
(declare-fun x1202 () Bool)
(declare-fun x979 () Bool)
(declare-fun x308 () Int)
(declare-fun x1489 () Bool)
(declare-fun x1059 () Int)
(declare-fun x684 () Int)
(declare-fun x1615 () Bool)
(declare-fun x876 () Int)
(declare-fun x871 () Bool)
(declare-fun x537 () Bool)
(declare-fun x874 () Bool)
(declare-fun x449 () Int)
(declare-fun x654 () Int)
(declare-fun x921 () Bool)
(declare-fun x42 () Bool)
(declare-fun x1538 () Int)
(declare-fun x1301 () Int)
(declare-fun x1225 () Int)
(declare-fun x1386 () Bool)
(declare-fun x1840 () Int)
(declare-fun x479 () Bool)
(declare-fun x1403 () Bool)
(declare-fun x1889 () Int)
(declare-fun x781 () Int)
(declare-fun x795 () Int)
(declare-fun x234 () Int)
(declare-fun x411 () Bool)
(declare-fun x676 () Int)
(declare-fun x1231 () Int)
(declare-fun x1815 () Int)
(declare-fun x18 () Int)
(declare-fun x1811 () Bool)
(declare-fun x738 () Int)
(declare-fun x511 () Int)
(declare-fun x739 () Bool)
(declare-fun x1429 () Int)
(declare-fun x1320 () Bool)
(declare-fun x1105 () Int)
(declare-fun x1836 () Int)
(declare-fun x514 () Bool)
(declare-fun x1653 () Bool)
(declare-fun x1350 () Int)
(declare-fun x1510 () Bool)
(declare-fun x1021 () Int)
(declare-fun x1646 () Int)
(declare-fun x1406 () Int)
(declare-fun x249 () Int)
(declare-fun x1290 (Int) Int)
(declare-fun x254 () Int)
(declare-fun x1707 () Int)
(declare-fun x710 () Bool)
(declare-fun x1846 () Int)
(declare-fun x1014 () Bool)
(declare-fun x933 () Bool)
(declare-fun x1261 () Bool)
(declare-fun x20 () Bool)
(declare-fun x23 () x865)
(declare-fun x527 () Bool)
(declare-fun x384 () Int)
(declare-fun x530 () Int)
(declare-fun x670 () Bool)
(declare-fun x1356 () Bool)
(declare-fun x1596 () Int)
(declare-fun x1239 (Int) Int)
(declare-fun x558 () Int)
(declare-fun x1802 (x865) Int)
(declare-fun x1661 () Bool)
(declare-fun x538 () Bool)
(declare-fun x1224 () Int)
(declare-fun x414 () Int)
(declare-fun x1250 () x865)
(declare-fun x647 () Int)
(declare-fun x707 () Bool)
(declare-fun x843 (Int) Int)
(declare-fun x1469 () Int)
(declare-fun x607 () Bool)
(declare-fun x1057 () Int)
(declare-fun x124 () Bool)
(declare-fun x1680 (x865) Int)
(declare-fun x839 () Bool)
(declare-fun x119 () Bool)
(declare-fun x730 () Int)
(declare-fun x1588 () Bool)
(declare-fun x1273 () Int)
(declare-fun x1586 () Int)
(declare-fun x845 () Bool)
(declare-fun x498 () Bool)
(declare-fun x1626 () Bool)
(declare-fun x1215 () Int)
(declare-fun x245 () Bool)
(declare-fun x542 () Int)
(declare-fun x1259 () Int)
(declare-fun x1559 () Bool)
(declare-fun x604 () Int)
(declare-fun x240 () Int)
(declare-fun x1728 () Int)
(declare-fun x1495 () Int)
(declare-fun x1264 () Int)
(declare-fun x1677 () Bool)
(declare-fun x1049 () Int)
(declare-fun x784 (Int) Int)
(declare-fun x1380 () Int)
(declare-fun x1256 () Int)
(declare-fun x332 () x865)
(declare-fun x1028 () Bool)
(declare-fun x779 () Bool)
(declare-fun x988 () Int)
(declare-fun x1689 () Int)
(declare-fun x246 () Int)
(declare-fun x776 () x865)
(declare-fun x415 () Bool)
(declare-fun x402 () Int)
(declare-fun x1034 (Int) Int)
(declare-fun x301 () Int)
(declare-fun x922 () Int)
(declare-fun x811 () Int)
(declare-fun x104 () Bool)
(declare-fun x315 (Int) Int)
(declare-fun x821 () Int)
(declare-fun x646 () Int)
(declare-fun x174 () Int)
(declare-fun x1257 () x865)
(declare-fun x977 () Bool)
(declare-fun x1036 () Bool)
(declare-fun x388 () Int)
(declare-fun x1640 (Int) Int)
(declare-fun x200 (Int) Int)
(declare-fun x22 () Bool)
(declare-fun x1758 () Int)
(declare-fun x170 () Bool)
(declare-fun x743 () Int)
(declare-fun x1355 () Int)
(declare-fun x782 () Bool)
(declare-fun x593 () x865)
(declare-fun x306 () Bool)
(declare-fun x1465 () Int)
(declare-fun x129 () x865)
(declare-fun x765 () Int)
(declare-fun x1499 () Int)
(declare-fun x294 () Int)
(declare-fun x1517 (x865) Int)
(declare-fun x133 () Bool)
(declare-fun x349 () Int)
(declare-fun x462 () Bool)
(declare-fun x1166 () Bool)
(declare-fun x62 () Int)
(declare-fun x678 () Int)
(declare-fun x1492 () Int)
(declare-fun x98 () Int)
(declare-fun x1704 () Int)
(declare-fun x618 () Int)
(declare-fun x714 () Bool)
(declare-fun x459 () Bool)
(declare-fun x327 () Int)
(declare-fun x728 () Bool)
(declare-fun x126 () Bool)
(declare-fun x159 () Int)
(declare-fun x1828 () Int)
(declare-fun x1659 (Int) Int)
(declare-fun x608 (Int) Int)
(declare-fun x1482 () Int)
(declare-fun x339 () Int)
(declare-fun x1924 () Bool)
(declare-fun x695 () Int)
(declare-fun x91 () Bool)
(declare-fun x1193 (Int) Int)
(declare-fun x938 () Int)
(declare-fun x1718 () Int)
(declare-fun x494 () Bool)
(declare-fun x551 () Bool)
(declare-fun x1098 () Int)
(declare-fun x1702 () Bool)
(declare-fun x440 (Int) Int)
(declare-fun x1930 () Bool)
(declare-fun x180 () x865)
(declare-fun x331 () Bool)
(declare-fun x943 () Bool)
(declare-fun x664 () Int)
(declare-fun x919 () Bool)
(declare-fun x1668 () Int)
(declare-fun x371 () Int)
(declare-fun x1925 () Int)
(declare-fun x444 () Bool)
(declare-fun x379 () Bool)
(declare-fun x1154 () Bool)
(declare-fun x691 (Int) Int)
(declare-fun x1109 () Int)
(declare-fun x1477 () Int)
(declare-fun x828 () Bool)
(declare-fun x1132 () Bool)
(declare-fun x1016 () Int)
(declare-fun x182 () Bool)
(declare-fun x1214 () Bool)
(declare-fun x673 () Int)
(declare-fun x135 () Bool)
(declare-fun x100 () Bool)
(declare-fun x1735 () Bool)
(declare-fun x1872 () Bool)
(declare-fun x1644 () Bool)
(declare-fun x232 () Bool)
(declare-fun x624 (Int) Int)
(declare-fun x1039 () Bool)
(declare-fun x1490 () Int)
(declare-fun x1321 () Int)
(declare-fun x285 () Bool)
(declare-fun x1425 () Int)
(declare-fun x328 () Bool)
(declare-fun x1764 () Bool)
(declare-fun x123 () Bool)
(declare-fun x450 () Bool)
(declare-fun x43 () Int)
(declare-fun x469 () Bool)
(declare-fun x1048 (x865) Int)
(declare-fun x1619 () Bool)
(declare-fun x1637 () Int)
(declare-fun x1675 () x865)
(declare-fun x216 () Bool)
(declare-fun x1299 (Int) Int)
(declare-fun x1351 () Int)
(declare-fun x1868 () Bool)
(declare-fun x1445 () Int)
(declare-fun x150 () Bool)
(declare-fun x725 () Bool)
(declare-fun x204 (Int) Int)
(declare-fun x771 () Int)
(declare-fun x1787 () Bool)
(declare-fun x1428 () Int)
(declare-fun x754 () Bool)
(declare-fun x178 () Int)
(declare-fun x45 () Bool)
(declare-fun x744 () Int)
(declare-fun x1106 () Bool)
(declare-fun x39 () Int)
(declare-fun x1243 () Int)
(declare-fun x1780 () Int)
(declare-fun x549 () Bool)
(declare-fun x113 () Int)
(declare-fun x369 () Int)
(declare-fun x894 () Int)
(declare-fun x1112 () x865)
(declare-fun x813 () Int)
(declare-fun x1753 () Bool)
(declare-fun x1665 () Bool)
(declare-fun x1462 () Bool)
(declare-fun x166 (Int) Int)
(declare-fun x1295 () Bool)
(declare-fun x1114 () Bool)
(declare-fun x579 () Bool)
(declare-fun x338 () Bool)
(declare-fun x1474 () Int)
(declare-fun x153 () Bool)
(declare-fun x158 () Bool)
(declare-fun x634 (Int) Int)
(declare-fun x793 () Int)
(declare-fun x351 () Bool)
(declare-fun x1340 () Int)
(declare-fun x11 () Bool)
(declare-fun x1864 () Bool)
(declare-fun x1743 () Int)
(declare-fun x15 () Int)
(declare-fun x508 () Int)
(declare-fun x1213 (Int) Int)
(declare-fun x529 () Int)
(declare-fun x1574 () Bool)
(declare-fun x325 () Int)
(declare-fun x1342 () Bool)
(declare-fun x1850 () Bool)
(declare-fun x1788 () Int)
(declare-fun x528 () Bool)
(declare-fun x750 () Bool)
(declare-fun x1069 () Bool)
(declare-fun x1219 () Int)
(declare-fun x1194 () Bool)
(declare-fun x66 () Int)
(declare-fun x891 () Int)
(declare-fun x1369 () Int)
(declare-fun x836 () Bool)
(declare-fun x1842 () Int)
(declare-fun x1667 () Bool)
(declare-fun x763 (Int) Int)
(declare-fun x1352 () Int)
(declare-fun x1765 () Bool)
(declare-fun x1334 () Int)
(declare-fun x1914 () Int)
(declare-fun x1422 () Int)
(declare-fun x1052 () Int)
(declare-fun x1734 () Int)
(declare-fun x970 () Int)
(declare-fun x506 () Int)
(declare-fun x1592 () Int)
(declare-fun x32 () Bool)
(declare-fun x532 () Bool)
(declare-fun x1152 () Bool)
(declare-fun x1108 () Int)
(declare-fun x416 () Int)
(declare-fun x1144 (Int) Int)
(declare-fun x892 () Bool)
(declare-fun x1010 (Int) Int)
(declare-fun x410 () Int)
(declare-fun x1751 () Int)
(declare-fun x1336 (Int) Int)
(declare-fun x271 () Int)
(declare-fun x481 () Int)
(declare-fun x1502 () Bool)
(declare-fun x96 () Int)
(declare-fun x1776 () Bool)
(declare-fun x1806 () Int)
(declare-fun x897 () Int)
(declare-fun x210 () Int)
(declare-fun x1865 () Int)
(declare-fun x1610 (Int) Int)
(declare-fun x972 (Int) Int)
(declare-fun x1414 () Int)
(declare-fun x445 () Int)
(declare-fun x1549 () Bool)
(declare-fun x226 () Bool)
(declare-fun x140 () Bool)
(declare-fun x622 () Int)
(declare-fun x476 () Bool)
(declare-fun x807 () Bool)
(declare-fun x774 () Bool)
(declare-fun x726 () Bool)
(declare-fun x1693 () Int)
(declare-fun x1461 () x865)
(declare-fun x720 () Int)
(declare-fun x1389 () Bool)
(declare-fun x191 (Int) Int)
(declare-fun x318 () Int)
(declare-fun x1283 () Bool)
(declare-fun x1522 () Int)
(declare-fun x662 () Bool)
(declare-fun x1658 () Int)
(declare-fun x978 () Int)
(declare-fun x1220 () Int)
(declare-fun x1046 () Int)
(declare-fun x347 () Int)
(declare-fun x295 () Int)
(declare-fun x1376 () Bool)
(declare-fun x196 () Int)
(declare-fun x713 () Int)
(declare-fun x1904 () Int)
(declare-fun x580 () Bool)
(declare-fun x567 (Int) Int)
(declare-fun x163 () Int)
(declare-fun x991 () Bool)
(declare-fun x1874 () Bool)
(declare-fun x1700 () Int)
(declare-fun x1296 () Int)
(declare-fun x816 () Int)
(declare-fun x1122 () Bool)
(declare-fun x1810 (Int) Int)
(declare-fun x356 () Int)
(declare-fun x1065 () Int)
(declare-fun x172 () Int)
(declare-fun x1504 () Bool)
(declare-fun x168 () Int)
(declare-fun x965 () Int)
(declare-fun x1372 () Bool)
(declare-fun x1089 () Int)
(declare-fun x354 () Bool)
(declare-fun x576 () Int)
(declare-fun x769 () Int)
(declare-fun x855 () Bool)
(declare-fun x367 () Bool)
(declare-fun x482 () Int)
(declare-fun x799 () Bool)
(declare-fun x1143 () Int)
(declare-fun x1779 () Bool)
(declare-fun x1582 () Bool)
(declare-fun x505 () Bool)
(declare-fun x895 () Bool)
(declare-fun x1232 () Int)
(declare-fun x300 () Bool)
(declare-fun x65 () Int)
(declare-fun x1638 () Bool)
(declare-fun x321 () Bool)
(declare-fun x655 () Bool)
(declare-fun x1598 () Bool)
(declare-fun x291 () Bool)
(declare-fun x102 () x865)
(declare-fun x267 () Bool)
(declare-fun x1484 () Bool)
(declare-fun x26 () Int)
(declare-fun x6 () Bool)
(declare-fun x471 () Int)
(declare-fun x1253 () Bool)
(declare-fun x1678 () Int)
(declare-fun x1624 () Int)
(declare-fun x13 () Int)
(declare-fun x818 (Int) Int)
(declare-fun x929 () Int)
(declare-fun x1772 () Int)
(declare-fun x1599 () Bool)
(declare-fun x83 () Bool)
(declare-fun x1156 () Int)
(declare-fun x1302 () Bool)
(declare-fun x185 () Bool)
(declare-fun x832 () Int)
(declare-fun x1101 () Int)
(declare-fun x994 () Int)
(declare-fun x1745 () Bool)
(declare-fun x261 () Int)
(declare-fun x357 (Int) Int)
(declare-fun x235 () Int)
(declare-fun x1595 () Int)
(declare-fun x709 () Int)
(declare-fun x1318 () Int)
(declare-fun x1767 () Bool)
(declare-fun x824 () Bool)
(declare-fun x1006 () Int)
(declare-fun x866 () Bool)
(declare-fun x1497 () Bool)
(declare-fun x703 () Int)
(declare-fun x1441 (x865) Int)
(declare-fun x1252 () Bool)
(declare-fun x1172 (x865) Int)
(declare-fun x1539 (Int) Int)
(declare-fun x491 () Bool)
(declare-fun x52 () Int)
(declare-fun x798 () Int)
(declare-fun x1576 () Int)
(declare-fun x830 () Bool)
(declare-fun x708 () Int)
(declare-fun x340 () Int)
(declare-fun x1907 (x865) Int)
(declare-fun x1434 () Int)
(declare-fun x958 () Bool)
(declare-fun x931 () Bool)
(declare-fun x1349 (Int) Int)
(declare-fun x90 (Int) Int)
(declare-fun x1916 () Int)
(declare-fun x287 () Int)
(declare-fun x423 () Int)
(declare-fun x199 () Bool)
(declare-fun x1427 () Bool)
(declare-fun x1849 () Bool)
(declare-fun x571 () x865)
(declare-fun x221 () Bool)
(declare-fun x364 () Int)
(declare-fun x1113 () Int)
(declare-fun x1807 (x865) Int)
(declare-fun x242 () Int)
(declare-fun x1022 () Bool)
(declare-fun x581 () Int)
(declare-fun x1281 () x865)
(declare-fun x1023 () Int)
(declare-fun x1901 () Int)
(declare-fun x957 () Bool)
(declare-fun x1563 () Int)
(declare-fun x1727 (Int) Int)
(declare-fun x1821 () Int)
(declare-fun x1420 () Int)
(declare-fun x259 () Int)
(declare-fun x518 () Int)
(declare-fun x382 () Bool)
(declare-fun x854 () Int)
(declare-fun x442 () x865)
(declare-fun x900 () Int)
(declare-fun x439 () Int)
(declare-fun x980 () Int)
(declare-fun x833 () Bool)
(declare-fun x1278 () Bool)
(declare-fun x1374 () x865)
(declare-fun x1206 () Int)
(declare-fun x1383 () Int)
(declare-fun x804 () Int)
(declare-fun x1683 (Int) Int)
(declare-fun x298 () Bool)
(declare-fun x1097 () Int)
(declare-fun x1851 () Int)
(declare-fun x715 () Bool)
(declare-fun x1370 () Bool)
(declare-fun x685 () Bool)
(declare-fun x1511 () Int)
(declare-fun x1824 () Bool)
(declare-fun x409 (Int) Int)
(declare-fun x121 () Bool)
(declare-fun x1126 () Int)
(declare-fun x317 () x865)
(declare-fun x377 () Bool)
(declare-fun x1368 () Int)
(declare-fun x95 (Int Int) Int)
(declare-fun x773 () Bool)
(declare-fun x905 (Int) Int)
(declare-fun x1121 () Int)
(declare-fun x577 () Int)
(declare-fun x1552 () Int)
(declare-fun x667 () Bool)
(declare-fun x1742 () Bool)
(declare-fun x108 () Bool)
(declare-fun x1094 () Int)
(declare-fun x683 () Bool)
(declare-fun x446 () Int)
(declare-fun x1706 (Int) Int)
(declare-fun x1501 () Int)
(declare-fun x477 () Bool)
(declare-fun x1316 () Bool)
(declare-fun x504 () Int)
(declare-fun x1181 (Int) Int)
(declare-fun x1694 () Int)
(declare-fun x791 () Int)
(declare-fun x1464 () Int)
(declare-fun x290 () Int)
(declare-fun x78 () Int)
(declare-fun x56 () Int)
(declare-fun x621 () Bool)
(declare-fun x975 () Int)
(declare-fun x1454 () Bool)
(declare-fun x947 () Bool)
(declare-fun x1040 () Int)
(declare-fun x1011 () Bool)
(declare-fun x1773 () Bool)
(declare-fun x849 (Int) Int)
(declare-fun x1827 () Int)
(declare-fun x917 () Int)
(declare-fun x1799 () Bool)
(declare-fun x584 () Bool)
(declare-fun x1076 () Bool)
(declare-fun x238 () Int)
(declare-fun x101 () Int)
(declare-fun x1583 () Bool)
(declare-fun x1337 () Bool)
(declare-fun x25 () Int)
(declare-fun x1761 () Int)
(declare-fun x361 () Bool)
(declare-fun x1891 () Int)
(declare-fun x1269 () Bool)
(declare-fun x872 () Int)
(declare-fun x201 () Bool)
(declare-fun x761 () Int)
(declare-fun x430 () Int)
(declare-fun x1001 () Bool)
(declare-fun x600 () Bool)
(declare-fun x1684 () Bool)
(declare-fun x531 () Int)
(declare-fun x463 () Int)
(declare-fun x590 () Bool)
(declare-fun x1056 () Bool)
(declare-fun x1545 () Bool)
(declare-fun x1858 () Bool)
(declare-fun x1277 (Int) Int)
(declare-fun x702 () Bool)
(declare-fun x1738 (Int) Int)
(declare-fun x1448 () Bool)
(declare-fun x1087 () Bool)
(declare-fun x222 () Int)
(declare-fun x1880 () Bool)
(declare-fun x1128 () Int)
(declare-fun x1716 () Bool)
(declare-fun x1415 () Int)
(declare-fun x812 () Int)
(declare-fun x1603 () Int)
(declare-fun x817 () Int)
(declare-fun x560 () Int)
(declare-fun x627 () Int)
(declare-fun x64 () Int)
(declare-fun x1078 () Bool)
(declare-fun x496 () Bool)
(declare-fun x1762 () Int)
(declare-fun x292 () Bool)
(declare-fun x362 () Int)
(declare-fun x418 () Int)
(declare-fun x1523 () Int)
(declare-fun x1203 () Int)
(declare-fun x614 () Bool)
(declare-fun x1822 () Int)
(declare-fun x434 () Bool)
(declare-fun x1544 () Int)
(declare-fun x12 () Bool)
(declare-fun x1475 () Bool)
(declare-fun x1920 () Bool)
(declare-fun x993 () Bool)
(declare-fun x152 () Int)
(declare-fun x1204 (Int) Int)
(declare-fun x1292 () Bool)
(declare-fun x1400 () Int)
(declare-fun x1673 () Int)
(declare-fun x475 () Bool)
(declare-fun x372 () Bool)
(declare-fun x680 () Int)
(declare-fun x1192 () Int)
(declare-fun x273 () Int)
(declare-fun x1690 () Int)
(declare-fun x262 () Int)
(declare-fun x281 () Bool)
(declare-fun x437 () Bool)
(declare-fun x1602 () Bool)
(declare-fun x1715 () Int)
(declare-fun x563 () Int)
(declare-fun x927 () Int)
(declare-fun x455 () Int)
(declare-fun x1053 (Int) Int)
(declare-fun x1585 () Bool)
(declare-fun x602 () Bool)
(declare-fun x540 () Int)
(declare-fun x1863 () Bool)
(declare-fun x1233 () Int)
(declare-fun x1862 () x865)
(declare-fun x1317 () Int)
(declare-fun x1829 () Int)
(declare-fun x1378 () Int)
(declare-fun x1110 () Bool)
(declare-fun x420 () Bool)
(declare-fun x305 () Int)
(declare-fun x92 () Bool)
(declare-fun x1642 () Int)
(declare-fun x1205 () Int)
(declare-fun x329 () Bool)
(declare-fun x41 () Bool)
(declare-fun x1175 () Bool)
(declare-fun x1020 () Int)
(declare-fun x653 () Bool)
(declare-fun x650 () Bool)
(declare-fun x1589 () Int)
(declare-fun x1333 () Int)
(declare-fun x1180 () Bool)
(declare-fun x1755 () Bool)
(declare-fun x1263 () Bool)
(declare-fun x908 () Int)
(declare-fun x1398 () Int)
(declare-fun x1300 (Int) Int)
(declare-fun x651 (Int) Int)
(declare-fun x861 () Bool)
(declare-fun x536 () Bool)
(declare-fun x888 () x865)
(declare-fun x465 () Int)
(declare-fun x70 () Int)
(declare-fun x879 () Int)
(declare-fun x1282 () Bool)
(declare-fun x1183 (Int) Int)
(declare-fun x989 () Bool)
(declare-fun x940 () Int)
(declare-fun x7 () Int)
(declare-fun x474 () Int)
(declare-fun x256 () Bool)
(declare-fun x74 () Bool)
(declare-fun x539 () Int)
(declare-fun x689 () Int)
(declare-fun x387 () Int)
(declare-fun x735 () Bool)
(declare-fun x987 () Int)
(declare-fun x841 () Int)
(declare-fun x1573 (Int) Int)
(declare-fun x645 () Int)
(declare-fun x1883 () Bool)
(declare-fun x1201 () Bool)
(declare-fun x1557 () Bool)
(declare-fun x1362 () Bool)
(declare-fun x1496 () Bool)
(declare-fun x1654 () Int)
(declare-fun x524 () Bool)
(declare-fun x1748 () Int)
(declare-fun x1777 () Int)
(declare-fun x1771 () Bool)
(declare-fun x1533 () Int)
(declare-fun x517 () Int)
(declare-fun x1852 () Int)
(declare-fun x1597 () Int)
(declare-fun x1308 () Int)
(declare-fun x883 () Bool)
(declare-fun x1481 () Int)
(declare-fun x523 () Bool)
(declare-fun x275 () Bool)
(declare-fun x1908 () Int)
(declare-fun x1912 () Int)
(declare-fun x553 () Int)
(declare-fun x1131 () Bool)
(declare-fun x759 () Int)
(declare-fun x1917 () Int)
(declare-fun x860 () Bool)
(declare-fun x1528 () Bool)
(declare-fun x826 () Int)
(declare-fun x1324 () Int)
(declare-fun x1878 () Int)
(declare-fun x1248 () Bool)
(declare-fun x1297 () Bool)
(declare-fun x233 () Bool)
(declare-fun x335 () Bool)
(declare-fun x723 () Bool)
(declare-fun x1879 () Int)
(define-fun x276 ((x865 x865) (x61 Int)) x865 (ite ((_ is x520) x865) (x520 (x787 x865) (+ x61 (x984 x865))) (ite ((_ is x1141) x865) (x1141 (x1813 x865) (x880 x865) (+ (x705 x865) x61)) (x368 (+ x61 (x1641 x865))))))
(define-fun x1804 ((x1910 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1910) (>= x1910 0)) x1910 (- x1910 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x521 ((x1910 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1910) (> 0 x1910)) (+ x1910 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1910))
(define-fun x489 ((x395 Int)) Bool (and (<= 0 x395) (< x395 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x857 ((x582 Int)) Int (x634 x582))
(define-fun x1402 ((x582 Int)) Int (ite (and (<= 28 x582) (< x582 (+ 4 28))) (x634 (+ (- x582 28) 0)) (x1820 x582)))
(define-fun x1750 ((x582 Int)) Int (ite (= x582 640) x962 (x1402 x582)))
(define-fun x1044 ((x582 Int)) Int (ite (= x582 672) x601 (x1750 x582)))
(define-fun x1067 ((x582 Int)) Int (ite (= x582 704) 1 (x1044 x582)))
(define-fun x1167 ((x582 Int)) Int (ite (= x582 160) x995 (x1640 x582)))
(define-fun x373 ((x582 Int)) Int (ite (= 128 x582) 7 (x1167 x582)))
(define-fun x29 ((x582 Int)) Int (ite (= x582 736) x455 (x373 x582)))
(define-fun x1148 ((x582 Int)) Int (ite (and x702 (not x1384)) (x1640 x582) (x29 x582)))
(define-fun x643 ((x582 Int)) Int (ite (= 160 x582) x995 (x1148 x582)))
(define-fun x1931 ((x582 Int)) Int (ite (= x582 128) 7 (x643 x582)))
(define-fun x1491 ((x582 Int)) Int (ite (= 800 x582) x425 (x250 x582)))
(define-fun x1343 ((x582 Int)) Int (ite (= x582 224) 1889567281 (x250 x582)))
(define-fun x1812 ((x582 Int)) Int (ite (and (< x582 (+ 32 224)) (>= x582 224)) (x1727 (+ (- x582 224) 0)) (x972 x582)))
(define-fun x687 ((x582 Int)) Int (ite (and x866 x538 x702) (x1812 x582) (x972 x582)))
(define-fun x160 ((x582 Int)) Int (ite (= 288 x582) x1786 (x687 x582)))
(define-fun x546 ((x582 Int)) Int (ite (= x582 320) 0 (x191 x582)))
(define-fun x1550 ((x582 Int)) Int (ite (= x582 256) x1268 (x191 x582)))
(define-fun x1656 ((x582 Int)) Int (ite (= x582 320) x1405 (x1550 x582)))
(define-fun x588 ((x582 Int)) Int (ite (and x702 x239 x538) (x1656 x582) (x546 x582)))
(define-fun x772 ((x582 Int)) Int (ite (= x582 384) x1306 (x588 x582)))
(define-fun x1655 ((x582 Int)) Int (ite (= 800 x582) x616 (x772 x582)))
(define-fun x1236 ((x582 Int)) Int (ite (and x702 (not x538)) (x1491 x582) (x1655 x582)))
(define-fun x1719 ((x582 Int)) Int (ite (= 768 x582) x1829 (x1236 x582)))
(define-fun x346 ((x582 Int)) Int (ite (= x582 800) 1889567281 (x1719 x582)))
(define-fun x205 ((x582 Int)) Int (ite (and (> (+ 32 800) x582) (>= x582 800)) (x1100 (+ (- x582 800) 0)) (x763 x582)))
(define-fun x1394 ((x582 Int)) Int (ite (= x582 864) 0 (x1181 x582)))
(define-fun x1666 ((x582 Int)) Int (ite (= x582 928) 0 (x1394 x582)))
(define-fun x939 ((x582 Int)) Int (ite (= 992 x582) 1889567281 (x253 x582)))
(define-fun x316 ((x582 Int)) Int (ite (and (<= 992 x582) (> (+ 992 32) x582)) (x843 (+ (- x582 992) 0)) (x1536 x582)))
(define-fun x1176 ((x582 x865)) Int (ite (and (not x1742) x770) (x1441 x582) (x1725 x582)))
(define-fun x1119 ((x582 Int)) Int (ite (and x123 x770 x1742) (x316 x582) (x1536 x582)))
(define-fun x19 ((x582 Int)) Int (ite (= 992 x582) x1206 (x1102 x582)))
(define-fun x637 ((x582 Int)) Int (ite (= x582 160) x1105 (x19 x582)))
(define-fun x698 ((x582 Int)) Int (ite (= 128 x582) 16 (x637 x582)))
(define-fun x1919 ((x582 Int)) Int (ite (= x582 1056) 773487949 (x1835 x582)))
(define-fun x1447 ((x582 Int)) Int (ite (and (< x582 (+ 1056 32)) (<= 1056 x582)) (x1030 (+ 0 (- x582 1056))) (x849 x582)))
(define-fun x69 ((x582 Int)) Int (ite (and x1602 x1864 x611 x844) (x1447 x582) (x849 x582)))
(define-fun x1631 ((x582 Int)) Int (ite (= 1024 x582) x294 (x69 x582)))
(define-fun x1118 ((x582 Int)) Int (ite (= 1088 x582) 1889567281 (x1631 x582)))
(define-fun x641 ((x582 Int)) Int (ite (and (< x582 (+ 1088 32)) (>= x582 1088)) (x784 (+ 0 (- x582 1088))) (x1349 x582)))
(define-fun x1127 ((x582 Int)) Int (ite (and x655 x844 x1602 x1864) (x641 x582) (x1349 x582)))
(define-fun x167 ((x582 Int)) Int (ite (= x582 768) x461 (x639 x582)))
(define-fun x1332 ((x582 Int)) Int (ite (= x582 864) x838 (x167 x582)))
(define-fun x1691 ((x582 Int)) Int (ite (= x582 224) x1198 (x1332 x582)))
(define-fun x1075 ((x582 Int)) Int (ite (= x582 256) x595 (x1691 x582)))
(define-fun x1540 ((x582 Int)) Int (ite (= 160 x582) x900 (x1075 x582)))
(define-fun x1286 ((x582 Int)) Int (ite (= 128 x582) 16 (x1540 x582)))
(define-fun x1271 ((x582 Int)) Int (ite (= x582 160) x1839 (x1831 x582)))
(define-fun x1814 ((x582 Int)) Int (ite (= x582 128) 16 (x1271 x582)))
(define-fun x999 ((x582 Int)) Int (ite (= x582 160) x1512 (x138 x582)))
(define-fun x737 ((x582 Int)) Int (ite (= 128 x582) 16 (x999 x582)))
(define-fun x1660 ((x582 Int)) Int (ite (and x1864 (not x914) x844 x1747 x1602 x1487) (x138 x582) (ite (and x1602 x1487 x844 x1864 x914) (x1831 x582) (x737 x582))))
(define-fun x1794 ((x582 Int)) Int (ite (= x582 160) x169 (x1660 x582)))
(define-fun x1847 ((x582 Int)) Int (ite (= x582 128) 16 (x1794 x582)))
(define-fun x1791 ((x582 Int)) Int (ite (= x582 160) x1914 (x1847 x582)))
(define-fun x37 ((x582 Int)) Int (ite (= x582 128) 16 (x1791 x582)))
(define-fun x237 ((x582 Int)) Int (ite (and x1602 x844 (not x1487) x1864) (x639 x582) (x37 x582)))
(define-fun x211 ((x582 Int)) Int (ite (= x582 160) x438 (x237 x582)))
(define-fun x851 ((x582 Int)) Int (ite (= 128 x582) 16 (x211 x582)))
(define-fun x949 ((x582 Int)) Int (ite (and x844 x1602 x1864) (x851 x582) (x1835 x582)))
(define-fun x289 ((x582 x865)) Int (ite (= x1385 x582) x1380 (x701 x582)))
(define-fun x986 ((x582 x865)) Int (ite (= (x368 39) x582) x99 (x289 x582)))
(define-fun x942 ((x582 x865)) Int (ite (and x1864 (not x914) x1602 x1487 x1747 x844) (x701 x582) (ite (and x1602 x1487 x1864 x914 x844) (x701 x582) (x986 x582))))
(define-fun x820 ((x582 x865)) Int (ite (= x1257 x582) x238 (x942 x582)))
(define-fun x990 ((x582 x865)) Int (ite (= x220 x582) x228 (x820 x582)))
(define-fun x745 ((x582 x865)) Int (ite (= (x368 40) x582) x541 (x990 x582)))
(define-fun x134 ((x582 x865)) Int (ite (and x1864 x1602 x844 (not x1487)) (x701 x582) (x745 x582)))
(define-fun x522 ((x582 x865)) Int (ite (= x129 x582) x1860 (x134 x582)))
(define-fun x1774 ((x582 x865)) Int (ite (= (x368 40) x582) x1129 (x522 x582)))
(define-fun x825 ((x582 x865)) Int (ite (and x1864 x1602 x844) (x1774 x582) (x701 x582)))
(define-fun x615 ((x582 Int)) Int (ite (= x582 896) x623 (x1706 x582)))
(define-fun x1629 ((x582 Int)) Int (ite (and x72 x951) (x1706 x582) (ite (and x1864 (not x1602)) (x1102 x582) (ite (and (not x1742) x770) (x253 x582) (x615 x582)))))
(define-fun x1506 ((x582 x865)) Int (ite (and x951 x72) (x825 x582) (ite (and x1864 (not x1602)) (x701 x582) (ite (and (not x1742) x770) (x701 x582) (x825 x582)))))
(define-fun x1004 ((x582 Int)) Int (ite (= 928 x582) 1889567281 (x1629 x582)))
(define-fun x257 ((x582 Int)) Int (ite (and (< x582 (+ 928 32)) (>= x582 928)) (x1305 (+ (- x582 928) 0)) (x768 x582)))
(define-fun x808 ((x582 Int)) Int (ite (and x475 x329) (x257 x582) (x768 x582)))
(define-fun x277 ((x582 Int)) Int (ite (= x582 768) x424 (x90 x582)))
(define-fun x60 ((x582 Int)) Int (ite (= 352 x582) x720 (x277 x582)))
(define-fun x1345 ((x582 Int)) Int (ite (= x582 224) 1889567281 (x60 x582)))
(define-fun x57 ((x582 Int)) Int (ite (and (>= x582 224) (> (+ 224 32) x582)) (x132 (+ 0 (- x582 224))) (x818 x582)))
(define-fun x629 ((x582 Int)) Int (ite (and x475 x1677 x992) (x57 x582) (x818 x582)))
(define-fun x407 ((x582 Int)) Int (ite (= 288 x582) x1340 (x629 x582)))
(define-fun x882 ((x582 Int)) Int (ite (= 320 x582) 0 (x323 x582)))
(define-fun x1408 ((x582 Int)) Int (ite (= 256 x582) x299 (x323 x582)))
(define-fun x1285 ((x582 Int)) Int (ite (= x582 320) x971 (x1408 x582)))
(define-fun x1396 ((x582 Int)) Int (ite (and x475 x1677 x1123) (x1285 x582) (x882 x582)))
(define-fun x1041 ((x582 Int)) Int (ite (= x582 416) x760 (x1396 x582)))
(define-fun x1581 ((x582 Int)) Int (ite (= 928 x582) 0 (x567 x582)))
(define-fun x749 ((x582 Int)) Int (ite (= 928 x582) x344 (x567 x582)))
(define-fun x850 ((x582 Int)) Int (ite (and x721 x1677 x475) (x749 x582) (x1581 x582)))
(define-fun x1073 ((x582 Int)) Int (ite (= 736 x582) x719 (x850 x582)))
(define-fun x1518 ((x582 Int)) Int (ite (and (not x1677) x475) (x90 x582) (x1073 x582)))
(define-fun x946 ((x582 x865)) Int (ite (and (not x1449) x233) (x1441 x582) (ite (and x72 x951) (x1725 x582) (ite (and (not x1602) x1864) (x1441 x582) (x1176 x582)))))
(define-fun x729 ((x582 Int)) Int (ite (and x233 (not x1449)) (x1181 x582) (x1518 x582)))
(define-fun x499 ((x582 x865)) Int (ite (and (not x1449) x233) (x701 x582) (x1506 x582)))
(define-fun x574 ((x582 x865)) Int (ite (= x582 (x368 9)) x529 (x499 x582)))
(define-fun x1229 ((x582 Int)) Int (ite (= x582 160) x995 (x729 x582)))
(define-fun x617 ((x582 Int)) Int (ite (= 128 x582) 7 (x1229 x582)))
(define-fun x1058 ((x582 x865)) Int (ite (= x332 x582) x295 (x574 x582)))
(define-fun x909 ((x582 Int)) Int (ite (= 800 x582) x620 (x617 x582)))
(define-fun x1923 ((x582 Int)) Int (ite (= x582 224) x1904 (x909 x582)))
(define-fun x248 ((x582 Int)) Int (ite (= 256 x582) x118 (x1923 x582)))
(define-fun x848 ((x582 Int)) Int (ite (= x582 288) x1215 (x248 x582)))
(define-fun x1458 ((x582 Int)) Int (ite (= x582 384) 4 (x848 x582)))
(define-fun x1395 ((x582 Int)) Int (ite (and (>= x582 480) (< x582 (+ 4 480))) (x453 (+ (- x582 480) 0)) (x1873 x582)))
(define-fun x309 ((x582 Int)) Int (ite (and x1720 x614) (x1395 x582) (x1873 x582)))
(define-fun x1260 ((x582 Int)) Int (ite (= x582 x1815) x1312 (x309 x582)))
(define-fun x1228 ((x582 Int)) Int (ite (= x988 x582) x1321 (x1260 x582)))
(define-fun x1267 ((x582 Int)) Int (ite (and (> (+ 32 608) x582) (<= 608 x582)) (x1683 (+ (- x582 608) 0)) (x200 x582)))
(define-fun x1784 ((x582 Int)) Int (ite (and x1823 x1720) (x1267 x582) (x200 x582)))
(define-fun x1580 ((x582 Int)) Int (ite (and (< x582 (+ x1806 320)) (<= 320 x582)) (x691 (+ 0 (- x582 320))) (x166 x582)))
(define-fun x1373 ((x582 Int)) Int (ite (and x1585 x1720) (x1580 x582) (x166 x582)))
(define-fun x1433 ((x582 Int)) Int (ite (= x582 800) x1171 (x1373 x582)))
(define-fun x810 ((x582 Int)) Int (ite (= 832 x582) x485 (x1433 x582)))
(define-fun x945 ((x582 Int)) Int (ite (= 800 x582) x240 (x810 x582)))
(define-fun x487 ((x582 Int)) Int (x1419 x582))
(define-fun x587 ((x582 Int)) Int (ite (and (> (+ 28 4) x582) (>= x582 28)) (x1419 (+ 0 (- x582 28))) (x409 x582)))
(define-fun x63 ((x582 Int)) Int (ite (= x582 640) x273 (x587 x582)))
(define-fun x1792 ((x582 Int)) Int (ite (= x582 672) x66 (x63 x582)))
(define-fun x1717 ((x582 Int)) Int (ite (= x582 704) 1 (x1792 x582)))
(define-fun x464 ((x582 Int)) Int (ite (= x582 160) x569 (x1193 x582)))
(define-fun x1800 ((x582 Int)) Int (ite (= 128 x582) 7 (x464 x582)))
(define-fun x1125 ((x582 Int)) Int (ite (= 736 x582) x854 (x1800 x582)))
(define-fun x365 ((x582 Int)) Int (ite (and (not x735) x1720) (x1193 x582) (x1125 x582)))
(define-fun x1160 ((x582 Int)) Int (ite (= 160 x582) x569 (x365 x582)))
(define-fun x966 ((x582 Int)) Int (ite (= x582 128) 7 (x1160 x582)))
(define-fun x610 ((x582 Int)) Int (ite (= 800 x582) x708 (x742 x582)))
(define-fun x1135 ((x582 Int)) Int (ite (= x582 224) 1889567281 (x742 x582)))
(define-fun x1613 ((x582 Int)) Int (ite (and (> (+ 32 224) x582) (>= x582 224)) (x1573 (+ 0 (- x582 224))) (x1213 x582)))
(define-fun x585 ((x582 Int)) Int (ite (and x285 x1720 x874) (x1613 x582) (x1213 x582)))
(define-fun x785 ((x582 Int)) Int (ite (= 288 x582) x1575 (x585 x582)))
(define-fun x116 ((x582 Int)) Int (ite (= x582 320) 0 (x1867 x582)))
(define-fun x1722 ((x582 Int)) Int (ite (= x582 256) x1898 (x1867 x582)))
(define-fun x274 ((x582 Int)) Int (ite (= x582 320) x842 (x1722 x582)))
(define-fun x1697 ((x582 Int)) Int (ite (and x285 x1787 x1720) (x274 x582) (x116 x582)))
(define-fun x1371 ((x582 Int)) Int (ite (= 384 x582) x646 (x1697 x582)))
(define-fun x1222 ((x582 Int)) Int (ite (= 800 x582) x1498 (x1371 x582)))
(define-fun x1054 ((x582 Int)) Int (ite (and x1720 (not x285)) (x610 x582) (x1222 x582)))
(define-fun x834 ((x582 Int)) Int (ite (= 768 x582) x202 (x1054 x582)))
(define-fun x1733 ((x582 Int)) Int (ite (= x582 800) 1889567281 (x834 x582)))
(define-fun x3 ((x582 Int)) Int (ite (and (<= 800 x582) (> (+ 32 800) x582)) (x1364 (+ (- x582 800) 0)) (x1204 x582)))
(define-fun x875 ((x582 Int)) Int (ite (= x582 864) 0 (x608 x582)))
(define-fun x1705 ((x582 Int)) Int (ite (= x582 928) 0 (x875 x582)))
(define-fun x1884 ((x582 Int)) Int (ite (= 992 x582) 1889567281 (x204 x582)))
(define-fun x780 ((x582 Int)) Int (ite (and (< x582 (+ 992 32)) (>= x582 992)) (x408 (+ (- x582 992) 0)) (x1144 x582)))
(define-fun x497 ((x582 x865)) Int (ite (and (not x845) x1703) (x1441 x582) (x155 x582)))
(define-fun x1816 ((x582 Int)) Int (ite (and x1316 x1703 x845) (x780 x582) (x1144 x582)))
(define-fun x127 ((x582 Int)) Int (ite (= 992 x582) x1023 (x1053 x582)))
(define-fun x1521 ((x582 Int)) Int (ite (= x582 160) x229 (x127 x582)))
(define-fun x1569 ((x582 Int)) Int (ite (= x582 128) 16 (x1521 x582)))
(define-fun x864 ((x582 Int)) Int (ite (= 1056 x582) 773487949 (x208 x582)))
(define-fun x1781 ((x582 Int)) Int (ite (and (> (+ 32 1056) x582) (<= 1056 x582)) (x1832 (+ 0 (- x582 1056))) (x1903 x582)))
(define-fun x968 ((x582 Int)) Int (ite (and x1872 x1154 x670 x762) (x1781 x582) (x1903 x582)))
(define-fun x251 ((x582 Int)) Int (ite (= x582 1024) x791 (x968 x582)))
(define-fun x288 ((x582 Int)) Int (ite (= x582 1088) 1889567281 (x251 x582)))
(define-fun x1161 ((x582 Int)) Int (ite (and (>= x582 1088) (< x582 (+ 32 1088))) (x315 (+ 0 (- x582 1088))) (x741 x582)))
(define-fun x964 ((x582 Int)) Int (ite (and x670 x626 x1154 x1872) (x1161 x582) (x741 x582)))
(define-fun x731 ((x582 Int)) Int (ite (= 768 x582) x1596 (x480 x582)))
(define-fun x110 ((x582 Int)) Int (ite (= x582 864) x1625 (x731 x582)))
(define-fun x1687 ((x582 Int)) Int (ite (= 224 x582) x1333 (x110 x582)))
(define-fun x1456 ((x582 Int)) Int (ite (= x582 256) x517 (x1687 x582)))
(define-fun x1249 ((x582 Int)) Int (ite (= x582 160) x1878 (x1456 x582)))
(define-fun x1754 ((x582 Int)) Int (ite (= x582 128) 16 (x1249 x582)))
(define-fun x1562 ((x582 Int)) Int (ite (= 160 x582) x876 (x1062 x582)))
(define-fun x644 ((x582 Int)) Int (ite (= 128 x582) 16 (x1562 x582)))
(define-fun x1651 ((x582 Int)) Int (ite (= 160 x582) x797 (x1300 x582)))
(define-fun x413 ((x582 Int)) Int (ite (= 128 x582) 16 (x1651 x582)))
(define-fun x973 ((x582 Int)) Int (ite (and x1484 (not x1599) x1154 x150 x1872 x670) (x1300 x582) (ite (and x1872 x1599 x1154 x150 x670) (x1062 x582) (x413 x582))))
(define-fun x1293 ((x582 Int)) Int (ite (= x582 160) x1893 (x973 x582)))
(define-fun x1025 ((x582 Int)) Int (ite (= 128 x582) 16 (x1293 x582)))
(define-fun x490 ((x582 Int)) Int (ite (= 160 x582) x1377 (x1025 x582)))
(define-fun x526 ((x582 Int)) Int (ite (= x582 128) 16 (x490 x582)))
(define-fun x1763 ((x582 Int)) Int (ite (and (not x150) x1154 x1872 x670) (x480 x582) (x526 x582)))
(define-fun x1825 ((x582 Int)) Int (ite (= 160 x582) x1425 (x1763 x582)))
(define-fun x1330 ((x582 Int)) Int (ite (= x582 128) 16 (x1825 x582)))
(define-fun x963 ((x582 Int)) Int (ite (and x1872 x1154 x670) (x1330 x582) (x208 x582)))
(define-fun x1005 ((x582 x865)) Int (ite (= x1749 x582) x139 (x1802 x582)))
(define-fun x1608 ((x582 x865)) Int (ite (= (x368 39) x582) x333 (x1005 x582)))
(define-fun x1338 ((x582 x865)) Int (ite (and x150 x1872 x1484 (not x1599) x1154 x670) (x1802 x582) (ite (and x1154 x150 x670 x1599 x1872) (x1802 x582) (x1608 x582))))
(define-fun x535 ((x582 x865)) Int (ite (= x317 x582) x75 (x1338 x582)))
(define-fun x858 ((x582 x865)) Int (ite (= x1199 x582) x1760 (x535 x582)))
(define-fun x1274 ((x582 x865)) Int (ite (= (x368 40) x582) x1231 (x858 x582)))
(define-fun x1294 ((x582 x865)) Int (ite (and x1872 (not x150) x1154 x670) (x1802 x582) (x1274 x582)))
(define-fun x1896 ((x582 x865)) Int (ite (= x582 x593) x1381 (x1294 x582)))
(define-fun x796 ((x582 x865)) Int (ite (= (x368 40) x582) x1052 (x1896 x582)))
(define-fun x380 ((x582 x865)) Int (ite (and x1154 x670 x1872) (x796 x582) (x1802 x582)))
(define-fun x186 ((x582 x865)) Int (ite (and x153 x1880) (x380 x582) (ite (and x670 (not x1872)) (x1802 x582) (ite (and x1703 (not x845)) (x1802 x582) (x380 x582)))))
(define-fun x1070 ((x582 Int)) Int (ite (= 896 x582) x1003 (x652 x582)))
(define-fun x1012 ((x582 Int)) Int (ite (and x153 x1880) (x652 x582) (ite (and x670 (not x1872)) (x1053 x582) (ite (and (not x845) x1703) (x204 x582) (x1070 x582)))))
(define-fun x1789 ((x582 Int)) Int (ite (= 928 x582) 1889567281 (x1012 x582)))
(define-fun x1298 ((x582 Int)) Int (ite (and (<= 928 x582) (< x582 (+ 32 928))) (x916 (+ 0 (- x582 928))) (x405 x582)))
(define-fun x801 ((x582 Int)) Int (ite (and x1843 x227) (x1298 x582) (x405 x582)))
(define-fun x1060 ((x582 Int)) Int (ite (= x582 768) x1912 (x1157 x582)))
(define-fun x268 ((x582 Int)) Int (ite (= x582 352) x145 (x1060 x582)))
(define-fun x1055 ((x582 Int)) Int (ite (= 224 x582) 1889567281 (x268 x582)))
(define-fun x394 ((x582 Int)) Int (ite (and (< x582 (+ 224 32)) (<= 224 x582)) (x51 (+ 0 (- x582 224))) (x727 x582)))
(define-fun x1857 ((x582 Int)) Int (ite (and x108 x725 x227) (x394 x582) (x727 x582)))
(define-fun x320 ((x582 Int)) Int (ite (= 288 x582) x1347 (x1857 x582)))
(define-fun x503 ((x582 Int)) Int (ite (= x582 320) 0 (x440 x582)))
(define-fun x319 ((x582 Int)) Int (ite (= x582 256) x908 (x440 x582)))
(define-fun x247 ((x582 Int)) Int (ite (= 320 x582) x1714 (x319 x582)))
(define-fun x148 ((x582 Int)) Int (ite (and x227 x779 x108) (x247 x582) (x503 x582)))
(define-fun x164 ((x582 Int)) Int (ite (= 416 x582) x1310 (x148 x582)))
(define-fun x967 ((x582 Int)) Int (ite (= 928 x582) 0 (x1299 x582)))
(define-fun x1906 ((x582 Int)) Int (ite (= x582 928) x1852 (x1299 x582)))
(define-fun x583 ((x582 Int)) Int (ite (and x108 x227 x726) (x1906 x582) (x967 x582)))
(define-fun x1636 ((x582 Int)) Int (ite (= 736 x582) x1464 (x583 x582)))
(define-fun x944 ((x582 Int)) Int (ite (and (not x108) x227) (x1157 x582) (x1636 x582)))
(define-fun x1778 ((x582 Int)) Int (ite (and x1711 (not x1342)) (x608 x582) (x944 x582)))
(define-fun x1348 ((x582 x865)) Int (ite (and (not x1342) x1711) (x1441 x582) (ite (and x153 x1880) (x155 x582) (ite (and x670 (not x1872)) (x1441 x582) (x497 x582)))))
(define-fun x1645 ((x582 x865)) Int (ite (and (not x1342) x1711) (x1802 x582) (x186 x582)))
(define-fun x385 ((x582 x865)) Int (ite (= x582 (x368 9)) x1051 (x1645 x582)))
(define-fun x699 ((x582 Int)) Int (ite (= 160 x582) x569 (x1778 x582)))
(define-fun x1895 ((x582 Int)) Int (ite (= x582 128) 7 (x699 x582)))
(define-fun x1740 ((x582 x865)) Int (ite (= x582 x1196) x1050 (x385 x582)))
(define-fun x1752 ((x582 Int)) Int (ite (= x582 800) x396 (x1895 x582)))
(define-fun x983 ((x582 Int)) Int (ite (= x582 224) x1509 (x1752 x582)))
(define-fun x360 ((x582 Int)) Int (ite (= x582 256) x88 (x983 x582)))
(define-fun x809 ((x582 Int)) Int (ite (= x582 288) x297 (x360 x582)))
(define-fun x806 ((x582 Int)) Int (ite (= x582 384) 4 (x809 x582)))
(define-fun x1450 ((x582 Int)) Int (ite (and (>= x582 480) (< x582 (+ 480 4))) (x1227 (+ 0 (- x582 480))) (x1010 x582)))
(define-fun x345 ((x582 Int)) Int (ite (and x1582 x275) (x1450 x582) (x1010 x582)))
(define-fun x215 ((x582 Int)) Int (ite (= x1353 x582) x142 (x345 x582)))
(define-fun x1230 ((x582 Int)) Int (ite (= x70 x582) x576 (x215 x582)))
(define-fun x649 ((x582 Int)) Int (ite (and (<= 608 x582) (> (+ 32 608) x582)) (x467 (+ (- x582 608) 0)) (x312 x582)))
(define-fun x283 ((x582 Int)) Int (ite (and x1582 x434) (x649 x582) (x312 x582)))
(define-fun x1165 ((x582 Int)) Int (ite (and (< x582 (+ x558 320)) (<= 320 x582)) (x1810 (+ 0 (- x582 320))) (x1183 x582)))
(define-fun x502 ((x582 Int)) Int (ite (and x679 x1582) (x1165 x582) (x1183 x582)))
(define-fun x609 ((x582 Int)) Int (ite (= 800 x582) x1721 (x502 x582)))
(define-fun x840 ((x582 Int)) Int (ite (= x582 832) x1097 (x609 x582)))
(define-fun x151 ((x582 Int)) Int (ite (= x582 800) x1421 (x840 x582)))
(define-fun x1254 ((x582 x865)) Int (ite (= x582 (x368 0)) 0 (x1740 x582)))
(define-fun x4 ((x582 Int)) Int (x634 x582))
(define-fun x48 ((x582 Int)) Int (ite (and (>= x582 28) (< x582 (+ 28 4))) (x634 (+ 0 (- x582 28))) (x1659 x582)))
(define-fun x1530 ((x582 Int)) Int (ite (= 640 x582) x962 (x48 x582)))
(define-fun x1723 ((x582 Int)) Int (ite (= 672 x582) x1728 (x1530 x582)))
(define-fun x21 ((x582 Int)) Int (ite (= 704 x582) 1 (x1723 x582)))
(define-fun x1013 ((x582 Int)) Int (ite (= 160 x582) x995 (x903 x582)))
(define-fun x302 ((x582 Int)) Int (ite (= x582 128) 7 (x1013 x582)))
(define-fun x1483 ((x582 Int)) Int (ite (= 736 x582) x163 (x302 x582)))
(define-fun x1710 ((x582 Int)) Int (ite (and x401 (not x1379) (not x1195)) (x903 x582) (x1483 x582)))
(define-fun x630 ((x582 Int)) Int (ite (= 160 x582) x995 (x1710 x582)))
(define-fun x777 ((x582 Int)) Int (ite (= 128 x582) 7 (x630 x582)))
(define-fun x1162 ((x582 Int)) Int (ite (= 800 x582) x465 (x651 x582)))
(define-fun x1275 ((x582 Int)) Int (ite (= x582 224) 1889567281 (x651 x582)))
(define-fun x243 ((x582 Int)) Int (ite (and (< x582 (+ 32 224)) (<= 224 x582)) (x1290 (+ 0 (- x582 224))) (x1738 x582)))
(define-fun x370 ((x582 Int)) Int (ite (and x906 x201 x814) (x243 x582) (x1738 x582)))
(define-fun x280 ((x582 Int)) Int (ite (= 288 x582) x363 (x370 x582)))
(define-fun x1409 ((x582 Int)) Int (ite (= x582 256) x669 (x386 x582)))
(define-fun x1894 ((x582 Int)) Int (ite (= x582 320) x743 (x1409 x582)))
(define-fun x1570 ((x582 Int)) Int (ite (= x582 320) 0 (x386 x582)))
(define-fun x1186 ((x582 Int)) Int (ite (and (not x1209) x1724) (x1894 x582) (x1570 x582)))
(define-fun x374 ((x582 Int)) Int (ite (= 384 x582) x1169 (x1186 x582)))
(define-fun x117 ((x582 Int)) Int (ite (= x582 800) x1138 (x374 x582)))
(define-fun x111 ((x582 Int)) Int (ite (and (not x923) x143) (x117 x582) (x1162 x582)))
(define-fun x1473 ((x582 Int)) Int (ite (= 768 x582) x837 (x111 x582)))
(define-fun x1335 ((x582 Int)) Int (ite (= 800 x582) 1889567281 (x1473 x582)))
(define-fun x355 ((x582 Int)) Int (ite (and (>= x582 800) (> (+ 800 32) x582)) (x1277 (+ (- x582 800) 0)) (x934 x582)))
(define-fun x1616 ((x582 Int)) Int (ite (= 864 x582) 0 (x1591 x582)))
(define-fun x1142 ((x582 Int)) Int (ite (= 928 x582) 0 (x1616 x582)))
(define-fun x1360 ((x582 Int)) Int (ite (= 992 x582) 1889567281 (x1329 x582)))
(define-fun x1417 ((x582 Int)) Int (ite (and (< x582 (+ 32 992)) (>= x582 992)) (x1926 (+ 0 (- x582 992))) (x357 x582)))
(define-fun x1064 ((x582 x865)) Int (ite (and (not x158) x147) (x1680 x582) (x1907 x582)))
(define-fun x1594 ((x582 Int)) Int (ite (and x714 x158 x147) (x1417 x582) (x357 x582)))
(define-fun x1830 ((x582 Int)) Int (ite (= x582 992) x1730 (x794 x582)))
(define-fun x513 ((x582 Int)) Int (ite (= 160 x582) x339 (x1830 x582)))
(define-fun x959 ((x582 Int)) Int (ite (= x582 128) 16 (x513 x582)))
(define-fun x682 ((x582 Int)) Int (ite (= x582 1056) 773487949 (x1845 x582)))
(define-fun x1534 ((x582 Int)) Int (ite (and (<= 1056 x582) (< x582 (+ 1056 32))) (x225 (+ 0 (- x582 1056))) (x835 x582)))
(define-fun x141 ((x582 Int)) Int (ite (and x1606 x1735 x892) (x1534 x582) (x835 x582)))
(define-fun x1009 ((x582 Int)) Int (ite (= 1024 x582) x1476 (x141 x582)))
(define-fun x941 ((x582 Int)) Int (ite (= 1088 x582) 1889567281 (x1009 x582)))
(define-fun x1803 ((x582 Int)) Int (ite (and (<= 1088 x582) (< x582 (+ 32 1088))) (x658 (+ (- x582 1088) 0)) (x303 x582)))
(define-fun x473 ((x582 Int)) Int (ite (and x519 x1632 x685) (x1803 x582) (x303 x582)))
(define-fun x1319 ((x582 Int)) Int (ite (= 768 x582) x510 (x293 x582)))
(define-fun x49 ((x582 Int)) Int (ite (= x582 864) x1808 (x1319 x582)))
(define-fun x1869 ((x582 Int)) Int (ite (= 224 x582) x1436 (x49 x582)))
(define-fun x885 ((x582 Int)) Int (ite (= 256 x582) x1197 (x1869 x582)))
(define-fun x314 ((x582 Int)) Int (ite (= x582 160) x249 (x885 x582)))
(define-fun x572 ((x582 Int)) Int (ite (= x582 128) 16 (x314 x582)))
(define-fun x631 ((x582 x865)) Int (ite (= x582 x1281) x1913 (x1692 x582)))
(define-fun x391 ((x582 x865)) Int (ite (= x582 (x368 39)) x604 (x631 x582)))
(define-fun x1837 ((x582 x865)) Int (ite (and x1590 x1454) (x1692 x582) (ite (and x1671 x653) (x1692 x582) (x391 x582))))
(define-fun x348 ((x582 x865)) Int (ite (= x582 x571) x43 (x1837 x582)))
(define-fun x1818 ((x582 x865)) Int (ite (= x582 x1902) x1159 (x348 x582)))
(define-fun x1357 ((x582 x865)) Int (ite (= (x368 40) x582) x1200 (x1818 x582)))
(define-fun x1567 ((x582 x865)) Int (ite (and x1537 (not x125)) (x1692 x582) (x1357 x582)))
(define-fun x1897 ((x582 Int)) Int (ite (= x582 160) x659 (x218 x582)))
(define-fun x1899 ((x582 Int)) Int (ite (= 128 x582) 16 (x1897 x582)))
(define-fun x47 ((x582 Int)) Int (ite (= 160 x582) x759 (x1336 x582)))
(define-fun x114 ((x582 Int)) Int (ite (= x582 128) 16 (x47 x582)))
(define-fun x1605 ((x582 Int)) Int (ite (and x1454 x1590) (x1336 x582) (ite (and x653 x1671) (x218 x582) (x114 x582))))
(define-fun x1609 ((x582 Int)) Int (ite (= x582 160) x402 (x1605 x582)))
(define-fun x353 ((x582 Int)) Int (ite (= x582 128) 16 (x1609 x582)))
(define-fun x441 ((x582 Int)) Int (ite (= x582 160) x1929 (x353 x582)))
(define-fun x748 ((x582 Int)) Int (ite (= 128 x582) 16 (x441 x582)))
(define-fun x179 ((x582 Int)) Int (ite (and (not x125) x1537) (x293 x582) (x748 x582)))
(define-fun x674 ((x582 Int)) Int (ite (= x582 160) x207 (x179 x582)))
(define-fun x97 ((x582 Int)) Int (ite (= 128 x582) 16 (x674 x582)))
(define-fun x1410 ((x582 x865)) Int (ite (= x1862 x582) x1235 (x1567 x582)))
(define-fun x1211 ((x582 x865)) Int (ite (= x582 (x368 40)) x483 (x1410 x582)))
(define-fun x592 ((x582 x865)) Int (ite (and x1615 (not x1858)) (x1211 x582) (x1692 x582)))
(define-fun x269 ((x582 Int)) Int (ite (and (not x1858) x1615) (x97 x582) (x1845 x582)))
(define-fun x131 ((x582 x865)) Int (ite (and x855 x1470) (x592 x582) (ite (and (not x1403) x976) (x1692 x582) (ite (and (not x158) x147) (x1692 x582) (x592 x582)))))
(define-fun x412 ((x582 Int)) Int (ite (= x582 896) x804 (x786 x582)))
(define-fun x212 ((x582 Int)) Int (ite (and x855 x1470) (x786 x582) (ite (and (not x1403) x976) (x794 x582) (ite (and x147 (not x158)) (x1329 x582) (x412 x582)))))
(define-fun x1531 ((x582 Int)) Int (ite (= 928 x582) 1889567281 (x212 x582)))
(define-fun x912 ((x582 Int)) Int (ite (and (< x582 (+ 928 32)) (>= x582 928)) (x1610 (+ (- x582 928) 0)) (x1539 x582)))
(define-fun x1564 ((x582 Int)) Int (ite (and x1638 x1699) (x912 x582) (x1539 x582)))
(define-fun x1035 ((x582 Int)) Int (ite (= 768 x582) x1469 (x128 x582)))
(define-fun x1325 ((x582 Int)) Int (ite (= 352 x582) x1617 (x1035 x582)))
(define-fun x867 ((x582 Int)) Int (ite (= x582 224) 1889567281 (x1325 x582)))
(define-fun x112 ((x582 Int)) Int (ite (and (<= 224 x582) (< x582 (+ 224 32))) (x1034 (+ (- x582 224) 0)) (x1239 x582)))
(define-fun x1247 ((x582 Int)) Int (ite (and x878 (not x671) x219) (x112 x582) (x1239 x582)))
(define-fun x1083 ((x582 Int)) Int (ite (= 288 x582) x1681 (x1247 x582)))
(define-fun x1104 ((x582 Int)) Int (ite (= x582 256) x230 (x757 x582)))
(define-fun x326 ((x582 Int)) Int (ite (= 320 x582) x540 (x1104 x582)))
(define-fun x82 ((x582 Int)) Int (ite (= 320 x582) 0 (x757 x582)))
(define-fun x1116 ((x582 Int)) Int (ite (and (not x1766) x1769) (x326 x582) (x82 x582)))
(define-fun x1877 ((x582 Int)) Int (ite (= 416 x582) x1026 (x1116 x582)))
(define-fun x1622 ((x582 Int)) Int (ite (= 928 x582) x1262 (x624 x582)))
(define-fun x597 ((x582 Int)) Int (ite (= 928 x582) 0 (x624 x582)))
(define-fun x206 ((x582 Int)) Int (ite (and (not x686) x377) (x1622 x582) (x597 x582)))
(define-fun x1546 ((x582 Int)) Int (ite (= x582 736) x560 (x206 x582)))
(define-fun x1029 ((x582 Int)) Int (ite (and (not x1341) x450) (x1546 x582) (x128 x582)))
(define-fun x778 ((x582 x865)) Int (ite (and (not x625) x281) (x131 x582) (x1692 x582)))
(define-fun x901 ((x582 Int)) Int (ite (and (not x625) x281) (x1029 x582) (x1591 x582)))
(define-fun x648 ((x582 x865)) Int (ite (and (not x625) x281) (ite (and x855 x1470) (x1907 x582) (ite (and x976 (not x1403)) (x1680 x582) (x1064 x582))) (x1680 x582)))
(define-fun x657 ((x582 x865)) Int (ite (= (x368 9) x582) x1748 (x778 x582)))
(define-fun x603 ((x582 Int)) Int (ite (= 160 x582) x995 (x901 x582)))
(define-fun x661 ((x582 Int)) Int (ite (= 128 x582) 7 (x603 x582)))
(define-fun x1875 ((x582 x865)) Int (ite (= x582 x197) x1486 (x657 x582)))
(define-fun x209 ((x582 Int)) Int (ite (= x582 800) x451 (x661 x582)))
(define-fun x862 ((x582 Int)) Int (ite (= x582 224) x26 (x209 x582)))
(define-fun x1871 ((x582 Int)) Int (ite (= x582 256) x1690 (x862 x582)))
(define-fun x755 ((x582 Int)) Int (ite (= 288 x582) x802 (x1871 x582)))
(define-fun x1311 ((x582 Int)) Int (ite (= 384 x582) 4 (x755 x582)))
(define-fun x1669 ((x582 Int)) Int (ite (and (> (+ 480 4) x582) (>= x582 480)) (x853 (+ 0 (- x582 480))) (x1280 x582)))
(define-fun x636 ((x582 Int)) Int (ite (and x379 x884 (not x767)) (x1669 x582) (x1280 x582)))
(define-fun x1223 ((x582 Int)) Int (ite (= x582 x1917) x1317 (x636 x582)))
(define-fun x2 ((x582 Int)) Int (ite (= x985 x582) x703 (x1223 x582)))
(define-fun x1561 ((x582 Int)) Int (ite (and (> (+ 608 32) x582) (<= 608 x582)) (x1790 (+ 0 (- x582 608))) (x533 x582)))
(define-fun x1553 ((x582 Int)) Int (ite (and x884 (not x767) x1201) (x1561 x582) (x533 x582)))
(define-fun x805 ((x582 Int)) Int (ite (and (< x582 (+ x633 320)) (<= 320 x582)) (x905 (+ 0 (- x582 320))) (x696 x582)))
(define-fun x1686 ((x582 Int)) Int (ite (and x71 x1628 x935) (x805 x582) (x696 x582)))
(define-fun x1526 ((x582 Int)) Int (ite (= 800 x582) x271 (x1686 x582)))
(define-fun x925 ((x582 Int)) Int (ite (= 832 x582) x1649 (x1526 x582)))
(define-fun x1339 ((x582 Int)) Int (ite (= x582 800) x635 (x925 x582)))
(define-fun x1124 ((x395 Int)) Bool (=> (and (not (= 3567397854 x395)) (not (= 4294967296 x395)) (not (= x395 2316151882)) (not (= 348537858 x395)) (not (= 3963136098 x395)) (not (= 2484372501 x395)) (not (= x395 31576340)) (not (= x395 1977493762)) (not (= 3296657447 x395)) (not (= x395 961581905)) (< 10000 x395) (not (= 1851080549 x395)) (not (= 2681579215 x395)) (not (= x395 629314576)) (not (= x395 1461501637330902918203684832716283019655932542975)) (not (= 596573372 x395)) (not (= 599290589 x395)) (not (= 157198259 x395)) (not (= 1401663147 x395)) (not (= x395 16192718)) (not (= x395 2757214935)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x395)) (not (= x395 3065339685)) (not (= x395 2052391781)) (not (= 3504541104 x395)) (not (= x395 3184006219)) (not (= 274184521717934524641157099916833587200 x395)) (not (= x395 2209625481)) (not (= x395 773487949)) (not (= 3092021830 x395)) (not (= 1888058147 x395)) (not (= x395 2835717307)) (not (= x395 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x395 2780307423)) (not (= 1889567281 x395)) (not (= 1000000000000000000 x395)) (not (= x395 464926286)) (not (= 1020253707 x395)) (not (= 2869116585 x395)) (not (= 4267106866 x395))) (not ((_ is x368) (x1074 x395)))))
(assert (= (x288 320) (x741 320)))
(assert (= x723 (and x398 x115)))
(assert (= (x533 768) (x2 768)))
(assert (x489 x1780))
(assert (= (x1181 640) (ite (and x1519 x702) (x205 640) (x763 640))))
(assert (= (ite (= x924 (x368 0)) 1 (x628 x924)) (x701 x924)))
(assert (=> (<= (x617 160) 10000) (= (x368 (x617 160)) (x1074 (x617 160)))))
(assert (= (x835 960) (x682 960)))
(assert (= (x1299 384) x1324))
(assert (= (ite (= (x1074 x62) (x368 0)) 1 (x1254 (x1074 x62))) (x1692 (x1074 x62))))
(assert (x489 x1226))
(assert (x489 x101))
(assert (x489 x504))
(assert (= (=> (and (= x1682 (x631 (x368 39))) (= x605 (< x1682 x1821)) (= (x114 320) x1821) (= (x521 (- x1383 x264)) x1913)) (and (=> x605 x896) (=> (and (not x605) (= x604 (x521 (- x1682 x1821)))) x1320))) x1359))
(assert (= (x794 320) (x1594 320)))
(assert (= (x1135 736) (x1213 736)))
(assert (= x836 (and x158 x147)))
(assert (= (x1517 (x276 x776 6)) (+ 6 (x1517 x776))))
(assert (x489 x422))
(assert (= (x480 736) (x964 736)))
(assert (x489 x1457))
(assert (x1124 x190))
(assert (x489 x1169))
(assert (x489 x14))
(assert (x489 x1238))
(assert (= (x763 320) (x346 320)))
(assert (= (x191 672) (x160 672)))
(assert (x489 x1155))
(assert (x489 x1654))
(assert (x489 x1846))
(assert (x489 x1191))
(assert (= (=> (and (= x922 (mod (* x235 x362) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1838 (or x1037 x598)) (= x235 (x1804 (+ x1068 x193))) (= (= 0 (ite x1838 1 0)) x1217) (= x732 (div x922 x362)) (= (= x235 x732) x598) (= x1037 (= x362 0))) (and (=> x1217 x896) (=> (not x1217) x1028))) x1888))
(assert (x489 x252))
(assert (x489 x286))
(assert (x489 x1577))
(assert (x489 x1232))
(assert (= (x608 768) (ite (and x38 x1720) (x3 768) (x1204 768))))
(assert (= (x1127 672) (x639 672)))
(assert (= x6 x54))
(assert (x489 x1156))
(assert (= x868 (=> (and (or (and (= x1707 x998) (not x1699)) (and (> 4294967296 x1156) x1699 (= x1707 1))) (= (< 0 x998) x1699)) x12)))
(assert (= (x786 736) (x269 736)))
(assert (= (x757 704) (x1083 704)))
(assert (x489 x832))
(assert (= (=> (and (= x803 (x1804 (+ x389 x1020))) (= x177 (< x803 x1020)) (= (x353 256) x389) (= x1020 (x1837 x571)) (= (x1605 224) x402) (= (x1141 (x1074 (x353 128)) (x1074 (x353 160)) 0) x915) (= x571 (x276 x915 8))) (and (=> (not x177) x367) (=> x177 x896))) x1320))
(assert (= (x777 320) (x651 320)))
(assert (= x1732 x359))
(assert (x1124 (x353 160)))
(assert (= x536 (=> (and (= (x1567 x1862) x1103) (= x286 (x97 1056)) (= (< x1103 x286) x1868) (= x1862 (x276 x1572 6)) (= (x1141 (x1074 (x97 128)) (x1074 (x97 160)) 0) x1572) (= x207 (x179 896))) (and (=> (not x1868) x93) (=> x1868 x896)))))
(assert (x489 x1407))
(assert (= (x1517 (x1074 (x1899 160))) (x1899 160)))
(assert (= x1071 (and x1885 x1444)))
(assert (= (x639 704) (x1127 704)))
(assert (= (=> (and (= (x1029 864) x193) (= (< x681 x1068) x459) (= (x1804 (+ x193 x1068)) x681) (= x362 (x1029 704)) (= (x1029 768) x1068)) (and (=> x459 x896) (=> (not x459) x1888))) x1309))
(assert (x489 x1244))
(assert (x489 x1130))
(assert (= x24 (x1062 288)))
(assert (= (x1119 768) (x1102 768)))
(assert (= (x1102 320) (x1119 320)))
(assert (= (x624 320) (x1877 320)))
(assert (x489 x510))
(assert (x489 x1105))
(assert (x489 x1821))
(assert (x489 x94))
(assert (x489 x234))
(assert (x489 x39))
(assert (x489 x877))
(assert (x489 x1698))
(assert (=> (>= 10000 (x1569 128)) (= (x1074 (x1569 128)) (x368 (x1569 128)))))
(assert (x489 x1925))
(assert (= (ite (and x1755 x6) (x355 768) (x934 768)) (x1591 768)))
(assert (x1124 x106))
(assert (= (x1594 768) (x794 768)))
(assert (= 2869116585 (x1517 (x368 2869116585))))
(assert (x489 x1476))
(assert (x489 x766))
(assert (= (=> (and (= x855 (= 20 x1508)) (= x87 (x269 928)) (= (x1804 (+ 1 x87)) x1508)) (and (=> (not x855) x952) (=> x855 x868))) x1372))
(assert (x489 x1892))
(assert (x489 x145))
(assert (x489 x36))
(assert (= (x941 960) (x303 960)))
(assert (x489 x654))
(assert (= x466 (and x72 (not x951))))
(assert (x489 x1542))
(assert (= (x166 352) (x1784 352)))
(assert (= (x1119 864) (x1102 864)))
(assert (x1124 (x1931 128)))
(assert (x489 x897))
(assert (= (x1517 (x368 3963136098)) 3963136098))
(assert (= (x617 128) (x1517 (x1074 (x617 128)))))
(assert (=> (<= (x661 160) 10000) (= (x368 (x661 160)) (x1074 (x661 160)))))
(assert (x489 x1854))
(assert (x489 x1398))
(assert (= (x1204 704) (x1733 704)))
(assert (= x1771 (and (not x1855) x928)))
(assert (x489 x445))
(assert (= (and x1007 x458) x1234))
(assert (x489 x1101))
(assert (= (+ 8 (x1517 x915)) (x1517 (x276 x915 8))))
(assert (= (x1754 864) (x1062 864)))
(assert (x489 x43))
(assert (= (x1517 (x1074 (x1800 128))) (x1800 128)))
(assert (= (x1802 x180) (ite (= (x368 0) x180) 1 (x628 x180))))
(assert (= (x1814 928) (x138 928)))
(assert (x489 x559))
(assert (= (x1336 768) (x1899 768)))
(assert (= (x949 704) (x1706 704)))
(assert (x489 x547))
(assert (= (x1074 3567397854) (x368 3567397854)))
(assert (= (x1754 640) (x1062 640)))
(assert (x489 x1352))
(assert (x489 x1245))
(assert (= (x218 928) (x572 928)))
(assert (x489 x246))
(assert (=> (<= (x1899 160) 10000) (= (x368 (x1899 160)) (x1074 (x1899 160)))))
(assert (x489 x1690))
(assert (= (x1754 352) (x1062 352)))
(assert (= (x1286 256) (x1831 256)))
(assert (x489 x738))
(assert (x489 x242))
(assert (= (and x126 (not x955)) x1036))
(assert (= (x964 704) (x480 704)))
(assert (x489 x1369))
(assert (x489 x325))
(assert (x489 x744))
(assert (= (x1594 640) (x794 640)))
(assert (= (x1102 928) (x1119 928)))
(assert (= (+ (x1517 x1571) 6) (x1517 (x276 x1571 6))))
(assert (= (x1349 864) (x1118 864)))
(assert (= (+ 6 (x1517 x442)) (x1517 (x276 x442 6))))
(assert (= (x777 128) (x1517 (x1074 (x777 128)))))
(assert (= (and x435 (not x1927)) x650))
(assert (x489 x273))
(assert (= (x1517 (x1074 (x1931 128))) (x1931 128)))
(assert (x489 x1715))
(assert (x489 x1059))
(assert (x489 x1751))
(assert (x489 x1126))
(assert (= x856 (=> (and (= (x777 736) x1084) (= x375 (> x1084 0))) (and (=> x375 x16) (=> (not x375) x896)))))
(assert (= (x1666 864) (x253 864)))
(assert (= (x572 256) (x218 256)))
(assert (= x1404 (x253 896)))
(assert (= (x1336 256) (x1899 256)))
(assert (= (x1119 704) (x1102 704)))
(assert (= x1489 (=> (and (= x671 (< x1672 x1094)) (= x859 (x1035 864)) (= x1094 (x1035 768)) (= (x1804 (+ x859 x1094)) x1672) (= (x128 896) x1469)) (and (=> x671 x896) (=> (and (= (< 0 x1646) x878) (or (and (= x278 x1646) (not x878)) (and (> 4294967296 x1805) x878 (= 1 x278))) (not x671) (= x1617 (x1804 (+ x1094 x859)))) x789)))))
(assert (= (x652 704) (x963 704)))
(assert (x489 x620))
(assert (=> (<= (x37 128) 10000) (= (x368 (x37 128)) (x1074 (x37 128)))))
(assert (x489 x1327))
(assert (x489 x7))
(assert (= (x1517 (x368 1401663147)) 1401663147))
(assert (= (x164 704) (x1299 704)))
(assert (= (+ (x1517 x1461) 8) (x1517 (x276 x1461 8))))
(assert (= x190 (x1517 (x1074 x190))))
(assert (x489 x168))
(assert (= (x682 896) (x835 896)))
(assert (x489 x362))
(assert (x489 x1428))
(assert (x489 x1721))
(assert (= (x253 640) (x1666 640)))
(assert (= x1028 (=> (and (= (< x27 x1592) x625) (= x27 (div x922 10000)) (= x1592 (x1029 864))) (and (=> x625 x896) (=> (not x625) x119)))))
(assert (x1124 (x1330 160)))
(assert (= (and x728 x1263) x219))
(assert (x489 x788))
(assert (= (or (and (not x935) x1628) (and x1202 x1303) (and x437 x974) (and x104 x1147) (and x861 (not x84)) (and x1927 x435) (and x549 (not x960)) (and x1056 x839) (and x1632 (not x519)) (and (not x1574) x551) (and x1779 x459) (and x74 (not x310)) (and x1145 x707) (and (not x1248) x836) (and (not x1210) x723) (and x767 x884) (and x955 x126) (and x1468 x889) (and x1152 x697) (and x470 x756) (and x401 x1195) (and x1724 x1209) (and x800 x1282) (and x1466 x46) (and x532 x991) (and x1190 x1771) (and x331 x1071) (and x1216 x1502) (and x1855 x928) (and x733 x1036) (and x468 x351) (and x226 (not x311)) (and x1212 (not x734)) (and x135 x1077) (and x1253 x936) (and x281 x625) (and x671 x219) (and x1652 x1868) (and x458 (not x1007)) (and x177 x236) (and x1713 x1834) (and (not x1665) x45) (and (not x790) x54) (and x1122 (not x1765)) (and x121 x1467) (and x910 (not x375)) (and x1529 (not x1376)) (and x828 (not x1111)) (and x650 x1024) (and x1766 x1769) (and x1615 x1858) (and x450 x1341) (and x214 x1081) (and x621 x605) (and x1217 x189) (and x377 x686) (and x170 x672) (and x606 x420) (and x923 x143)) x1744))
(assert (= (x1286 128) (x1517 (x1074 (x1286 128)))))
(assert (= (x1517 (x1074 (x1899 128))) (x1899 128)))
(assert (x489 x1748))
(assert (= (x1517 (x276 x154 6)) (+ (x1517 x154) 6)))
(assert (=> (<= (x777 160) 10000) (= (x368 (x777 160)) (x1074 (x777 160)))))
(assert (= x222 (x1517 (x1074 x222))))
(assert (=> (>= 10000 (x373 160)) (= (x1074 (x373 160)) (x368 (x373 160)))))
(assert (= x1468 (and x839 (not x1056))))
(assert (x489 x971))
(assert (= (x1183 736) (x283 736)))
(assert (= (x941 864) (x303 864)))
(assert (x489 x1500))
(assert (x1124 (x97 128)))
(assert (= (x1705 928) (x204 928)))
(assert (= x977 (=> (and (= x881 (not (> x1413 0))) (= (x1070 896) x1413) (= (x1804 (+ x1061 17)) x1033) (= x1061 (x652 928)) (= (x380 (x1074 x1033)) x1003)) (and x666 x881))))
(assert (x489 x369))
(assert (x489 x294))
(assert (= (x1311 320) (x1280 320)))
(assert (= (x1157 704) (x801 704)))
(assert (x489 x695))
(assert (x489 x1404))
(assert (x489 x684))
(assert (x489 x350))
(assert (x489 x1143))
(assert (= (x1903 640) (x864 640)))
(assert (= (x1569 864) (x208 864)))
(assert (= x910 (and x1216 (not x1502))))
(assert (x1124 (x777 128)))
(assert (x489 x1623))
(assert (x489 x40))
(assert (x489 x1809))
(assert (= (=> (= (> x56 31) x519) (and (=> (not x519) x896) (=> (and x519 (or (and (not x685) (= x1307 x965)) (and (> 4294967296 x511) x685 (= x965 1))) (= (> x1307 0) x685) (= (x141 1056) x1476)) x957))) x307))
(assert (= (x1692 (x368 10)) (ite (= (x368 10) (x368 0)) 1 (x1254 (x368 10)))))
(assert (x489 x1479))
(assert (= (x1349 768) (x1118 768)))
(assert (= (x1569 704) (x208 704)))
(assert (x1124 (x413 160)))
(assert (x1124 (x1330 128)))
(assert (x1124 (x526 160)))
(assert (= (ite (= (x368 0) x197) 1 (x1254 x197)) (x1692 x197)))
(assert (= x62 (x1517 (x1074 x62))))
(assert (= (x160 704) (x191 704)))
(assert (= (x368 4294967296) (x1074 4294967296)))
(assert (= (ite (= (x368 9) (x368 0)) 1 (x1254 (x368 9))) (x1692 (x368 9))))
(assert (x489 x1057))
(assert (= (x1517 (x368 157198259)) 157198259))
(assert (x489 x1355))
(assert (= x1891 (x1517 (x1074 x1891))))
(assert (= (and (not x653) x1671) x1303))
(assert (x489 x295))
(assert (x489 x822))
(assert (= (x1705 640) (x204 640)))
(assert (= (x1067 320) (x1640 320)))
(assert (x489 x80))
(assert (= (x1543 x1490 160) (div x1490 1461501637330902918203684832716283019655932542976)))
(assert (= (x368 3065339685) (x1074 3065339685)))
(assert (= (x138 224) (x1814 224)))
(assert (x489 x30))
(assert (x489 x1381))
(assert (x489 x1038))
(assert (x489 x890))
(assert (=> (<= (x698 128) 10000) (= (x368 (x698 128)) (x1074 (x698 128)))))
(assert (= x182 (=> (= (> x183 31) x1007) (and (=> x1007 x1667) (=> (not x1007) x896)))))
(assert (x489 x1544))
(assert (x489 x918))
(assert (x489 x761))
(assert (x489 x1879))
(assert (x489 x1826))
(assert (= (x652 736) (x963 736)))
(assert (x489 x1262))
(assert (= (ite (= (x368 0) (x368 43)) 1 (x1254 (x368 43))) (x1692 (x368 43))))
(assert (= 1889567281 (x1517 (x368 1889567281))))
(assert (x489 x1663))
(assert (x1124 (x1895 128)))
(assert (= x690 (and (not x1190) x1771)))
(assert (x1124 x1033))
(assert (= (x1360 864) (x357 864)))
(assert (x489 x495))
(assert (=> (>= 10000 (x1286 160)) (= (x368 (x1286 160)) (x1074 (x1286 160)))))
(assert (= (x253 352) (x1666 352)))
(assert (x489 x1841))
(assert (= x1107 (=> (= (< 31 x1156) x1765) (and (=> (not x1765) x896) (=> x1765 x718)))))
(assert (= x602 (=> (and (not (= 3296657447 x254)) (not (= 2757214935 x254)) (not (= x254 596573372)) (not (= x254 2316151882)) (= x1728 x1438) (not (= x254 599290589)) (not (= x254 1888058147)) (not (= x254 2052391781)) (not (= 629314576 x254)) (not (= 348537858 x254)) (not (= 961581905 x254)) (not (= x254 2484372501)) (not (= 2835717307 x254)) (not (= 1977493762 x254)) (not (= x254 464926286)) (not (= x254 3065339685)) (not (= 3092021830 x254)) (not (= 3567397854 x254)) (not (= 2869116585 x254)) (not (= 3963136098 x254)) (= 16192718 x254) (not (= x254 3504541104)) (not (= 2209625481 x254)) (not (= 773487949 x254)) (not (= 3184006219 x254)) (not (= 4267106866 x254)) (not (= 157198259 x254)) (= x889 (< 0 (x1543 x1438 160))) (not (= x254 2780307423)) (not (= x254 31576340)) (not (= 1020253707 x254)) (not (= 1401663147 x254)) (not (= x254 2681579215)) (not (= 1851080549 x254))) (and (=> (not x889) x1039) (=> x889 x896)))))
(assert (x489 x555))
(assert (= (x97 160) (x1517 (x1074 (x97 160)))))
(assert (x489 x1350))
(assert (= x1216 (and (not x1195) x401)))
(assert (= (x1286 160) (x1517 (x1074 (x1286 160)))))
(assert (=> (>= 10000 x1879) (= (x368 x1879) (x1074 x1879))))
(assert (x489 x793))
(assert (= (x1733 736) (x1204 736)))
(assert (= (x302 128) (x1517 (x1074 (x302 128)))))
(assert (x489 x1736))
(assert (x489 x433))
(assert (x489 x1366))
(assert (x489 x392))
(assert (x1124 x509))
(assert (= (x312 320) (x1230 320)))
(assert (=> (<= (x1754 128) 10000) (= (x1074 (x1754 128)) (x368 (x1754 128)))))
(assert (= (x1300 640) (x644 640)))
(assert (x489 x1434))
(assert (= (x1816 320) (x1053 320)))
(assert (x489 x1224))
(assert (x489 x1158))
(assert (= (x572 704) (x218 704)))
(assert (x489 x1084))
(assert (= (x1517 (x276 x343 2)) (+ 2 (x1517 x343))))
(assert (x489 x1259))
(assert (x1124 (x1800 128)))
(assert (x489 x1334))
(assert (= (x1336 352) (x1899 352)))
(assert (x489 x1743))
(assert (= x305 (x138 320)))
(assert (x489 x1689))
(assert (x489 x430))
(assert (= (x293 928) (x473 928)))
(assert (= (x1074 1401663147) (x368 1401663147)))
(assert (= x1106 (=> (and (= x106 (x1804 (+ 17 x826))) (= x826 (x1705 928)) (= x845 (> x1589 0)) (= x542 (x1802 (x1074 x106))) (= (x204 896) x1589)) (and (=> (and x845 (= x1316 (> x1179 0)) (or (and (> 4294967296 x1018) x1316 (= 1 x562)) (and (not x1316) (= x1179 x562)))) x1504) (=> (not x845) x666)))))
(assert (= (x1531 640) (x1539 640)))
(assert (x489 x596))
(assert (x489 x1406))
(assert (= (x1517 (x368 2484372501)) 2484372501))
(assert (= x1002 (=> (and (= x188 (x1546 640)) (= x1352 (x1546 736)) (= (< x188 x1352) x1341) (= x560 (x206 928))) (and (=> (not x1341) x1309) (=> x1341 x896)))))
(assert (= x1671 (and x532 (not x991))))
(assert (= (x864 928) (x1903 928)))
(assert (= (x1847 128) (x1517 (x1074 (x1847 128)))))
(assert (= (x608 320) (ite (and x1720 x38) (x3 320) (x1204 320))))
(assert (x489 x1006))
(assert (x489 x264))
(assert (= (x818 704) (x1345 704)))
(assert (x489 x1672))
(assert (x489 x396))
(assert (= (x1569 320) (x208 320)))
(assert (=> (>= 10000 x106) (= (x1074 x106) (x368 x106))))
(assert (= (x801 672) (x1157 672)))
(assert (x489 x1315))
(assert (= (or (and x1210 x723) (and x115 (not x398))) x751))
(assert (= (ite (and x1519 x702) (x205 352) (x763 352)) (x1181 352)))
(assert (= (x1345 672) (x818 672)))
(assert (x489 x1822))
(assert (= (x1733 672) (x1204 672)))
(assert (x489 x525))
(assert (x489 x948))
(assert (x489 x27))
(assert (x489 x1808))
(assert (= (x867 224) (x1239 224)))
(assert (= x1684 (=> (= (> x35 0) x311) (and (=> x311 x100) (=> (not x311) x896)))))
(assert (= (and x1602 x1864) x72))
(assert (= (x1754 768) (x1062 768)))
(assert (= (x208 640) (x1569 640)))
(assert (= (x1754 224) (x1062 224)))
(assert (= (x1127 896) (x639 896)))
(assert (= (x651 736) (x777 736)))
(assert (= (x1816 704) (x1053 704)))
(assert (= (x1127 736) (x639 736)))
(assert (= (x253 736) (x1666 736)))
(assert (= (x1543 x1438 160) (div x1438 1461501637330902918203684832716283019655932542976)))
(assert (= (x966 736) (x742 736)))
(assert (x489 x920))
(assert (x489 x1079))
(assert (x489 x455))
(assert (x489 x760))
(assert (= (x293 320) (x473 320)))
(assert (x489 x262))
(assert (= x1582 x839))
(assert (= (x1789 640) (x405 640)))
(assert (= (x1845 704) (x959 704)))
(assert (x489 x576))
(assert (= (x1802 x399) (ite (= (x368 0) x399) 1 (x628 x399))))
(assert (x489 x1796))
(assert (x489 x1050))
(assert (= (=> (and (= (> x1220 x418) x728) (= (x1564 928) x975) (= x418 (x128 896)) (= x1220 (x128 768))) (and (=> (not x728) x1309) (=> x728 x1489))) x718))
(assert (x489 x259))
(assert (= (x572 224) (x218 224)))
(assert (x489 x1694))
(assert (x489 x249))
(assert (= x952 (=> (and (= (x786 928) x439) (= (not (< 0 x5)) x1302) (= (x1804 (+ 17 x439)) x1879) (= x5 (x412 896)) (= x804 (x592 (x1074 x1879)))) (and x1485 x1302))))
(assert (x489 x1793))
(assert (x489 x1917))
(assert (=> (<= (x737 128) 10000) (= (x1074 (x737 128)) (x368 (x737 128)))))
(assert (x489 x1270))
(assert (= (x405 928) (x1789 928)))
(assert (= (x250 736) (x1931 736)))
(assert (x489 x771))
(assert (= (x849 704) (x1919 704)))
(assert (= x695 (x1517 (x1074 x695))))
(assert (x489 x1266))
(assert (=> (<= x1798 10000) (= (x368 x1798) (x1074 x1798))))
(assert (= (x1705 672) (x204 672)))
(assert (x1124 (x373 128)))
(assert (= (x1330 160) (x1517 (x1074 (x1330 160)))))
(assert (= (x1517 (x1074 (x777 160))) (x777 160)))
(assert (= (x1733 768) (x1204 768)))
(assert (x489 x1595))
(assert (x489 x337))
(assert (= (x1193 640) (x1717 640)))
(assert (= (x1010 256) (x806 256)))
(assert (=> (>= 10000 (x97 128)) (= (x1074 (x97 128)) (x368 (x97 128)))))
(assert (x489 x1133))
(assert (= (x1228 768) (x200 768)))
(assert (x489 x1383))
(assert (x489 x1714))
(assert (x489 x1314))
(assert (= (x624 704) (x1877 704)))
(assert (x489 x940))
(assert (x489 x258))
(assert (=> (<= (x737 160) 10000) (= (x368 (x737 160)) (x1074 (x737 160)))))
(assert (x489 x1164))
(assert (= x800 (and (not x1590) x1454)))
(assert (= (x218 320) (x572 320)))
(assert (x489 x213))
(assert (= (x1349 352) (x1118 352)))
(assert (= (x1884 640) (x1144 640)))
(assert (x489 x76))
(assert (= (x204 736) (x1705 736)))
(assert (x489 x410))
(assert (x489 x1437))
(assert (= (and x1537 x125) x420))
(assert (= (x1873 768) (x1458 768)))
(assert (= (x572 896) (x218 896)))
(assert (= (x801 320) (x1157 320)))
(assert (=> (>= 10000 (x1895 160)) (= (x368 (x1895 160)) (x1074 (x1895 160)))))
(assert (x489 x203))
(assert (x489 x1584))
(assert (= (x1517 (x1074 x1798)) x1798))
(assert (= (x1517 (x1074 (x748 128))) (x748 128)))
(assert (x489 x1617))
(assert (= (x1919 928) (x849 928)))
(assert (= (x1666 704) (x253 704)))
(assert (= (x138 640) (x1814 640)))
(assert (x489 x1205))
(assert (= (x1867 672) (x785 672)))
(assert (= (x218 768) (x572 768)))
(assert (x489 x616))
(assert (x489 x664))
(assert (= (x964 864) (x480 864)))
(assert (= (x727 768) (x1055 768)))
(assert (= (or x1744 x751) x431))
(assert (x1124 x222))
(assert (x1124 (x617 160)))
(assert (=> (<= (x748 160) 10000) (= (x368 (x748 160)) (x1074 (x748 160)))))
(assert (x489 x938))
(assert (x1124 (x114 160)))
(assert (= (and x1551 x1234) x147))
(assert (x1124 (x777 160)))
(assert (x489 x929))
(assert (x1124 (x851 160)))
(assert (= (x644 288) (x1300 288)))
(assert (= (x698 672) (x1835 672)))
(assert (x489 x1185))
(assert (x489 x1421))
(assert (= (x407 704) (x323 704)))
(assert (x1124 (x1899 128)))
(assert (= (x959 128) (x1517 (x1074 (x959 128)))))
(assert (= (x1074 2052391781) (x368 2052391781)))
(assert (x1124 (x114 128)))
(assert (= (and x1081 (not x214)) x532))
(assert (x489 x139))
(assert (x489 x75))
(assert (= (x1517 (x1074 (x413 128))) (x413 128)))
(assert (= (x138 864) (x1814 864)))
(assert (= (=> (and (= x955 (> x349 x1788)) (= (x1692 (x368 40)) x1918) (= x1788 (x1804 (+ x349 x1918))) (= (x370 224) x349)) (and (=> x955 x896) (=> (not x955) x122))) x195))
(assert (= (x835 640) (x682 640)))
(assert (=> (>= 10000 (x1847 128)) (= (x368 (x1847 128)) (x1074 (x1847 128)))))
(assert (= x104 (and (not x733) x1036)))
(assert (= (x1539 768) (x1531 768)))
(assert (= (x1343 672) (x972 672)))
(assert (x489 x1051))
(assert (x489 x1265))
(assert (= (ite (= (x368 39) (x368 0)) 1 (x628 (x368 39))) (x701 (x368 39))))
(assert (= (x1845 736) (x959 736)))
(assert (= (x1867 352) (x785 352)))
(assert (= (x1349 1024) (x1118 1024)))
(assert (= (x1717 704) (x1193 704)))
(assert (= (x1074 3092021830) (x368 3092021830)))
(assert (x489 x668))
(assert (= (x1275 224) (x1738 224)))
(assert (x489 x1861))
(assert (= (x1517 (x368 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x489 x1306))
(assert (= (x1311 768) (x1280 768)))
(assert (= (x651 672) (x777 672)))
(assert (x489 x540))
(assert (= (x1517 (x1074 (x851 160))) (x851 160)))
(assert (= (x941 672) (x303 672)))
(assert (x489 x708))
(assert (= (x1802 x1862) (ite (= x1862 (x368 0)) 1 (x628 x1862))))
(assert (x489 x1696))
(assert (= (x1053 640) (x1816 640)))
(assert (= x426 (=> (and (= x296 (div x52 x1688)) (= (x1104 224) x1688) (= (x1104 256) x334) (= (= x1688 0) x1261) (= x52 (mod (* x1688 x334) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x58 (= x334 x296)) (= (x1104 256) x664) (= (= (ite x447 1 0) 0) x170) (= x230 (x131 (x368 43))) (= x447 (or x58 x1261))) (and (=> x170 x896) (=> (not x170) x255)))))
(assert (x1124 (x959 160)))
(assert (= (x849 1056) (x1919 1056)))
(assert (=> (>= 10000 (x302 160)) (= (x1074 (x302 160)) (x368 (x302 160)))))
(assert (= (+ 2 (x1517 x358)) (x1517 (x276 x358 2))))
(assert (x489 x1218))
(assert (x489 x1806))
(assert (x489 x85))
(assert (x489 x1439))
(assert (= x422 (x250 352)))
(assert (x489 x1435))
(assert (= x491 (=> (and (= x1783 (x963 928)) (= (= 20 x1219) x1880) (= x1219 (x1804 (+ x1783 1)))) (and (=> (not x1880) x977) (=> x1880 x1614)))))
(assert (= 464926286 (x1517 (x368 464926286))))
(assert (=> (<= x509 10000) (= (x368 x509) (x1074 x509))))
(assert (x489 x1033))
(assert (= (x1119 352) (x1102 352)))
(assert (= (x903 640) (x21 640)))
(assert (x489 x1414))
(assert (= (x1102 640) (x1119 640)))
(assert (= (ite (= (x368 0) (x368 39)) 1 (x1254 (x368 39))) (x1692 (x368 39))))
(assert (x489 x64))
(assert (= (x1118 672) (x1349 672)))
(assert (= 3567397854 (x1517 (x368 3567397854))))
(assert (x489 x1416))
(assert (= (x533 736) (x2 736)))
(assert (= (x1884 896) (x1144 896)))
(assert (= (x1591 320) (ite (and x1755 x6) (x355 320) (x934 320))))
(assert (x489 x482))
(assert (x489 x1065))
(assert (x489 x985))
(assert (x489 x1399))
(assert (= (x1349 960) (x1118 960)))
(assert (= (x748 160) (x1517 (x1074 (x748 160)))))
(assert (x489 x1019))
(assert (x489 x1179))
(assert (= (x1706 736) (x949 736)))
(assert (= (x1899 704) (x1336 704)))
(assert (= (x1083 352) (x757 352)))
(assert (x489 x1463))
(assert (= x1508 (x786 928)))
(assert (= (x1102 896) (x1119 896)))
(assert (x489 x1089))
(assert (= (=> (and (not (< x1079 4)) (= (< 0 x1287) x1056) (= x1291 (x1168 (x1074 274184521717934524641157099916833587200))) (> x1291 0)) (and (=> x1056 x896) (=> (not x1056) x602))) x1397))
(assert (= (=> (and (= (> x1772 x1673) x1449) (= (x1181 800) x1673) (> x1098 0) (< 31 x325) (= x1772 (x1181 768))) (and (=> x1449 x1757) (=> (not x1449) x570))) x313))
(assert (=> (>= 10000 (x353 160)) (= (x1074 (x353 160)) (x368 (x353 160)))))
(assert (= (x1041 320) (x567 320)))
(assert (= x1350 (x191 224)))
(assert (x489 x1878))
(assert (=> (<= (x698 160) 10000) (= (x1074 (x698 160)) (x368 (x698 160)))))
(assert (= (x785 704) (x1867 704)))
(assert (= (x1802 x330) (ite (= (x368 0) x330) 1 (x628 x330))))
(assert (= x1724 (and x1071 (not x331))))
(assert (= (x1553 352) (x696 352)))
(assert (= (x1004 640) (x768 640)))
(assert (x489 x1129))
(assert (x489 x1413))
(assert (= x1328 (=> (and (= x1590 (= x812 0)) (= (x1141 (x1074 (x1899 128)) (x1074 (x1899 160)) 0) x68) (= x822 (ite (> x64 x516) x516 x64)) (= x516 (x1692 x493)) (= x659 (x218 224)) (= x812 (x1336 320)) (= x493 (x276 x68 2)) (= (div x512 x1892) x64)) (and (=> x1590 x1320) (=> (not x1590) x223)))))
(assert (= (x801 864) (x1157 864)))
(assert (= (x368 2835717307) (x1074 2835717307)))
(assert (=> (>= 10000 (x851 128)) (= (x1074 (x851 128)) (x368 (x851 128)))))
(assert (x489 x842))
(assert (= 0 (x409 320)))
(assert (x489 x899))
(assert (x489 x680))
(assert (x489 x1592))
(assert (= (x1300 736) (x644 736)))
(assert (x489 x994))
(assert (= (x1142 928) (x1329 928)))
(assert (x489 x406))
(assert (x489 x1151))
(assert (= x1393 (=> (and (= (x473 1088) x1809) (= (x473 960) x927) (= (> x927 x1809) x1834)) (and (=> x1834 x896) (=> (not x1834) x589)))))
(assert (x489 x414))
(assert (x489 x811))
(assert (x489 x1405))
(assert (x489 x1772))
(assert (x489 x418))
(assert (x489 x722))
(assert (= (x218 1056) (x572 1056)))
(assert (x489 x1775))
(assert (= (x253 320) (x1666 320)))
(assert (= (x1300 352) (x644 352)))
(assert (x489 x318))
(assert (= (x1517 (x368 961581905)) 961581905))
(assert (= (x1640 736) x1031))
(assert (= x470 (and (not x1202) x1303)))
(assert (= (x1517 (x1074 (x373 128))) (x373 128)))
(assert (=> (>= 10000 (x1569 160)) (= (x1074 (x1569 160)) (x368 (x1569 160)))))
(assert (= (x1458 256) (x1873 256)))
(assert (x489 x863))
(assert (x489 x1047))
(assert (= (x864 352) (x1903 352)))
(assert (x1124 (x698 128)))
(assert (x489 x486))
(assert (= (x283 320) (x1183 320)))
(assert (= (x701 x129) (ite (= (x368 0) x129) 1 (x628 x129))))
(assert (x489 x1459))
(assert (x489 x1905))
(assert (x489 x1620))
(assert (= (ite (= (x368 43) (x368 0)) 1 (x628 (x368 43))) (x701 (x368 43))))
(assert (=> (>= 10000 (x644 128)) (= (x368 (x644 128)) (x1074 (x644 128)))))
(assert (= (x1835 352) (x698 352)))
(assert (= (x964 1024) (x480 1024)))
(assert (= (x1102 736) (x1119 736)))
(assert (= (x1055 864) (x727 864)))
(assert (= x189 (and x1779 (not x459))))
(assert (= (x218 736) (x572 736)))
(assert (= (x1204 352) (x1733 352)))
(assert (x489 x633))
(assert (= (or (and x1615 (not x1858)) (and x1735 (not x892))) x1470))
(assert (= (x1336 288) (x1899 288)))
(assert (=> (>= 10000 (x1286 128)) (= (x1074 (x1286 128)) (x368 (x1286 128)))))
(assert (= (x1539 736) (x1531 736)))
(assert (x489 x272))
(assert (x489 x543))
(assert (x489 x1882))
(assert (= (x368 16192718) (x1074 16192718)))
(assert (= (x1717 320) (x1193 320)))
(assert (= (x1142 672) (x1329 672)))
(assert (x489 x1340))
(assert (x489 x1420))
(assert (= 4294967296 (x1517 (x368 4294967296))))
(assert (x1124 (x1814 128)))
(assert (= (x1458 224) (x1873 224)))
(assert (x489 x1912))
(assert (x489 x619))
(assert (= (x1789 320) (x405 320)))
(assert (x489 x506))
(assert (= (ite (= (x1074 x62) (x368 0)) 1 (x628 (x1074 x62))) (x1802 (x1074 x62))))
(assert (= x1701 (x293 1056)))
(assert (= (x128 320) (x1564 320)))
(assert (x489 x1093))
(assert (= x683 (=> (and (= (= 0 x1892) x756) (= x1892 (x1692 (x368 40)))) (and (=> (not x756) x1328) (=> x756 x896)))))
(assert (x489 x169))
(assert (= (x1343 224) (x972 224)))
(assert (= (x1329 640) (x1142 640)))
(assert (= (x1517 (x1074 x1879)) x1879))
(assert (x489 x704))
(assert (= (x644 160) (x1517 (x1074 (x644 160)))))
(assert (x489 x1307))
(assert (= (x1074 1888058147) (x368 1888058147)))
(assert (x489 x1851))
(assert (= (x1802 (x368 10)) (ite (= (x368 0) (x368 10)) 1 (x628 (x368 10)))))
(assert (x489 x194))
(assert (x489 x558))
(assert (x489 x900))
(assert (= (x1183 576) x1654))
(assert (x489 x1783))
(assert (= (x768 320) (x1004 320)))
(assert (= (x357 352) (x1360 352)))
(assert (x489 x193))
(assert (x489 x1287))
(assert (x489 x196))
(assert (= (x1706 672) (x949 672)))
(assert (x489 x78))
(assert (x489 x1505))
(assert (= (x90 352) (x808 352)))
(assert (= (x1300 896) (x644 896)))
(assert (x489 x404))
(assert (= x1745 (=> (and (= (< 0 x290) x1755) (= (x111 800) x837) (or (and (< x183 4294967296) x1755 (= 1 x722)) (and (= x722 x290) (not x1755)))) x1670)))
(assert (= (ite (and x38 x1720) (x3 736) (x1204 736)) (x608 736)))
(assert (x489 x1003))
(assert (= (x407 864) (x323 864)))
(assert (= 596573372 (x1517 (x368 596573372))))
(assert (= (x1814 736) (x138 736)))
(assert (= x861 (and (not x671) x219)))
(assert (x489 x1782))
(assert (x489 x1756))
(assert (=> (<= x428 10000) (= (x1074 x428) (x368 x428))))
(assert (= x233 x702))
(assert (= (x1802 (x368 40)) (ite (= (x368 40) (x368 0)) 1 (x628 (x368 40)))))
(assert (x489 x340))
(assert (x489 x713))
(assert (= (x698 320) (x1835 320)))
(assert (= (x1517 (x1074 (x1895 160))) (x1895 160)))
(assert (x489 x1681))
(assert (= (=> (and (= x149 (x1319 1024)) (= (x1319 864) x987) (= (x521 (- x1240 x704)) x510) (= x1243 (x1804 (+ x987 x149))) (= (> x987 x1243) x214)) (and (=> x214 x896) (=> (not x214) x1578))) x739))
(assert (x489 x1833))
(assert (x489 x1597))
(assert (= (x651 704) (x777 704)))
(assert (= (x1193 736) x1603))
(assert (= (x934 352) (x1335 352)))
(assert (x489 x1511))
(assert (= (x1877 672) (x624 672)))
(assert (= (x1553 768) (x696 768)))
(assert (x489 x1045))
(assert (x489 x229))
(assert (= (x572 672) (x218 672)))
(assert (x489 x1693))
(assert (= (x1062 256) (x1754 256)))
(assert (x489 x299))
(assert (= (x652 864) (x963 864)))
(assert (= (x1335 800) (x934 800)))
(assert (= 599290589 (x1517 (x368 599290589))))
(assert (x489 x1023))
(assert (= (x208 672) (x1569 672)))
(assert (x489 x1353))
(assert (= (x806 320) (x1010 320)))
(assert (x489 x1200))
(assert (x489 x425))
(assert (x489 x419))
(assert (= (x368 1851080549) (x1074 1851080549)))
(assert (x1124 (x1025 160)))
(assert (=> (<= (x1895 128) 10000) (= (x1074 (x1895 128)) (x368 (x1895 128)))))
(assert (x489 x137))
(assert (x489 x1611))
(assert (= (x972 352) (x1343 352)))
(assert (=> (>= 10000 x1033) (= (x1074 x1033) (x368 x1033))))
(assert (= x1822 (x1835 992)))
(assert (x489 x1503))
(assert (x489 x1412))
(assert (= (=> (= (< 31 x1805) x1376) (and (=> (not x1376) x896) (=> x1376 x527))) x1737))
(assert (= (=> (and (= (div x172 x872) x1120) (= x872 (x521 (- x474 x1344))) (= x1096 (x1692 (x368 44))) (= x321 (or x1535 x586)) (= x172 (mod (* x872 x1096) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x586 (= 0 x872)) (= (= x1096 x1120) x1535) (= x1147 (= (ite x321 1 0) 0))) (and (=> (not x1147) x981) (=> x1147 x896))) x322))
(assert (= (x757 768) (x1083 768)))
(assert (= x996 (=> (and (= (> x1318 x1238) x1209) (= (div x769 1000000000000000000) x1318)) (and (=> x1209 x896) (=> (and (= x743 (x521 (- x1238 x1318))) (not x1209)) x1180)))))
(assert (x489 x388))
(assert (= (x1717 672) (x1193 672)))
(assert (= (x818 768) (x1345 768)))
(assert (=> (>= 10000 x190) (= (x368 x190) (x1074 x190))))
(assert (x489 x604))
(assert (= (x1831 672) (x1286 672)))
(assert (= x551 x1638))
(assert (x489 x35))
(assert (x1124 (x37 128)))
(assert (x489 x1))
(assert (= (x1074 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x368 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x489 x1679))
(assert (x1124 (x1800 160)))
(assert (= (x786 864) (x269 864)))
(assert (not x342))
(assert (= (x1553 736) (x696 736)))
(assert (= (and x800 (not x1282)) x621))
(assert (= (x1135 224) (x1213 224)))
(assert (=> (<= (x1330 160) 10000) (= (x1074 (x1330 160)) (x368 (x1330 160)))))
(assert (= (=> (and (= (> 1000000000000000000 x873) x1885) (= (x386 224) x873)) (and (=> (not x1885) x1180) (=> x1885 x883))) x981))
(assert (= (x1517 (x368 1851080549)) 1851080549))
(assert (x489 x1049))
(assert (x489 x1377))
(assert (x489 x1424))
(assert (x489 x1839))
(assert (x489 x188))
(assert (= (x742 672) (x966 672)))
(assert (x489 x798))
(assert (= (x1831 736) (x1286 736)))
(assert (x489 x511))
(assert (= (x701 x1000) (ite (= x1000 (x368 0)) 1 (x628 x1000))))
(assert (= (x1553 320) (x696 320)))
(assert (x489 x1464))
(assert (= (+ (x1517 x1572) 6) (x1517 (x276 x1572 6))))
(assert (x489 x15))
(assert (= (x1517 (x1074 (x1800 160))) (x1800 160)))
(assert (= x1454 (and x470 (not x756))))
(assert (x489 x681))
(assert (= (x1814 672) (x138 672)))
(assert (x489 x278))
(assert (= (x849 864) (x1919 864)))
(assert (= (=> (and (= x1715 (x1254 (x368 0))) (= x351 (> x1715 0))) (and (=> x351 x896) (=> (not x351) x642))) x1039))
(assert (= (x1835 640) (x698 640)))
(assert (x489 x970))
(assert (x489 x1509))
(assert (= x1529 (and x84 x861)))
(assert (= (x1118 736) (x1349 736)))
(assert (x489 x512))
(assert (= (x480 640) (x964 640)))
(assert (= (x941 352) (x303 352)))
(assert (= (x1831 704) (x1286 704)))
(assert (x489 x184))
(assert (= (x368 2780307423) (x1074 2780307423)))
(assert (= (x941 320) (x303 320)))
(assert (=> (>= 10000 (x1330 128)) (= (x1074 (x1330 128)) (x368 (x1330 128)))))
(assert (=> (>= 10000 (x1814 128)) (= (x1074 (x1814 128)) (x368 (x1814 128)))))
(assert (= (x1835 704) (x698 704)))
(assert (x489 x703))
(assert (x489 x1150))
(assert (x489 x937))
(assert (x489 x1321))
(assert (x489 x389))
(assert (x489 x449))
(assert (x489 x876))
(assert (x1124 (x526 128)))
(assert (= (+ (x1517 x1112) 6) (x1517 (x276 x1112 6))))
(assert (x489 x31))
(assert (= (x1594 736) (x794 736)))
(assert (x489 x817))
(assert (x489 x1734))
(assert (= (and x670 x1872) x153))
(assert (x489 x70))
(assert (= (x440 704) (x320 704)))
(assert (= (x1919 960) (x849 960)))
(assert (x489 x1474))
(assert (x489 x1900))
(assert (x489 x1908))
(assert (= (x1517 (x276 x1072 2)) (+ 2 (x1517 x1072))))
(assert (= (x1873 288) (x1458 288)))
(assert (= (x1919 768) (x849 768)))
(assert (= (x1041 704) (x567 704)))
(assert (x489 x975))
(assert (= (ite (= (x368 0) x571) 1 (x1254 x571)) (x1692 x571)))
(assert (= (or (and x1864 (not x1602)) (and x72 x951) x198) x475))
(assert (= (x1517 (x1074 (x572 160))) (x572 160)))
(assert (= (x1299 320) (x164 320)))
(assert (x489 x296))
(assert (x489 x716))
(assert (= (x1360 320) (x357 320)))
(assert (= (x801 640) (x1157 640)))
(assert (x1124 (x698 160)))
(assert (= (x1517 (x368 3504541104)) 3504541104))
(assert (=> (>= 10000 (x1754 160)) (= (x1074 (x1754 160)) (x368 (x1754 160)))))
(assert (= (x1517 (x276 x102 6)) (+ (x1517 x102) 6)))
(assert (x489 x1256))
(assert (= (=> (and (= x954 (x794 960)) (= (< x730 x954) x707) (= x730 (x794 768))) (and (=> x707 x896) (=> (not x707) x436))) x774))
(assert (x489 x1242))
(assert (= x1412 (x696 576)))
(assert (x489 x1860))
(assert (= (=> (and (= x1151 (div x632 x13)) (= x1664 (x801 928)) (= x792 (x944 864)) (= x1392 (x1804 (+ x1369 x792))) (not (< x1192 x1308)) (= (x1157 768) x1465) (= (x1157 896) x347) (< 0 x1538) (= x632 (mod (* x1392 x13) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1192 (div x632 10000)) (= (x944 704) x13) (= x108 (> x1465 x347)) (= (ite x429 1 0) x1658) (= x1843 (< 0 x287)) (= x1278 (= x13 0)) (= (x944 768) x1369) (> x788 31) (or (and (not x1843) (= x287 x1538)) (and x1843 (< x788 4294967296) (= x1538 1))) (or (not x108) (and (= x1494 (x1060 768)) x108 (= (ite x1801 1 0) x1358) (= (x186 (x368 44)) x1191) (= x1912 (x1157 896)) (not (< x67 x693)) (= (x186 (x368 40)) x911) (= (= 0 x1314) x1134) (not (< x103 x174)) (= (or x1134 x1276) x1801) (not (>= (+ x911 x829) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x1177 0) x725) (= (< x765 1000000000000000000) x779) (= (= x1647 x1191) x1276) (> x1726 0) (or (and (= x1714 (x521 (- x1080 x203))) (= (x319 256) x1739) (= (div x279 x897) x252) (= (div x279 1000000000000000000) x203) (= x1043 (= x1739 x252)) (not (= x113 0)) (not (> x203 x1080)) (= (x319 224) x897) x779 (= x1080 (x319 256)) (= (mod (* x897 x1739) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x279) (= x908 (x186 (x368 43))) (= x600 (or x1043 x1011)) (= x1011 (= 0 x897)) (= x113 (ite x600 1 0))) (not x779)) (> x680 31) (= (x320 288) x103) (= x1314 (x521 (- x1150 x693))) (= (x164 416) x1324) (not (= 0 x1358)) (= x258 (x1636 736)) (or (not x726) (and (= (div x210 x1698) x1852) (= (div x210 x1391) x1524) (= x231 (= x1524 x619)) (not (= x1698 0)) (= x98 (ite x1799 1 0)) (not (= 0 x98)) (= x1532 (= 0 x1391)) (= x1799 (or x1532 x231)) (= (mod (* x619 x1391) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x210) (= (x1299 352) x1391) x726 (= (x186 (x368 9)) x619) (= (x1299 384) x1698))) (= (x521 (- x103 x174)) x1310) (= x388 (x1299 384)) (= (div x31 x1314) x1647) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x673 x1494))) (= x376 (x1636 640)) (= x174 (x148 320)) (= x31 (mod (* x1314 x1191) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x765 (x440 224)) (= x829 (x1857 224)) (= (x1804 (+ x911 x829)) x1347) (= x693 (x186 (x368 41))) (not (> x258 x376)) (= (x1060 864) x673) (= (< 0 x388) x726) (= x1464 (x583 928)) (or (and (= x1177 x1726) (not x725)) (and (< x680 4294967296) x725 (= 1 x1726))) (= (x1804 (+ x1494 x673)) x145))) (not (>= (+ x1369 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1308 (x944 864)) (= (or x393 x1278) x429) (not (= 0 x1658)) (= (= x1151 x1392) x393)) x432) x1614))
(assert (x489 x1515))
(assert (x489 x378))
(assert (x489 x515))
(assert (= (x138 704) (x1814 704)))
(assert (x489 x88))
(assert (= (ite (and x1755 x6) (x355 800) (x934 800)) (x1591 800)))
(assert (= (x1517 (x1074 (x959 160))) (x959 160)))
(assert (x489 x461))
(assert (= (ite (and x6 x1755) (x355 672) (x934 672)) (x1591 672)))
(assert (= x140 (=> (and (= x923 (= 0 x956)) (= x956 (x1692 (x368 9)))) (and (=> (and (= (div x369 x956) x1138) (not x923)) x1745) (=> x923 x896)))))
(assert (x489 x509))
(assert (= (x1706 320) (x949 320)))
(assert (= (x473 704) (x293 704)))
(assert (= (x1074 599290589) (x368 599290589)))
(assert (= (or (and (not x1024) x650) (and x1537 (not x125))) x1652))
(assert (= (x1517 (x368 773487949)) 773487949))
(assert (= (x682 736) (x835 736)))
(assert (= (x533 320) (x2 320)))
(assert (= (x1789 768) (x405 768)))
(assert (x1124 (x959 128)))
(assert (x489 x1682))
(assert (x489 x1351))
(assert (= (x114 160) (x1517 (x1074 (x114 160)))))
(assert (x489 x98))
(assert (x489 x1063))
(assert (x489 x1477))
(assert (= (x934 320) (x1335 320)))
(assert (= (x303 896) (x941 896)))
(assert (= (x1517 (x1074 (x37 160))) (x37 160)))
(assert (= (x1899 640) (x1336 640)))
(assert (x489 x720))
(assert (x489 x1840))
(assert (= (x849 672) (x1919 672)))
(assert (= (and (not x697) x1152) x928))
(assert (= x738 (x1329 896)))
(assert (= (x1517 (x1074 (x1330 128))) (x1330 128)))
(assert (x489 x347))
(assert (x489 x795))
(assert (= (x346 704) (x763 704)))
(assert (= 1461501637330902918203684832716283019655932542975 (x1517 (x368 1461501637330902918203684832716283019655932542975))))
(assert (x1124 (x302 160)))
(assert (= x523 (=> (and (= (= 0 (ite x382 1 0)) x135) (= (or x1587 x1548) x382) (= (= x938 x978) x1548) (= (x521 (- x406 x270)) x1169) (= (mod (* x627 x938) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x369) (= x938 (x374 384)) (= (div x369 x627) x978) (= x1587 (= 0 x627))) (and (=> x135 x896) (=> (not x135) x140)))))
(assert (x489 x1642))
(assert (= (x698 960) (x1835 960)))
(assert (x489 x659))
(assert (= (x440 864) (x320 864)))
(assert (= (x1300 672) (x644 672)))
(assert (x489 x1192))
(assert (x1124 (x37 160)))
(assert (x489 x1344))
(assert (= (x1144 320) (x1884 320)))
(assert (= x1370 (=> (and (= (x757 224) x1092) (= x1367 (> 1000000000000000000 x1092))) (and (=> x1367 x426) (=> (not x1367) x1588)))))
(assert (x489 x730))
(assert (x489 x1639))
(assert (x489 x1673))
(assert (= (x1814 352) (x138 352)))
(assert (= (x1517 (x368 3184006219)) 3184006219))
(assert (= (x1062 704) (x1754 704)))
(assert (= (x368 4267106866) (x1074 4267106866)))
(assert (x489 x270))
(assert (x489 x694))
(assert (= (or x871 (and (not x845) x1703)) x1214))
(assert (x489 x791))
(assert (= x477 (=> (= x1248 (< 0 x1006)) (and (=> x1248 x86) (=> (not x1248) x896)))))
(assert (= x437 (or (and x1769 (not x1766)) (and (not x1367) x690))))
(assert (= x172 (x386 224)))
(assert (= (=> (and (= (x1692 (x368 9)) x146) (= x1296 (x777 736)) (= (> x146 0) x201)) (and (=> (and x201 (or (and (= 1 x35) x814 (> 4294967296 x1445)) (and (= x994 x35) (not x814))) (= (x651 352) x627) (= (> x994 0) x814)) x1684) (=> (and (not x201) (= (x651 352) x465)) x1745))) x16))
(assert (= (x966 320) (x742 320)))
(assert (x1124 x1891))
(assert (x489 x980))
(assert (x489 x176))
(assert (= (and x790 x54) x458))
(assert (x489 x424))
(assert (x489 x1523))
(assert (x489 x1914))
(assert (x489 x1828))
(assert (= x359 (=> (and (= x340 (x90 896)) (or (and (= x378 x863) (not x329)) (and x329 (> 4294967296 x30) (= 1 x863))) (= (mod (* x1407 x1696) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1890) (= x403 (div x1890 10000)) (= (x808 928) x259) (= (or x361 x1440) x1528) (or (not x1677) (and (or (and (not (= 0 x1478)) (= (x567 352) x1743) (= (x567 384) x713) (= x926 (or x989 x1480)) (= x1480 (= x1576 x795)) (= x344 (div x1851 x713)) (= (ite x926 1 0) x1478) (not (= 0 x713)) (= x795 (x1506 (x368 9))) (= (= x1743 0) x989) (= x1576 (div x1851 x1743)) (= x1851 (mod (* x795 x1743) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x721) (not x721)) (= x689 (x407 288)) (= x1340 (x1804 (+ x1503 x1777))) (= (x277 864) x1523) (= x720 (x1804 (+ x980 x1523))) (= (mod (* x421 x350) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x419) (= (x277 768) x980) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1777 x1503))) (= (ite x476 1 0) x1351) (= x1123 (< x1555 1000000000000000000)) (= (x1506 (x368 41)) x1604) (= (div x419 x350) x1203) (not (< x663 x1479)) (= (x1506 (x368 40)) x1777) (= (x90 896) x424) (not (< x689 x1499)) (or (and (= x1689 x1704) (not x992)) (and (= 1 x1689) (> 4294967296 x811) x992)) (= (> x178 0) x721) (= (= x421 x1203) x427) (= (x1506 (x368 44)) x421) (= x992 (< 0 x1704)) x1677 (> x1689 0) (= x663 (x1073 640)) (= (x521 (- x689 x1499)) x760) (not (= x1351 0)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x980 x1523))) (not (> x1604 x213)) (= x799 (= x350 0)) (= x1826 (x1041 416)) (= (x629 224) x1503) (or (not x1123) (and (= (= 0 x1334) x415) (= (div x1099 x1334) x879) (not (< x1541 x327)) (= x1854 (x1408 256)) (= x1541 (x1408 256)) (= x327 (div x1099 1000000000000000000)) (not (= 0 x1756)) (= x1334 (x1408 224)) (= x971 (x521 (- x1541 x327))) (= (x1506 (x368 43)) x299) (= x1756 (ite x1448 1 0)) (= x1448 (or x415 x1516)) (= (= x879 x1854) x1516) x1123 (= (mod (* x1334 x1854) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1099))) (= (x323 224) x1555) (= x178 (x567 384)) (= (x521 (- x474 x1604)) x350) (= x1479 (x1073 736)) (= x719 (x850 928)) (= x476 (or x799 x427)) (= (x1396 320) x1499) (< 31 x811))) (= (x1518 864) x410) (= (div x1890 x1696) x781) (= (ite x1528 1 0) x1265) (= x1819 (x1518 864)) (< 0 x863) (= (> x378 0) x329) (= x547 (x90 768)) (< 31 x30) (not (= 0 x1265)) (= (= x1696 0) x361) (= (> x547 x340) x1677) (= (x1518 768) x1375) (= x1407 (x1804 (+ x1819 x1375))) (= x1440 (= x781 x1407)) (not (> x410 x403)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1375 x1819))) (= x1696 (x1518 704))) x570)))
(assert (x489 x1508))
(assert (=> (<= (x748 128) 10000) (= (x368 (x748 128)) (x1074 (x748 128)))))
(assert (= (x1280 256) (x1311 256)))
(assert (= (x368 2869116585) (x1074 2869116585)))
(assert (= (x1705 768) (x204 768)))
(assert (x489 x623))
(assert (= (x1802 (x368 43)) (ite (= (x368 0) (x368 43)) 1 (x628 (x368 43)))))
(assert (= (x966 704) (x742 704)))
(assert (= x100 (=> (= x310 (< 31 x1445)) (and (=> (not x310) x896) (=> x310 x195)))))
(assert (= (x280 672) (x386 672)))
(assert (= (x1539 352) (x1531 352)))
(assert (= (x440 672) (x320 672)))
(assert (x489 x99))
(assert (x489 x1273))
(assert (x489 x632))
(assert (x489 x1815))
(assert (= (x835 768) (x682 768)))
(assert (=> (>= 10000 (x959 160)) (= (x1074 (x959 160)) (x368 (x959 160)))))
(assert (x489 x1284))
(assert (= x975 (x128 896)))
(assert (x489 x1928))
(assert (x489 x1612))
(assert (x489 x573))
(assert (= (ite (and x6 x1755) (x355 736) (x934 736)) (x1591 736)))
(assert (x489 x1761))
(assert (x489 x1308))
(assert (= (x701 (x368 44)) (ite (= (x368 44) (x368 0)) 1 (x628 (x368 44)))))
(assert (=> (>= 10000 (x644 160)) (= (x1074 (x644 160)) (x368 (x644 160)))))
(assert (x489 x1741))
(assert (= (=> (and (= x1793 (x1640 704)) (= x422 (x1931 736)) (= (< 0 x1624) x1519) (= false x1848) (>= x1463 0) (= x584 (> (x1168 (x1074 274184521717934524641157099916833587200)) 0)) (not (= x506 2484372501)) (<= x304 1461501637330902918203684832716283019655932542975) (not (= 596573372 x506)) (= x1430 (x1543 x482 160)) (= (x1168 (x1074 274184521717934524641157099916833587200)) x1455) x584 (not (= 599290589 x506)) (= x995 x1346) (not (= x506 3504541104)) (= x538 (< 0 x318)) (= (x1931 736) x1522) (>= 1461501637330902918203684832716283019655932542975 x1133) (>= x1355 0) (not (= x506 464926286)) (not (= 2209625481 x506)) (= (x701 (x368 9)) x318) (>= x1256 0) (<= 0 x304) (= x1639 x962) (>= x1836 0) (= x1424 x304) (<= 0 x1133) (not (= x506 2316151882)) (not (> x1430 0)) (not (> x1901 0)) (not (= 3065339685 x506)) (= 2 x1577) (= x556 false) (or (and (= x887 (x772 384)) (= (= x887 x1270) x1001) (< 31 x668) (= x1716 (= 0 x1634)) (not (= x891 0)) (= (x521 (- x474 x1861)) x1634) (= x1786 (x1804 (+ x716 x34))) x538 (= (x701 (x368 41)) x1861) (= x716 (x701 (x368 40))) (= (= 0 x1474) x91) (= (div x1515 x492) x616) (= (or x55 x1716) x494) (= (x521 (- x1420 x94)) x1306) (= (x191 224) x416) (= (x250 352) x1474) (= (< x416 1000000000000000000) x239) (= x492 (x701 (x368 9))) (= (mod (* x887 x1474) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1515) (< 0 x831) (= (ite x494 1 0) x891) (= (or x91 x1001) x1874) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x716 x34))) (= (x160 288) x1420) (not (< x213 x1861)) (= (= x660 x1620) x55) (or (not x239) (and (= (x521 (- x1492 x14)) x1405) (= (= 0 x1611) x1426) (not (> x14 x1492)) x239 (= (x1550 256) x1237) (not (= 0 x1126)) (= (x701 (x368 43)) x1268) (= x504 (mod (* x1237 x1611) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1550 256) x1492) (= x1611 (x1550 224)) (= x1126 (ite x120 1 0)) (= x753 (= x1237 x1674)) (= (div x504 x1611) x1674) (= x120 (or x753 x1426)) (= x14 (div x504 1000000000000000000)))) (not (= x515 0)) (not (= x492 0)) (= (x687 224) x34) (= x94 (x588 320)) (= (x701 (x368 44)) x1620) (= (ite x1874 1 0) x515) (not (< x1420 x94)) (= x1350 (mod (* x1620 x1634) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x1515 x1474) x1270) (= (div x1350 x1634) x660) (or (and (= x25 x831) (not x866)) (and (= x831 1) (< x668 4294967296) x866)) (= (< 0 x25) x866)) (and (= (x250 352) x425) (not x538))) (not (= x506 2835717307)) (or (and x1519 (> 4294967296 x325) (= 1 x1098)) (and (not x1519) (= x1098 x1624))) (= x1315 x1889) (= x833 false) (= x995 x392) (not (= 1851080549 x506)) (= x1901 x1287) (not (= x506 157198259)) (= x482 x101) (> x1522 0) (= x89 16192718) (>= 1461501637330902918203684832716283019655932542975 x1463) (not (> x1793 10000)) (= (x701 x924) x1758) (= x1889 x1133) (or (not x1384) (and (= x1000 (x1141 (x1074 (x373 128)) (x1074 (x373 160)) 0)) (= x455 (x701 x1000)) x1384)) (not (> 4 x1079)) (= false x1702) (= (x628 (x368 0)) x1866) (not (= 4267106866 x506)) (not (= 1401663147 x506)) (= (= x893 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1384) (not (= 3092021830 x506)) (not (= x506 2052391781)) (= x995 x1256) (not (= 1020253707 x506)) (not (= x506 31576340)) (not (= 961581905 x506)) (>= 1461501637330902918203684832716283019655932542975 x1256) (= x893 (x1640 736)) (not (= 2869116585 x506)) (not (= x506 2780307423)) (= (x1931 736) x665) (> x1455 0) (not (= x506 3963136098)) (not (< x1758 x665)) (not (= 773487949 x506)) (not (< 0 x1866)) (= x924 (x1141 (x1074 (x1931 128)) (x1074 (x1931 160)) 0)) (<= x392 1461501637330902918203684832716283019655932542975) (= (= x692 x1346) x1386) (= (x1067 640) x1031) (not (= x506 2681579215)) (not (= 3296657447 x506)) (< 67 x1079) (= (x1236 800) x1829) (not (= x506 348537858)) (= x101 x601) (>= 1461501637330902918203684832716283019655932542975 x1836) x1386 (= x474 x213) (= (x1441 (x1074 274184521717934524641157099916833587200)) x1355) (= x692 x1836) (not (= 3567397854 x506)) (not (= 1977493762 x506)) (not (= x506 629314576)) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1079)) (not (= x506 3184006219)) (not (= x506 1888058147)) (<= 0 x392) (= x506 16192718) (not (= 2757214935 x506))) x313) x342))
(assert (x489 x1091))
(assert (x489 x492))
(assert (x1124 (x1569 128)))
(assert (= (and x519 x1632) x45))
(assert (= (x368 961581905) (x1074 961581905)))
(assert (x489 x402))
(assert (= (x1074 3963136098) (x368 3963136098)))
(assert (= (x1074 1977493762) (x368 1977493762)))
(assert (= (x1802 (x368 41)) (ite (= (x368 0) (x368 41)) 1 (x628 (x368 41)))))
(assert (= (x166 736) (x1784 736)))
(assert (x489 x308))
(assert (= (x405 736) (x1789 736)))
(assert (x1124 (x1025 128)))
(assert (x489 x1891))
(assert (x489 x240))
(assert (x489 x1301))
(assert (= (x1517 (x368 4267106866)) 4267106866))
(assert (= (x763 640) (x346 640)))
(assert (= (x1692 x1862) (ite (= (x368 0) x1862) 1 (x1254 x1862))))
(assert (x489 x1097))
(assert (x489 x65))
(assert (= (x1127 352) (x639 352)))
(assert (= x577 (x1831 288)))
(assert (x489 x1243))
(assert (= (x1531 928) (x1539 928)))
(assert (x489 x106))
(assert (= (x1335 768) (x934 768)))
(assert (x489 x826))
(assert (x1124 (x644 160)))
(assert (= (x1074 274184521717934524641157099916833587200) (x368 274184521717934524641157099916833587200)))
(assert (= (x652 928) x1219))
(assert (x489 x1178))
(assert (= (x1299 640) (x164 640)))
(assert (= (x1517 (x1074 (x413 160))) (x413 160)))
(assert (x489 x531))
(assert (x489 x1876))
(assert (= (x939 640) (x1536 640)))
(assert (= (x386 352) (x280 352)))
(assert (= (x1074 773487949) (x368 773487949)))
(assert (= x906 (and x375 x910)))
(assert (x489 x1203))
(assert (x489 x1586))
(assert (= (=> (= x935 (> x548 0)) (and (=> (not x935) x896) (=> (and (= x633 (x1804 (+ 32 x1678))) (= (x696 576) x1678) (= (> x1827 0) x71) (or (not x71) (and (< x176 4294967296) x71)) (= (ite (> 32 x1761) x1761 32) x1412) x935) x192))) x300))
(assert (= (x1517 (x1074 (x1569 128))) (x1569 128)))
(assert (= (=> (and (= (> x308 0) x125) (= x1701 (x521 (- x1809 x927))) (= (x293 1024) x308)) (and (=> (not x125) x536) (=> x125 x1174))) x589))
(assert (x489 x837))
(assert (= (x964 928) (x480 928)))
(assert (x489 x1365))
(assert (=> (>= 10000 (x413 128)) (= (x1074 (x413 128)) (x368 (x413 128)))))
(assert (x489 x954))
(assert (= x428 (x1517 (x1074 x428))))
(assert (x489 x1533))
(assert (= (x293 640) (x473 640)))
(assert (x489 x1842))
(assert (x489 x1589))
(assert (x489 x563))
(assert (x489 x711))
(assert (= (x1903 768) (x864 768)))
(assert (= (x1802 (x368 9)) (ite (= (x368 0) (x368 9)) 1 (x628 (x368 9)))))
(assert (= (or (and x906 (not x201)) (and (not x923) x143)) x6))
(assert (= (x1157 736) (x801 736)))
(assert (= x754 (=> (and (= (x1692 (x368 39)) x656) (= x653 (= x656 0))) (and (=> (not x653) x1525) (=> x653 x1320)))))
(assert (x489 x1560))
(assert (x1124 (x661 160)))
(assert (x489 x481))
(assert (= (x1784 320) (x166 320)))
(assert (=> (<= (x1931 128) 10000) (= (x368 (x1931 128)) (x1074 (x1931 128)))))
(assert (= x31 (x440 224)))
(assert (x489 x142))
(assert (x1124 (x661 128)))
(assert (= (x652 672) (x963 672)))
(assert (= (x312 736) (x1230 736)))
(assert (= (x742 352) x561))
(assert (= (x1705 864) (x204 864)))
(assert (x489 x304))
(assert (= (x835 320) (x682 320)))
(assert (x489 x1425))
(assert (x489 x1695))
(assert (= (ite (and x6 x1755) (x355 640) (x934 640)) (x1591 640)))
(assert (= (x407 672) (x323 672)))
(assert (x489 x879))
(assert (= 274184521717934524641157099916833587200 (x1517 (x1074 274184521717934524641157099916833587200))))
(assert (= (and x828 x1111) x1713))
(assert (x489 x1092))
(assert (x489 x1478))
(assert (= (x269 352) (x786 352)))
(assert (=> (>= 10000 (x114 128)) (= (x368 (x114 128)) (x1074 (x114 128)))))
(assert (x489 x982))
(assert (= (x1919 640) (x849 640)))
(assert (x489 x423))
(assert (= (x941 928) (x303 928)))
(assert (= (x1286 640) (x1831 640)))
(assert (= x527 (=> (and (= (x1804 (+ x152 x1481)) x194) (= (x1247 224) x1481) (= (> x1481 x194) x697) (= x152 (x131 (x368 40)))) (and (=> (not x697) x1764) (=> x697 x896)))))
(assert (x489 x709))
(assert (= (x1280 736) (x1311 736)))
(assert (= (x1899 736) (x1336 736)))
(assert (x489 x163))
(assert (x1124 (x1286 128)))
(assert (= 2835717307 (x1517 (x368 2835717307))))
(assert (= (x1062 672) (x1754 672)))
(assert (x489 x1541))
(assert (x489 x553))
(assert (= (x138 1056) (x1814 1056)))
(assert (x489 x665))
(assert (= (x1680 (x1074 x1891)) (ite (and x434 x1582) (x1565 (x1074 x1891)) (x1348 (x1074 x1891)))))
(assert (= (x1517 (x368 348537858)) 348537858))
(assert (x489 x1235))
(assert (= (x741 1024) (x288 1024)))
(assert (x489 x841))
(assert (x489 x1318))
(assert (x1124 (x1931 160)))
(assert (= (x1458 384) (x1873 384)))
(assert (x489 x439))
(assert (= (x1041 640) (x567 640)))
(assert (= (x939 320) (x1536 320)))
(assert (x489 x1819))
(assert (x1124 (x737 160)))
(assert (= (x682 704) (x835 704)))
(assert (x489 x1760))
(assert (= x1323 (x1053 960)))
(assert (x489 x1026))
(assert (= (ite (and x6 x1755) (x355 352) (x934 352)) (x1591 352)))
(assert (= (=> (and (= x1178 (x1409 224)) (= x331 (= 0 (ite x265 1 0))) (= x669 (x1692 (x368 43))) (= x769 (mod (* x1909 x1178) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1238 (x1409 256)) (= (or x594 x1295) x265) (= x1909 (x1409 256)) (= (= 0 x1178) x594) (= x1295 (= x1909 x1630)) (= x1630 (div x769 x1178))) (and (=> (not x331) x996) (=> x331 x896))) x883))
(assert (= (ite (= (x368 0) (x368 9)) 1 (x628 (x368 9))) (x701 (x368 9))))
(assert (= (x1311 224) (x1280 224)))
(assert (= x1033 (x1517 (x1074 x1033))))
(assert (= (x320 640) (x440 640)))
(assert (= (x572 128) (x1517 (x1074 (x572 128)))))
(assert (= (x1004 672) (x768 672)))
(assert (= (x727 672) (x1055 672)))
(assert (= (x269 320) (x786 320)))
(assert (= (x639 768) (x1127 768)))
(assert (= x216 x997))
(assert (x489 x859))
(assert (= (x368 157198259) (x1074 157198259)))
(assert (x489 x578))
(assert (= (x1181 672) (ite (and x702 x1519) (x205 672) (x763 672))))
(assert (x489 x1758))
(assert (= (x218 864) (x572 864)))
(assert (= (x1814 288) (x138 288)))
(assert (x489 x1922))
(assert (= (x1705 352) (x204 352)))
(assert (x489 x1707))
(assert (= (=> (and (= x1415 (x1053 768)) (> x1018 31) (< 0 x562) (= (x1053 960) x937) (= x1872 (< x937 x1415)) (= x1323 (x1816 992))) (and (=> (and (= (x127 992) x1331) (= (x276 x1451 6) x1374) (= (x1053 960) x918) (= x229 (x127 896)) (= x677 (x1802 x1374)) (= x684 (x208 992)) (= x1023 (x521 (- x1113 x918))) (= x1154 (< 0 x684)) x1872 (= (ite (< x677 x1331) x677 x1331) x596) (= x1113 (x1053 768)) (= (x1141 (x1074 (x1569 128)) (x1074 (x1569 160)) 0) x1451) (or (not x1154) (and (or (and x675 x904 (= (>= (x1807 (x1074 274184521717934524641157099916833587200)) x508) x675) x762 (= (= x1422 (x1807 (x1074 x1798))) x904) (= x508 (x1441 (x1074 274184521717934524641157099916833587200))) (< x137 4294967296) (= x1422 (x1441 (x1074 x1798)))) (not x762)) (= x1882 (x1330 1056)) (not (> x1505 x414)) (= x1232 (x964 960)) (= x593 (x276 x847 6)) (= x1425 (x1763 896)) (= (x480 1024) x1322) (< 31 x137) (or (and x626 (= 1 x890) (< x948 4294967296)) (and (= x553 x890) (not x626))) (= x791 (x968 1056)) (not (< x1527 x1232)) (= x150 (< 0 x1322)) (or (and (= (x973 224) x1893) (= (x526 256) x1916) (= (x1804 (+ x1876 x1718)) x75) (not (> x1916 x1244)) (= x1399 (x1062 256)) (= x1625 (x1804 (+ x1905 x1140))) (= (x276 x1112 6) x1199) (= x1612 (x480 768)) (= (x1802 (x368 39)) x1406) (= x1333 (x110 896)) (= (= x1406 0) x1599) (= x1878 (x1456 224)) (= (x1062 288) x260) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1876 x1718))) (= (x276 x442 6) x399) x150 (= (x1141 (x1074 (x1754 128)) (x1074 (x1754 160)) 0) x442) (not (> x1049 x1552)) (= (x521 (- x1552 x1049)) x1760) (= (x1802 x399) x24) (= (x1025 256) x1876) (= x1905 (x731 1024)) (or x1599 (and (= (or x580 x41) x1915) (= (= x1586 x1158) x41) (= (ite (< x823 x1326) x823 x1326) x766) (or x1484 (and (= (x521 (- x1533 x1301)) x139) (= x1008 (x1141 (x1074 (x413 128)) (x1074 (x413 160)) 0)) (= x797 (x1300 224)) (not (< x1533 x1301)) (not (< x1679 x746)) (= (x276 x1008 2) x1749) (= (x1802 x1749) x1533) (= x333 (x521 (- x1679 x746))) (= (x413 320) x1301) (= (x413 320) x746) (= x1679 (x1005 (x368 39))) (not x1484))) (= x580 (= 0 x622)) (= (x1802 (x368 40)) x1146) (= (x1141 (x1074 (x644 128)) (x1074 (x644 160)) 0) x1250) (not (= 0 x1146)) (not x1599) (= (x1062 224) x876) (not (= x694 0)) (= x563 (x1300 320)) (= (x1062 256) x622) (= (x1802 (x368 39)) x1586) (= x1326 (div x1149 x1146)) (= (div x1149 x622) x1158) (= x180 (x276 x1250 2)) (= (ite x1915 1 0) x694) (= x1149 (mod (* x1586 x622) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1802 x180) x823) (= (= 0 x563) x1484))) (= (x1141 (x1074 (x1025 128)) (x1074 (x1025 160)) 0) x1618) (= (x521 (- x1244 x1916)) x1231) (= x1718 (x1338 x317)) (= (x276 x1618 8) x317) (= x1140 (x731 864)) (= (x1025 224) x1377) (= x1552 (x1025 288)) (= x1244 (x858 (x368 40))) (not (>= (+ x1140 x1905) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x521 (- x1612 x539)) x1596) (not (< x1612 x539)) (= x539 (x480 1024)) (= (x1141 (x1074 (x526 128)) (x1074 (x526 160)) 0) x1112) (= x517 (x1687 1024)) (= (x1025 256) x1049) (not (< x260 x1399))) (not x150)) (< 0 x272) (= x414 (x1294 x593)) (= (x964 1088) x1527) (not (< x196 x1882)) (= x847 (x1141 (x1074 (x1330 128)) (x1074 (x1330 160)) 0)) (= x813 (x521 (- x1527 x1232))) (> x948 31) (= (x1330 1056) x1505) (= x1052 (x521 (- x196 x1882))) (= x1798 (x1903 896)) (= x1381 (x521 (- x414 x1505))) (= (> x553 0) x626) x1154 (= (x1896 (x368 40)) x196) (= (> x272 0) x762) (= (x864 992) x471) (> x890 0))) (not (> x918 x1113))) x491) (=> (not x1872) x1614))) x1504))
(assert (= (+ 8 (x1517 x1618)) (x1517 (x276 x1618 8))))
(assert (= 2316151882 (x1517 (x368 2316151882))))
(assert (x489 x172))
(assert (= (x1517 (x276 x950 6)) (+ 6 (x1517 x950))))
(assert (= (x757 640) (x1083 640)))
(assert (x489 x1090))
(assert (= x1670 (=> (= x790 (< 0 x722)) (and (=> x790 x182) (=> (not x790) x896)))))
(assert (= (x1835 896) (x698 896)))
(assert (= (x964 352) (x480 352)))
(assert (x489 x56))
(assert (= (x1239 768) (x867 768)))
(assert (= (ite (= (x368 0) (x368 44)) 1 (x1254 (x368 44))) (x1692 (x368 44))))
(assert (= (x357 736) (x1360 736)))
(assert (= (x1349 704) (x1118 704)))
(assert (= (x1517 (x368 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x794 864) (x1594 864)))
(assert (x489 x647))
(assert (= (=> (and (= (x1591 768) x463) (= (x1591 800) x65) (= (> x463 x65) x1551)) (and (=> (not x1551) x119) (=> x1551 x943))) x1667))
(assert (= (x405 352) (x1789 352)))
(assert (x489 x1829))
(assert (= (x652 640) (x963 640)))
(assert (= (=> (and (= x1403 (> x481 x1225)) (= (x1594 992) x1443) (= x481 (x794 768)) (= x1225 (x794 960))) (and (=> x1403 x774) (=> (not x1403) x868))) x930))
(assert (= (x806 288) (x1010 288)))
(assert (x489 x831))
(assert (= (x368 629314576) (x1074 629314576)))
(assert (x489 x529))
(assert (= (x386 704) (x280 704)))
(assert (= (x1816 896) (x1053 896)))
(assert (= (x357 672) (x1360 672)))
(assert (x1124 (x644 128)))
(assert (= (x1884 352) (x1144 352)))
(assert (= (x288 1088) (x741 1088)))
(assert (= (x1280 384) (x1311 384)))
(assert (= (ite (= (x368 0) x593) 1 (x628 x593)) (x1802 x593)))
(assert (= (x250 672) (x1931 672)))
(assert (x489 x1310))
(assert (x489 x363))
(assert (x489 x927))
(assert (x489 x1240))
(assert (= (x405 672) (x1789 672)))
(assert (x1124 (x851 128)))
(assert (x489 x678))
(assert (= (=> (= (< 0 x278) x84) (and (=> (not x84) x896) (=> x84 x1737))) x789))
(assert (x1124 (x572 160)))
(assert (x489 x1198))
(assert (= (x1517 (x1074 (x353 160))) (x353 160)))
(assert (= (x1816 736) (x1053 736)))
(assert (x489 x1704))
(assert (= (x1831 768) (x1286 768)))
(assert (= (x1814 160) (x1517 (x1074 (x1814 160)))))
(assert (= (=> (and (not (= x869 1977493762)) (= (x1804 (+ x371 480)) x1815) (not (= x869 2681579215)) (or (not x1585) (and x1585 (< x1414 4294967296))) (not (= 4267106866 x869)) (= x1130 (x966 736)) (= (ite (< x1900 32) x1900 32) x1038) (not (> x1428 0)) (= x1312 (x309 256)) (not (= x869 629314576)) (= x202 (x1054 800)) (not (= x869 2484372501)) (= x67 x1150) (= x38 (< 0 x1057)) (= (x1058 (x368 10)) x1904) (= (> x1021 0) x614) (= (< 0 x171) x1859) (= x404 (x966 736)) x366 (= x118 (x1923 672)) (not (= 3092021830 x869)) (= (x628 (x368 0)) x1416) (>= 1461501637330902918203684832716283019655932542975 x423) (= x371 (x309 384)) (= x1045 x995) (<= 0 x1621) (= x761 x1642) (not (< x1694 4)) (= (x1141 (x1074 (x966 128)) (x1074 (x966 160)) 0) x1675) (not (= x869 157198259)) (not (= 3184006219 x869)) (>= x486 0) (= x1015 x569) (= x1233 x1490) (> x1453 0) (not (= x869 1401663147)) (= x961 true) (= x1398 x1493) (< 67 x1694) (= x366 (not (= x1045 x1015))) (= x1321 (x1260 288)) (= (x810 768) x240) (not (= 3567397854 x869)) (= x273 x79) (= (< 0 x1453) x1823) (= x1842 (x574 x332)) (not (> x1416 0)) (= x724 x581) (= x569 x423) (= x869 16192718) (not (= 773487949 x869)) (= x1233 x66) (or (and (< x234 4294967296) x614) (not x614)) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1694)) (not (= 31576340 x869)) (= x261 (x945 800)) (not (= 1851080549 x869)) (= (x1804 (+ x371 64)) x1224) (= x1439 (x729 736)) (= x735 (= x793 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (>= x423 0) (<= x1621 1461501637330902918203684832716283019655932542975) (= x1171 (x1373 736)) (not (= 3065339685 x869)) (= (x1168 (x1074 274184521717934524641157099916833587200)) x1437) (= (x617 736) x1828) (= x1428 (x1543 x1490 160)) (= x1215 (x248 768)) (= x518 (x1802 (x368 9))) (not (= x869 961581905)) (not (= x869 2316151882)) (= x1856 false) (= (x617 736) x620) (not (= 3963136098 x869)) (= (x166 576) x1482) (not (= 464926286 x869)) (>= x242 0) (not (> x894 10000)) (< 0 x1130) (not (= 2780307423 x869)) (not (< x1623 x1439)) (= x529 (x521 (- x1623 x1439))) (not (= x869 348537858)) (= (< 0 x44) x1585) (= x894 (x1193 704)) (= (x1193 736) x793) (= x171 (x1373 320)) (not (= 2757214935 x869)) (<= x242 1461501637330902918203684832716283019655932542975) (not (= 596573372 x869)) (not (= 1020253707 x869)) (= x1493 x1621) (not (= x869 2835717307)) (= x1623 (x499 (x368 9))) (<= x486 1461501637330902918203684832716283019655932542975) (< 0 x1437) (not (= x869 3296657447)) (<= 0 x761) (= x988 (x1804 (+ 512 x371))) (not (= 599290589 x869)) (= x1806 (x1804 (+ x1482 32))) (not (= 3504541104 x869)) (or (and x244 (= (= x1139 (x1048 (x1074 x428))) x244) x1823 x1887 (= (x946 (x1074 x428)) x1139) (= (>= (x1048 (x1074 274184521717934524641157099916833587200)) x1762) x1887) (= (x946 (x1074 274184521717934524641157099916833587200)) x1762) (< x1900 4294967296)) (not x1823)) (= x485 (x1433 768)) (= x569 x486) (not (< 0 x581)) (not (= 2869116585 x869)) (or (and (= x1708 (or x73 x187)) (= (mod (* x159 x1544) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1700) (= (x1802 (x368 44)) x159) (< 31 x1091) (= (x1697 320) x1189) (= (= 0 x1544) x42) (not (= 0 x886)) (= x646 (x521 (- x1242 x1189))) (= (= x1693 x159) x354) (= (div x817 x433) x1059) (or (and (not (= x827 0)) (= x827 (ite x764 1 0)) (= x1676 (= x39 x28)) x1787 (not (> x1663 x449)) (= x1128 (mod (* x920 x39) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x842 (x521 (- x449 x1663))) (= x449 (x1722 256)) (= (div x1128 1000000000000000000) x1663) (= (x1722 256) x39) (= x920 (x1722 224)) (= x28 (div x1128 x920)) (= (x1802 (x368 43)) x1898) (= x764 (or x919 x1676)) (= x919 (= 0 x920))) (not x1787)) (or (and (> 4294967296 x1091) x874 (= 1 x443)) (and (= x484 x443) (not x874))) (= x1431 (or x354 x42)) (= x1693 (div x1700 x1544)) (= (= x1928 x1059) x187) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1264 x1182))) (= (x521 (- x1150 x1366)) x1544) (= x1575 (x1804 (+ x1182 x1264))) (= (mod (* x1928 x433) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x817) (not (= x80 0)) (= x1498 (div x817 x80)) (= (x585 224) x1264) (= (x1867 224) x1185) (not (< x67 x1366)) (= (x1802 (x368 41)) x1366) (= (x1371 384) x1928) x285 (= (< x1185 1000000000000000000) x1787) (= (x785 288) x1242) (= x80 (x1802 (x368 9))) (= x874 (> x484 0)) (= x1182 (x1802 (x368 40))) (= x433 (x742 352)) (< 0 x443) (= x73 (= x433 0)) (= (ite x1431 1 0) x1063) (= x886 (ite x1708 1 0)) (not (= x1063 0)) (not (> x1189 x1242))) (and (not x285) (= x708 (x742 352)))) (= x295 (x521 (- x1842 x1828))) (= x285 (< 0 x518)) (= x332 (x1141 (x1074 (x617 128)) (x1074 (x617 160)) 0)) (not (= 2052391781 x869)) (or (and (= x676 (x521 (- 32 x1584))) (= (x1543 x798 x1046) x1921) (> x1921 0) (= (mod (* 8 x676) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1046) (= (x1373 352) x798) x1859 (= (x1373 320) x1584)) (not x1859)) (= x428 (x200 224)) (or (and (= 1 x262) x38 (> 4294967296 x8)) (and (= x1057 x262) (not x38))) (= x561 (x966 736)) (not (= 1888058147 x869)) (or (and (= x854 (x1802 x330)) x735 (= x330 (x1141 (x1074 (x1800 128)) (x1074 (x1800 160)) 0))) (not x735)) (not (= x869 2209625481)) (<= x761 1461501637330902918203684832716283019655932542975) (not (< x678 x404)) (not (< x1842 x1828)) (= x678 (x1802 x1675)) (= (x1717 640) x1603)) x1547) x570))
(assert (= (x701 x1257) (ite (= (x368 0) x1257) 1 (x628 x1257))))
(assert (= (x1067 640) (x1640 640)))
(assert (= (x608 640) (ite (and x38 x1720) (x3 640) (x1204 640))))
(assert (x489 x1291))
(assert (= (or (and x147 (not x158)) x1824) x1510))
(assert (= (x160 352) (x191 352)))
(assert (= (or x227 (and (not x1342) x1711)) x1582))
(assert (x489 x34))
(assert (x489 x438))
(assert (= (x90 768) (x808 768)))
(assert (x489 x1678))
(assert (= (x1300 768) (x644 768)))
(assert (x489 x263))
(assert (= (x644 224) (x1300 224)))
(assert (= (x1345 864) (x818 864)))
(assert (= (x407 640) (x323 640)))
(assert (= x1145 (and x1403 x976)))
(assert (x489 x1563))
(assert (= (x1181 800) (ite (and x702 x1519) (x205 800) (x763 800))))
(assert (x489 x178))
(assert (= (=> (and (= (x1692 x1558) x647) (= x1558 (x1141 (x1074 (x777 128)) (x1074 (x777 160)) 0)) (= x1502 (< x647 x816)) (= x816 (x777 736))) (and (=> x1502 x896) (=> (not x1502) x856))) x1184))
(assert (x489 x622))
(assert (x489 x1786))
(assert (= (x835 928) (x682 928)))
(assert (= 2209625481 (x1517 (x368 2209625481))))
(assert (x489 x1893))
(assert (x489 x1061))
(assert (= (x963 352) (x652 352)))
(assert (= (x440 768) (x320 768)))
(assert (= x162 (=> (and (= (x949 928) x1365) (= (= 20 x1245) x951) (= (x1804 (+ 1 x1365)) x1245)) (and (=> (not x951) x472) (=> x951 x359)))))
(assert (x489 x673))
(assert (x489 x765))
(assert (x489 x397))
(assert (= (x37 128) (x1517 (x1074 (x37 128)))))
(assert (= (and (not x177) x236) x435))
(assert (= (x1286 224) (x1831 224)))
(assert (= (x323 352) (x407 352)))
(assert (= (x867 864) (x1239 864)))
(assert (= (x1517 (x368 31576340)) 31576340))
(assert (x489 x190))
(assert (= (x835 352) (x682 352)))
(assert (= (x1335 640) (x934 640)))
(assert (= (x959 768) (x1845 768)))
(assert (= (x1517 (x1074 (x698 128))) (x698 128)))
(assert (x489 x1094))
(assert (= 16192718 (x1517 (x368 16192718))))
(assert (= (x1531 704) (x1539 704)))
(assert (= (x353 128) (x1517 (x1074 (x353 128)))))
(assert (= (x849 352) (x1919 352)))
(assert (= (x939 736) (x1536 736)))
(assert (= (x1360 992) (x357 992)))
(assert (x489 x1020))
(assert (= (x1336 896) (x1899 896)))
(assert (x489 x1512))
(assert (= (x1119 672) (x1102 672)))
(assert (= (x368 348537858) (x1074 348537858)))
(assert (= (x1329 352) (x1142 352)))
(assert (= (x1275 352) (x1738 352)))
(assert (= (x1564 704) (x128 704)))
(assert (x489 x1138))
(assert (= (ite (= x317 (x368 0)) 1 (x628 x317)) (x1802 x317)))
(assert (= (x701 x846) (ite (= (x368 0) x846) 1 (x628 x846))))
(assert (x489 x500))
(assert (= (and x936 (not x1253)) x884))
(assert (x489 x978))
(assert (= (x288 864) (x741 864)))
(assert (x489 x1718))
(assert (x489 x483))
(assert (= x1212 (and x1735 x892)))
(assert (= (x346 672) (x763 672)))
(assert (x489 x660))
(assert (x489 x210))
(assert (= (x114 128) (x1517 (x1074 (x114 128)))))
(assert (= (x939 704) (x1536 704)))
(assert (= x868 x1485))
(assert (x489 x1018))
(assert (x489 x1324))
(assert (x489 x8))
(assert (= (x1335 704) (x934 704)))
(assert (= (x1884 768) (x1144 768)))
(assert (x489 x1625))
(assert (= (or x1510 (and x976 (not x1403)) (and x855 x1470)) x1638))
(assert (= (x1360 768) (x357 768)))
(assert (= (x682 1056) (x835 1056)))
(assert (= (x1789 704) (x405 704)))
(assert (= (and (not x855) x1470) x1824))
(assert (x489 x1886))
(assert (=> (>= 10000 (x572 128)) (= (x1074 (x572 128)) (x368 (x572 128)))))
(assert (x489 x113))
(assert (x489 x202))
(assert (= (x608 800) (ite (and x38 x1720) (x3 800) (x1204 800))))
(assert (x489 x1465))
(assert (x489 x1429))
(assert (x489 x802))
(assert (= x198 (or x466 (and (not x1742) x770))))
(assert (= (=> (and (= x606 (> x704 x1240)) (= (x293 1024) x704) (= x1240 (x293 768))) (and (=> (not x606) x739) (=> x606 x896))) x1174))
(assert (= (ite (= (x368 44) (x368 0)) 1 (x628 (x368 44))) (x1802 (x368 44))))
(assert (x489 x560))
(assert (x489 x1921))
(assert (x489 x463))
(assert (= (x1847 160) (x1517 (x1074 (x1847 160)))))
(assert (x489 x1040))
(assert (= (x1845 640) (x959 640)))
(assert (x489 x1390))
(assert (x489 x96))
(assert (= x401 (and x468 (not x351))))
(assert (= (x1335 672) (x934 672)))
(assert (= x1471 (=> (and (= (x1877 416) x970) (= x1026 (x521 (- x1 x1155))) (= (x624 384) x736) (= (< 0 x736) x1753)) (and (=> x1753 x566) (=> (not x1753) x1002)))))
(assert (x489 x1296))
(assert (x489 x1911))
(assert (= (x1083 864) (x757 864)))
(assert (= (x1299 672) (x164 672)))
(assert (x489 x1120))
(assert (x489 x1098))
(assert (= (x903 672) (x21 672)))
(assert (x489 x474))
(assert (= (x1062 896) (x1754 896)))
(assert (= (x288 704) (x741 704)))
(assert (= (x312 768) (x1230 768)))
(assert (x489 x1188))
(assert (= (x1517 (x1074 (x1754 160))) (x1754 160)))
(assert (x489 x1171))
(assert (= (ite (and x38 x1720) (x3 704) (x1204 704)) (x608 704)))
(assert (x489 x1658))
(assert (x489 x577))
(assert (= x642 (=> (and (= x1164 (x903 704)) (= (> x1164 10000) x1195) (= (x21 640) x1435)) (and (=> (and (or (not x1379) (and (= (x1692 x1554) x163) (= (x1141 (x1074 (x302 128)) (x1074 (x302 160)) 0) x1554) x1379)) (= x85 (x903 736)) (= x1379 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x85)) (not x1195)) x1184) (=> x1195 x896)))))
(assert (= (x1299 768) (x164 768)))
(assert (= (x1692 x493) (ite (= x493 (x368 0)) 1 (x1254 x493))))
(assert (= (ite (and x1872 x1154 x670) (ite (and x670 x762 x1154 x1872) (x1807 (x1074 x509)) (x1441 (x1074 x509))) (x1441 (x1074 x509))) (x155 (x1074 x509))))
(assert (x489 x349))
(assert (= (x288 896) (x741 896)))
(assert (= (and x836 x1248) x549))
(assert (=> (>= 10000 x1040) (= (x1074 x1040) (x368 x1040))))
(assert (= (x644 128) (x1517 (x1074 (x644 128)))))
(assert (x489 x254))
(assert (= (x737 128) (x1517 (x1074 (x737 128)))))
(assert (= (x1802 x1749) (ite (= (x368 0) x1749) 1 (x628 x1749))))
(assert (= (ite (= x1196 (x368 0)) 1 (x628 x1196)) (x1802 x1196)))
(assert (= (and (not x1147) x104) x1444))
(assert (= (x1144 672) (x1884 672)))
(assert (x489 x517))
(assert (= (x208 992) x596))
(assert (x489 x894))
(assert (= (x639 928) (x1127 928)))
(assert (= (x1899 1056) (x1336 1056)))
(assert (= (x1517 (x1074 (x737 160))) (x737 160)))
(assert (= (and (not x889) x1468) x468))
(assert (x489 x1080))
(assert (x489 x1436))
(assert (= 0 (x1820 320)))
(assert (x489 x1805))
(assert (= 274184521717934524641157099916833587200 (x1517 (x368 274184521717934524641157099916833587200))))
(assert (x489 x484))
(assert (= (x1360 704) (x357 704)))
(assert (= (x1835 768) (x698 768)))
(assert (= (x644 1056) (x1300 1056)))
(assert (= (ite (= (x368 0) (x1074 x1879)) 1 (x1254 (x1074 x1879))) (x1692 (x1074 x1879))))
(assert (= (x941 768) (x303 768)))
(assert (= (x208 928) (x1569 928)))
(assert (=> (>= 10000 (x966 128)) (= (x1074 (x966 128)) (x368 (x966 128)))))
(assert (= (x763 736) (x346 736)))
(assert (= (x1531 320) (x1539 320)))
(assert (= x367 (=> (and (= x43 (x1804 (+ x1020 x389))) (= x1442 (x353 256)) (= (x353 288) x1741) (= (> x1442 x1741) x1927)) (and (=> (not x1927) x1086) (=> x1927 x896)))))
(assert (x489 x886))
(assert (x489 x1422))
(assert (= (ite (and x1582 x434) (x1565 (x1074 274184521717934524641157099916833587200)) (x1348 (x1074 274184521717934524641157099916833587200))) (x1680 (x1074 274184521717934524641157099916833587200))))
(assert (= (x1335 736) (x934 736)))
(assert (x489 x838))
(assert (x489 x891))
(assert (= (x1004 768) (x768 768)))
(assert (x489 x1701))
(assert (= (x1903 320) (x864 320)))
(assert (=> (<= (x1899 128) 10000) (= (x1074 (x1899 128)) (x368 (x1899 128)))))
(assert (x489 x781))
(assert (= (x727 640) (x1055 640)))
(assert (x489 x1137))
(assert (x1124 x695))
(assert (= x115 (and x935 x1628)))
(assert (x489 x1527))
(assert (= (x407 768) (x323 768)))
(assert (= (x572 640) (x218 640)))
(assert (= (x1517 (x1074 (x526 128))) (x526 128)))
(assert (x489 x1522))
(assert (x489 x146))
(assert (= (x768 864) (x1004 864)))
(assert (=> (>= 10000 (x661 128)) (= (x1074 (x661 128)) (x368 (x661 128)))))
(assert (x489 x988))
(assert (= x896 (=> (= x758 true) x997)))
(assert (=> (>= 10000 (x353 128)) (= (x1074 (x353 128)) (x368 (x353 128)))))
(assert (= (x1213 352) (x1135 352)))
(assert (x489 x797))
(assert (x489 x1182))
(assert (= (x763 768) (x346 768)))
(assert (= (and x1713 (not x1834)) x1537))
(assert (= (and x1122 x1765) x1263))
(assert (x489 x1637))
(assert (= (x849 320) (x1919 320)))
(assert (= (x293 736) (x473 736)))
(assert (=> (>= 10000 (x114 160)) (= (x1074 (x114 160)) (x368 (x114 160)))))
(assert (= (x1692 x282) (ite (= (x368 0) x282) 1 (x1254 x282))))
(assert (x489 x1368))
(assert (= (x1517 (x368 1977493762)) 1977493762))
(assert (x489 x171))
(assert (= (ite (and x844 x1602 x1864) (ite (and x611 x1864 x1602 x844) (x1759 (x1074 x428)) (x1441 (x1074 x428))) (x1441 (x1074 x428))) (x1725 (x1074 x428))))
(assert (x489 x1380))
(assert (x489 x812))
(assert (= (x164 864) (x1299 864)))
(assert (x1124 (x966 128)))
(assert (x489 x759))
(assert (= (=> (and (= (x1692 (x368 41)) x1344) (= x363 (x1804 (+ x349 x1918))) (= x406 (x280 288)) (= (< x474 x1344) x733)) (and (=> (not x733) x322) (=> x733 x896))) x122))
(assert (= (x208 768) (x1569 768)))
(assert (x489 x1146))
(assert (= (x1074 2757214935) (x368 2757214935)))
(assert (= (ite (and x1519 x702) (x205 736) (x763 736)) (x1181 736)))
(assert (= (x1738 672) (x1275 672)))
(assert (= (x1517 (x368 1888058147)) 1888058147))
(assert (x489 x1576))
(assert (= x259 (x90 896)))
(assert (= x813 (x480 1056)))
(assert (= (and x845 x1703) x670))
(assert (=> (<= (x373 128) 10000) (= (x368 (x373 128)) (x1074 (x373 128)))))
(assert (x489 x376))
(assert (x489 x260))
(assert (= (or (and (not x1872) x670) (and x1880 x153) x1214) x227))
(assert (x489 x1430))
(assert (x489 x1103))
(assert (= (x966 640) (x742 640)))
(assert (= (x1135 704) (x1213 704)))
(assert (x1124 (x413 128)))
(assert (and (= (x217 2 100) 1267650600228229401496703205376) (= 2993155353253689176481146537402947624255349848014848 (x217 2 171)) (= 170141183460469231731687303715884105728 (x217 2 127)) (= (x217 2 95) 39614081257132168796771975168) (= (x217 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x217 2 35) 34359738368) (= (x217 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x217 2 158) 365375409332725729550921208179070754913983135744) (= 9444732965739290427392 (x217 2 73)) (= (x217 2 42) 4398046511104) (= 348449143727040986586495598010130648530944 (x217 2 138)) (= 32 (x217 2 5)) (= (x217 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x217 2 0) 1) (= (x217 2 24) 16777216) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x217 2 253)) (= 2535301200456458802993406410752 (x217 2 101)) (= (x217 2 75) 37778931862957161709568) (= (x217 2 103) 10141204801825835211973625643008) (= 23945242826029513411849172299223580994042798784118784 (x217 2 174)) (= 5708990770823839524233143877797980545530986496 (x217 2 152)) (= 196159429230833773869868419475239575503198607639501078528 (x217 2 187)) (= (x217 2 124) 21267647932558653966460912964485513216) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x217 2 231)) (= (x217 2 188) 392318858461667547739736838950479151006397215279002157056) (= 512 (x217 2 9)) (= (x217 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x217 2 157) 182687704666362864775460604089535377456991567872) (= (x217 2 84) 19342813113834066795298816) (= 713623846352979940529142984724747568191373312 (x217 2 149)) (= 2361183241434822606848 (x217 2 71)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x217 2 237)) (= 604462909807314587353088 (x217 2 79)) (= 2923003274661805836407369665432566039311865085952 (x217 2 161)) (= (x217 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x217 2 15) 32768) (= (x217 2 111) 2596148429267413814265248164610048) (= (x217 2 6) 64) (= (x217 2 46) 70368744177664) (= 562949953421312 (x217 2 49)) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x217 2 240)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x217 2 249)) (= 18889465931478580854784 (x217 2 74)) (= (x217 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 3291009114642412084309938365114701009965471731267159726697218048 (x217 2 211)) (= 2147483648 (x217 2 31)) (= 83076749736557242056487941267521536 (x217 2 116)) (= (x217 2 80) 1208925819614629174706176) (= 210624583337114373395836055367340864637790190801098222508621955072 (x217 2 217)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x217 2 254)) (= (x217 2 131) 2722258935367507707706996859454145691648) (= (x217 2 48) 281474976710656) (= (x217 2 109) 649037107316853453566312041152512) (= 147573952589676412928 (x217 2 67)) (= 316912650057057350374175801344 (x217 2 98)) (= (x217 2 155) 45671926166590716193865151022383844364247891968) (= (x217 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x217 2 168) 374144419156711147060143317175368453031918731001856) (= (x217 2 121) 2658455991569831745807614120560689152) (= 43556142965880123323311949751266331066368 (x217 2 135)) (= (x217 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x217 2 243)) (= 5192296858534827628530496329220096 (x217 2 112)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x217 2 216)) (= (x217 2 37) 137438953472) (= (x217 2 104) 20282409603651670423947251286016) (= 91343852333181432387730302044767688728495783936 (x217 2 156)) (= (x217 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x217 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x217 2 132) 5444517870735015415413993718908291383296) (= (x217 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x217 2 255)) (= 47890485652059026823698344598447161988085597568237568 (x217 2 175)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x217 2 210)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x217 2 220)) (= (x217 2 22) 4194304) (= 2048 (x217 2 11)) (= (x217 2 97) 158456325028528675187087900672) (= 187072209578355573530071658587684226515959365500928 (x217 2 167)) (= (x217 2 180) 1532495540865888858358347027150309183618739122183602176) (= 5986310706507378352962293074805895248510699696029696 (x217 2 172)) (= (x217 2 63) 9223372036854775808) (= 8796093022208 (x217 2 43)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x217 2 245)) (= 2417851639229258349412352 (x217 2 81)) (= 18014398509481984 (x217 2 54)) (= (x217 2 126) 85070591730234615865843651857942052864) (= 4294967296 (x217 2 32)) (= 1180591620717411303424 (x217 2 70)) (= 44601490397061246283071436545296723011960832 (x217 2 145)) (= (x217 2 39) 549755813888) (= 262144 (x217 2 18)) (= (x217 2 154) 22835963083295358096932575511191922182123945984) (= 1496577676626844588240573268701473812127674924007424 (x217 2 170)) (= (x217 2 115) 41538374868278621028243970633760768) (= (x217 2 110) 1298074214633706907132624082305024) (= (x217 2 62) 4611686018427387904) (= (x217 2 140) 1393796574908163946345982392040522594123776) (= 295147905179352825856 (x217 2 68)) (= (x217 2 21) 2097152) (= (x217 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x217 2 137) 174224571863520493293247799005065324265472) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x217 2 221)) (= (x217 2 78) 302231454903657293676544) (= 1569275433846670190958947355801916604025588861116008628224 (x217 2 190)) (= 131072 (x217 2 17)) (= (x217 2 186) 98079714615416886934934209737619787751599303819750539264) (= 205688069665150755269371147819668813122841983204197482918576128 (x217 2 207)) (= 680564733841876926926749214863536422912 (x217 2 129)) (= (x217 2 160) 1461501637330902918203684832716283019655932542976) (= 696898287454081973172991196020261297061888 (x217 2 139)) (= (x217 2 69) 590295810358705651712) (= 87112285931760246646623899502532662132736 (x217 2 136)) (= (x217 2 12) 4096) (= 10889035741470030830827987437816582766592 (x217 2 133)) (= (x217 2 76) 75557863725914323419136) (= (x217 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x217 2 27) 134217728) (= (x217 2 165) 46768052394588893382517914646921056628989841375232) (= 18446744073709551616 (x217 2 64)) (= (x217 2 60) 1152921504606846976) (= 3213876088517980551083924184682325205044405987565585670602752 (x217 2 201)) (= (x217 2 66) 73786976294838206464) (= (x217 2 44) 17592186044416) (= 102844034832575377634685573909834406561420991602098741459288064 (x217 2 206)) (= 2251799813685248 (x217 2 51)) (= 22300745198530623141535718272648361505980416 (x217 2 144)) (= 65536 (x217 2 16)) (= 68719476736 (x217 2 36)) (= 36893488147419103232 (x217 2 65)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x217 2 226)) (= 35184372088832 (x217 2 45)) (= 89202980794122492566142873090593446023921664 (x217 2 146)) (= 21778071482940061661655974875633165533184 (x217 2 134)) (= 166153499473114484112975882535043072 (x217 2 117)) (= 356811923176489970264571492362373784095686656 (x217 2 148)) (= 256 (x217 2 8)) (= 383123885216472214589586756787577295904684780545900544 (x217 2 178)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x217 2 251)) (= (x217 2 77) 151115727451828646838272) (= (x217 2 25) 33554432) (= (x217 2 52) 4503599627370496) (= (x217 2 151) 2854495385411919762116571938898990272765493248) (= 16384 (x217 2 14)) (= (x217 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 1427247692705959881058285969449495136382746624 (x217 2 150)) (= 144115188075855872 (x217 2 57)) (= 274877906944 (x217 2 38)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x217 2 234)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x217 2 214)) (= (x217 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x217 2 228)) (= (x217 2 93) 9903520314283042199192993792) (= 803469022129495137770981046170581301261101496891396417650688 (x217 2 199)) (= 10384593717069655257060992658440192 (x217 2 113)) (= 81129638414606681695789005144064 (x217 2 106)) (= (x217 2 4) 16) (= (x217 2 182) 6129982163463555433433388108601236734474956488734408704) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x217 2 230)) (= (x217 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x217 2 159) 730750818665451459101842416358141509827966271488) (= (x217 2 94) 19807040628566084398385987584) (= 288230376151711744 (x217 2 58)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x217 2 242)) (= (x217 2 142) 5575186299632655785383929568162090376495104) (= 51422017416287688817342786954917203280710495801049370729644032 (x217 2 205)) (= (x217 2 30) 1073741824) (= (x217 2 59) 576460752303423488) (= 332306998946228968225951765070086144 (x217 2 118)) (= (x217 2 85) 38685626227668133590597632) (= (x217 2 120) 1329227995784915872903807060280344576) (= 9007199254740992 (x217 2 53)) (= 5070602400912917605986812821504 (x217 2 102)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x217 2 247)) (= 8388608 (x217 2 23)) (= 536870912 (x217 2 29)) (= 1361129467683753853853498429727072845824 (x217 2 130)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x217 2 244)) (= (x217 2 26) 67108864) (= (x217 2 123) 10633823966279326983230456482242756608) (= 1024 (x217 2 10)) (= 154742504910672534362390528 (x217 2 87)) (= (x217 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x217 2 122) 5316911983139663491615228241121378304) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x217 2 235)) (= 1048576 (x217 2 20)) (= (x217 2 179) 766247770432944429179173513575154591809369561091801088) (= 2305843009213693952 (x217 2 61)) (= (x217 2 1) 2) (= (x217 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 5846006549323611672814739330865132078623730171904 (x217 2 162)) (= 324518553658426726783156020576256 (x217 2 108)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x217 2 250)) (= 42535295865117307932921825928971026432 (x217 2 125)) (= (x217 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x217 2 50) 1125899906842624) (= 8 (x217 2 3)) (= (x217 2 189) 784637716923335095479473677900958302012794430558004314112) (= 1099511627776 (x217 2 40)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x217 2 256)) (= 4835703278458516698824704 (x217 2 82)) (= 25108406941546723055343157692830665664409421777856138051584 (x217 2 194)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x217 2 227)) (= 12259964326927110866866776217202473468949912977468817408 (x217 2 183)) (= (x217 2 107) 162259276829213363391578010288128) (= (x217 2 28) 268435456) (= 95780971304118053647396689196894323976171195136475136 (x217 2 176)) (= (x217 2 153) 11417981541647679048466287755595961091061972992) (= 2199023255552 (x217 2 41)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x217 2 248)) (= 36028797018963968 (x217 2 55)) (= (x217 2 2) 4) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x217 2 232)) (= (x217 2 128) 340282366920938463463374607431768211456) (= (x217 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x217 2 223)) (= 20769187434139310514121985316880384 (x217 2 114)) (= (x217 2 33) 8589934592) (= (x217 2 166) 93536104789177786765035829293842113257979682750464) (= 1606938044258990275541962092341162602522202993782792835301376 (x217 2 200)) (= (x217 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x217 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 9671406556917033397649408 (x217 2 83)) (= (x217 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 842498333348457493583344221469363458551160763204392890034487820288 (x217 2 219)) (= (x217 2 96) 79228162514264337593543950336) (= 17179869184 (x217 2 34)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x217 2 224)) (= 524288 (x217 2 19)) (= (x217 2 99) 633825300114114700748351602688) (= (x217 2 163) 11692013098647223345629478661730264157247460343808) (= 200867255532373784442745261542645325315275374222849104412672 (x217 2 197)) (= 8192 (x217 2 13)) (= (x217 2 164) 23384026197294446691258957323460528314494920687616) (= 748288838313422294120286634350736906063837462003712 (x217 2 169)) (= 140737488355328 (x217 2 47)) (= 4951760157141521099596496896 (x217 2 92)) (= 178405961588244985132285746181186892047843328 (x217 2 147)) (= (x217 2 177) 191561942608236107294793378393788647952342390272950272) (= 2475880078570760549798248448 (x217 2 91)) (= (x217 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x217 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 618970019642690137449562112 (x217 2 89)) (= (x217 2 181) 3064991081731777716716694054300618367237478244367204352) (= 6427752177035961102167848369364650410088811975131171341205504 (x217 2 202)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x217 2 252)) (= (x217 2 143) 11150372599265311570767859136324180752990208) (= (x217 2 90) 1237940039285380274899124224) (= 4722366482869645213696 (x217 2 72)) (= 128 (x217 2 7)) (= (x217 2 105) 40564819207303340847894502572032) (= 309485009821345068724781056 (x217 2 88)) (= 664613997892457936451903530140172288 (x217 2 119)) (= (x217 2 141) 2787593149816327892691964784081045188247552) (= 77371252455336267181195264 (x217 2 86)) (= (x217 2 173) 11972621413014756705924586149611790497021399392059392) (= 72057594037927936 (x217 2 56))))
(assert (= (x1074 31576340) (x368 31576340)))
(assert (= (x567 864) (x1041 864)))
(assert (x489 x1455))
(assert (= (x1074 3184006219) (x368 3184006219)))
(assert (x1124 x428))
(assert (x489 x692))
(assert (= (x1517 (x1074 (x97 128))) (x97 128)))
(assert (=> (>= 10000 (x97 160)) (= (x368 (x97 160)) (x1074 (x97 160)))))
(assert (= (x1517 (x368 3092021830)) 3092021830))
(assert (= (x1536 864) (x939 864)))
(assert (x489 x1085))
(assert (= (x1564 736) (x128 736)))
(assert (x489 x1117))
(assert (= (x1692 x1281) (ite (= (x368 0) x1281) 1 (x1254 x1281))))
(assert (x489 x67))
(assert (= x1443 (x794 960)))
(assert (= (x701 (x1074 x222)) (ite (= (x368 0) (x1074 x222)) 1 (x628 (x1074 x222)))))
(assert (x489 x1068))
(assert (x489 x1109))
(assert (= (x1127 1024) (x639 1024)))
(assert (= (x1157 768) (x801 768)))
(assert (= (ite (and x1864 x844 x1602) (ite (and x1602 x611 x844 x1864) (x1759 (x1074 274184521717934524641157099916833587200)) (x1441 (x1074 274184521717934524641157099916833587200))) (x1441 (x1074 274184521717934524641157099916833587200))) (x1725 (x1074 274184521717934524641157099916833587200))))
(assert (x489 x1836))
(assert (x489 x1668))
(assert (x489 x1866))
(assert (x489 x700))
(assert (= (x1280 352) (x1311 352)))
(assert (= (x1127 640) (x639 640)))
(assert (x489 x1391))
(assert (= (x741 352) (x288 352)))
(assert (= (x1903 960) (x864 960)))
(assert (x489 x228))
(assert (x489 x669))
(assert (= (x1300 256) (x644 256)))
(assert (x489 x1712))
(assert (x489 x1507))
(assert (x489 x956))
(assert (= (and x201 x906) x226))
(assert (x489 x539))
(assert (x489 x1472))
(assert (= (=> (and (= (x1142 928) x1019) (= x158 (> x397 0)) (= (x1692 (x1074 x62)) x738) (= (x1329 896) x397) (= x62 (x1804 (+ 17 x1019)))) (and (=> (not x158) x1485) (=> (and x158 (= x714 (> x1388 0)) (or (and (= x1006 x1388) (not x714)) (and x714 (= x1006 1) (< x1770 4294967296)))) x477))) x943))
(assert (= (x1517 (x1074 (x302 160))) (x302 160)))
(assert (= (or (and x1590 x1454) (and (not x605) x621) (and x653 x1671)) x236))
(assert (x489 x743))
(assert (= (ite (= (x368 0) (x1074 x106)) 1 (x628 (x1074 x106))) (x1802 (x1074 x106))))
(assert (= (x288 672) (x741 672)))
(assert (x489 x1493))
(assert (= (x373 160) (x1517 (x1074 (x373 160)))))
(assert (x489 x52))
(assert (x489 x279))
(assert (= (x90 320) (x808 320)))
(assert (= (x1517 (x276 x1008 2)) (+ (x1517 x1008) 2)))
(assert (= x1769 (and (not x170) x672)))
(assert (= (x768 352) (x1004 352)))
(assert (x489 x1312))
(assert (x489 x207))
(assert (= (x867 704) (x1239 704)))
(assert (= (x785 640) (x1867 640)))
(assert (x489 x1739))
(assert (=> (<= x222 10000) (= (x368 x222) (x1074 x222))))
(assert (= (x786 640) (x269 640)))
(assert (= (=> (and (= x1253 (< x1121 x1284)) (= x1121 (x778 (x368 9))) (= (x901 736) x1284)) (and (=> x1253 x896) (=> (not x1253) x775))) x119))
(assert (= (x155 (x1074 274184521717934524641157099916833587200)) (ite (and x1154 x670 x1872) (ite (and x1872 x1154 x670 x762) (x1807 (x1074 274184521717934524641157099916833587200)) (x1441 (x1074 274184521717934524641157099916833587200))) (x1441 (x1074 274184521717934524641157099916833587200)))))
(assert (= x216 (=> (and (= x1626 x758) (= (not x1626) x528) (= x712 x528)) x712)))
(assert (x489 x1596))
(assert (= (x1903 672) (x864 672)))
(assert (= (x741 960) (x288 960)))
(assert (= (x949 640) (x1706 640)))
(assert (= (div x10 (x217 2 x852)) (x1543 x10 x852)))
(assert (= (x1802 x1374) (ite (= (x368 0) x1374) 1 (x628 x1374))))
(assert (= (x624 352) (x1877 352)))
(assert (= (x757 672) (x1083 672)))
(assert (= (x1204 320) (x1733 320)))
(assert (= (x440 352) (x320 352)))
(assert (= (x1845 864) (x959 864)))
(assert (= (x1845 352) (x959 352)))
(assert (= (x1300 320) x766))
(assert (= (and x1665 x45) x828))
(assert (x489 x1633))
(assert (x489 x827))
(assert (= x672 (and x1367 x690)))
(assert (x489 x183))
(assert (= (x1831 320) (x1286 320)))
(assert (= (ite (and x1154 x1872 x670) (ite (and x762 x1154 x1872 x670) (x1807 (x1074 x1040)) (x1441 (x1074 x1040))) (x1441 (x1074 x1040))) (x155 (x1074 x1040))))
(assert (= x12 (=> (= (> x1707 0) x1574) (and (=> x1574 x1107) (=> (not x1574) x896)))))
(assert (= (x741 768) (x288 768)))
(assert (= x1578 (=> (and (= (x1141 (x1074 (x572 128)) (x1074 (x572 160)) 0) x776) (= (x218 288) x711) (= (x1869 1024) x1197) (= (x1804 (+ x149 x987)) x1808) (= (x49 896) x1436) (= (x276 x776 6) x282) (= x249 (x885 224)) (= x550 (x218 256)) (= x991 (> x550 x711)) (= x1327 (x1692 x282))) (and (=> x991 x896) (=> (not x991) x754)))))
(assert (= (x1877 768) (x624 768)))
(assert (x489 x1777))
(assert (x489 x9))
(assert (x1124 (x373 160)))
(assert (x489 x724))
(assert (x489 x130))
(assert (x489 x1347))
(assert (= (x293 672) (x473 672)))
(assert (x489 x1664))
(assert (= x1779 (or (and x1263 (not x728)) (and x450 (not x1341)))))
(assert (x489 x627))
(assert (= x86 (=> (= x960 (> x1770 31)) (and (=> (not x960) x896) (=> x960 x930)))))
(assert (x489 x1788))
(assert (= x450 (or (and x377 (not x686)) (and x1194 (not x1753)))))
(assert (= (x1903 896) (x864 896)))
(assert (= (x1899 224) (x1336 224)))
(assert (= (x303 640) (x941 640)))
(assert (x489 x224))
(assert (=> (>= 10000 (x1847 160)) (= (x1074 (x1847 160)) (x368 (x1847 160)))))
(assert (= (x90 736) (x808 736)))
(assert (x489 x451))
(assert (x489 x1904))
(assert (= (x1816 352) (x1053 352)))
(assert (x489 x1486))
(assert (= (=> (and (= x156 (x1666 928)) (= x1925 (x253 896)) (= x1742 (< 0 x1925)) (= (x1804 (+ x156 17)) x695) (= x1404 (x701 (x1074 x695)))) (and (=> (and (= (> x1082 0) x123) x1742 (or (and (= x9 x1082) (not x123)) (and x123 (= x9 1) (< x1870 4294967296)))) x1520) (=> (not x1742) x1732))) x1757))
(assert (= (x1895 128) (x1517 (x1074 (x1895 128)))))
(assert (x489 x516))
(assert (= (x1536 672) (x939 672)))
(assert (= (x1835 736) (x698 736)))
(assert (= (x1517 (x368 1020253707)) 1020253707))
(assert (= (x639 320) (x1127 320)))
(assert (= x1435 (x903 736)))
(assert (x489 x813))
(assert (= (x864 704) (x1903 704)))
(assert (x489 x676))
(assert (= (x1157 896) x1664))
(assert (x489 x823))
(assert (= (x1569 960) (x208 960)))
(assert (= (x1845 928) (x959 928)))
(assert (= (x1010 384) (x806 384)))
(assert (x489 x1432))
(assert (= (x808 864) (x90 864)))
(assert (x489 x746))
(assert (x489 x1728))
(assert (x489 x911))
(assert (x1124 (x1899 160)))
(assert (x1124 (x1814 160)))
(assert (=> (<= (x959 128) 10000) (= (x368 (x959 128)) (x1074 (x959 128)))))
(assert (= (x1345 224) (x818 224)))
(assert (= (x624 384) x970))
(assert (= (div x1782 (x217 2 x1170)) (x1543 x1782 x1170)))
(assert (=> (>= 10000 x1891) (= (x368 x1891) (x1074 x1891))))
(assert (and (= 100000000000000000000000000000 (x217 10 29)) (= (x217 10 12) 1000000000000) (= 1000000000000000000000000 (x217 10 24)) (= (x217 10 26) 100000000000000000000000000) (= 10000000000000000000000 (x217 10 22)) (= 10000000000000000000000000000 (x217 10 28)) (= 100000000000 (x217 10 11)) (= (x217 10 1) 10) (= 1000000000 (x217 10 9)) (= (x217 10 10) 10000000000) (= (x217 10 30) 1000000000000000000000000000000) (= 10000000000000 (x217 10 13)) (= (x217 10 17) 100000000000000000) (= 1000000 (x217 10 6)) (= 100000000000000000000 (x217 10 20)) (= 10000000000000000 (x217 10 16)) (= (x217 10 2) 100) (= (x217 10 21) 1000000000000000000000) (= (x217 10 15) 1000000000000000) (= 1000 (x217 10 3)) (= (x217 10 5) 100000) (= 10000 (x217 10 4)) (= 100000000000000000000000 (x217 10 23)) (= 10000000000000000000 (x217 10 19)) (= (x217 10 14) 100000000000000) (= (x217 10 8) 100000000) (= (x217 10 27) 1000000000000000000000000000) (= (x217 10 25) 10000000000000000000000000) (= 1000000000000000000 (x217 10 18)) (= 10000000 (x217 10 7)) (= (x217 10 0) 1)))
(assert (= (x21 704) (x903 704)))
(assert (x489 x118))
(assert (= (x1286 928) (x1831 928)))
(assert (x1124 (x748 160)))
(assert (= x931 (=> (and (= (x1686 352) x1782) (= x1210 (> (x1543 x1782 x1170) 0)) (= (x521 (- 32 x1137)) x1736) (= (mod (* x1736 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1170) (= (x1686 320) x1137)) (and (=> (not x1210) x896) (=> x1210 x612)))))
(assert (x489 x1495))
(assert (= (x741 736) (x288 736)))
(assert (= x700 (x1102 960)))
(assert (= x1245 (x1706 928)))
(assert (x489 x873))
(assert (= (x473 352) (x293 352)))
(assert (= (x368 596573372) (x1074 596573372)))
(assert (= (x966 160) (x1517 (x1074 (x966 160)))))
(assert (= (x1074 2681579215) (x368 2681579215)))
(assert (= (x1074 1000000000000000000) (x368 1000000000000000000)))
(assert (= x1700 (x1867 224)))
(assert (x489 x1392))
(assert (x489 x732))
(assert (= (x1706 768) (x949 768)))
(assert (= (x959 896) (x1845 896)))
(assert (x489 x1889))
(assert (x1124 (x572 128)))
(assert (= (x806 352) (x1010 352)))
(assert (= (x1517 (x1074 (x1931 160))) (x1931 160)))
(assert (= (ite (= x23 (x368 0)) 1 (x628 x23)) (x701 x23)))
(assert (= (ite (= (x368 0) x197) 1 (x628 x197)) (x1802 x197)))
(assert (= x1086 (=> (and (= (x521 (- x1741 x1442)) x1159) (= (x748 256) x771) (= x1929 (x353 224)) (= x446 (x1818 (x368 40))) (= x1024 (> x771 x446)) (= (x276 x154 6) x1902) (= x154 (x1141 (x1074 (x748 128)) (x1074 (x748 160)) 0))) (and (=> (and (= x1200 (x521 (- x446 x771))) (not x1024)) x536) (=> x1024 x896)))))
(assert (x489 x821))
(assert (= x255 (=> (and (= x1766 (< x664 x1500)) (= (div x52 1000000000000000000) x1500)) (and (=> x1766 x896) (=> (and (not x1766) (= x540 (x521 (- x664 x1500)))) x1588)))))
(assert (= (x1118 928) (x1349 928)))
(assert (x489 x334))
(assert (= (x253 768) (x1666 768)))
(assert (= x223 (=> (and (= x1383 (x1692 x1281)) (= (< x1383 x264) x1282) (= (x276 x343 2) x1281) (= (x1141 (x1074 (x114 128)) (x1074 (x114 160)) 0) x343) (= (x114 320) x264) (= (x1336 224) x759)) (and (=> x1282 x896) (=> (not x1282) x1359)))))
(assert (= (x1299 352) (x164 352)))
(assert (= (x1884 736) (x1144 736)))
(assert (= (x218 288) x1327))
(assert (x489 x1852))
(assert (x489 x1375))
(assert (x489 x1268))
(assert (= (x386 640) (x280 640)))
(assert (= (x386 736) (x280 736)))
(assert (= (x1738 640) (x1275 640)))
(assert (x489 x816))
(assert (= (x1907 (x1074 x1891)) (ite (and (not x1858) x1615) (ite (and x892 x1735 x1606) (x1172 (x1074 x1891)) (x1680 (x1074 x1891))) (x1680 (x1074 x1891)))))
(assert (= (x1845 672) (x959 672)))
(assert (= (x368 3504541104) (x1074 3504541104)))
(assert (x489 x1729))
(assert (= (x368 2484372501) (x1074 2484372501)))
(assert (= (x1329 768) (x1142 768)))
(assert (x489 x1046))
(assert (= (x250 704) (x1931 704)))
(assert (x1124 x1879))
(assert (= (x1802 (x1074 x1033)) (ite (= (x368 0) (x1074 x1033)) 1 (x628 (x1074 x1033)))))
(assert (= (x21 320) (x903 320)))
(assert (= (and x437 (not x974)) x1194))
(assert (x489 x1446))
(assert (=> (<= (x617 128) 10000) (= (x1074 (x617 128)) (x368 (x617 128)))))
(assert (x489 x1604))
(assert (x489 x663))
(assert (x489 x769))
(assert (= (x661 160) (x1517 (x1074 (x661 160)))))
(assert (x489 x1890))
(assert (= (x959 320) (x1845 320)))
(assert (= (x567 352) (x1041 352)))
(assert (= (x269 768) (x786 768)))
(assert (= (x867 672) (x1239 672)))
(assert (x489 x1579))
(assert (=> (>= 10000 (x1025 128)) (= (x368 (x1025 128)) (x1074 (x1025 128)))))
(assert (= (x608 672) (ite (and x1720 x38) (x3 672) (x1204 672))))
(assert (=> (<= (x572 160) 10000) (= (x1074 (x572 160)) (x368 (x572 160)))))
(assert (x489 x13))
(assert (x489 x28))
(assert (=> (<= (x37 160) 10000) (= (x368 (x37 160)) (x1074 (x37 160)))))
(assert (x489 x159))
(assert (= (x1118 896) (x1349 896)))
(assert (x489 x1442))
(assert (x1124 (x1754 160)))
(assert (= (x701 x1385) (ite (= (x368 0) x1385) 1 (x628 x1385))))
(assert (= (x661 128) (x1517 (x1074 (x661 128)))))
(assert (x489 x1647))
(assert (= (x617 160) (x1517 (x1074 (x617 160)))))
(assert (x489 x238))
(assert (= (and (not x1467) x121) x1077))
(assert (= (x160 640) (x191 640)))
(assert (= (x1692 (x368 41)) (ite (= (x368 41) (x368 0)) 1 (x1254 (x368 41)))))
(assert (x1124 (x617 128)))
(assert (x489 x156))
(assert (= (x1343 640) (x972 640)))
(assert (x489 x1237))
(assert (= (x768 928) (x1004 928)))
(assert (= (x941 1088) (x303 1088)))
(assert (= (x473 864) (x293 864)))
(assert (= x1547 (=> (and (= (> x1423 x337) x1342) (= x1423 (x608 768)) (= x337 (x608 800)) (> x8 31) (< 0 x262)) (and (=> x1342 x1106) (=> (not x1342) x432)))))
(assert (= (x1903 864) (x864 864)))
(assert (x489 x1189))
(assert (= (x964 896) (x480 896)))
(assert (x489 x1206))
(assert (x489 x81))
(assert (x489 x333))
(assert (= x1180 (=> (and (= x1467 (< x406 x270)) (= (x1186 320) x270)) (and (=> x1467 x896) (=> (not x1467) x523)))))
(assert (= (x1831 896) (x1286 896)))
(assert (x489 x922))
(assert (= (x1286 864) (x1831 864)))
(assert (x489 x241))
(assert (x489 x1575))
(assert (x489 x1634))
(assert (x489 x677))
(assert (= (and x551 x1574) x1122))
(assert (= (x939 352) (x1536 352)))
(assert (= (ite (= (x368 0) x888) 1 (x628 x888)) (x1802 x888)))
(assert (= (x786 704) (x269 704)))
(assert (= (x785 736) (x1867 736)))
(assert (= (x1884 864) (x1144 864)))
(assert (= (x1010 224) (x806 224)))
(assert (= (x1458 320) (x1873 320)))
(assert (= (x2 352) (x533 352)))
(assert (= (x368 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x1074 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (x1181 704) (ite (and x1519 x702) (x205 704) (x763 704))))
(assert (x489 x550))
(assert (=> (>= 10000 x62) (= (x368 x62) (x1074 x62))))
(assert (x489 x693))
(assert (= (x1300 864) (x644 864)))
(assert (= (x1733 800) (x1204 800)))
(assert (= 629314576 (x1517 (x368 629314576))))
(assert (x489 x1555))
(assert (x489 x1909))
(assert (x489 x1149))
(assert (= (x1816 928) (x1053 928)))
(assert (x489 x1498))
(assert (= (x1845 960) (x959 960)))
(assert (x489 x327))
(assert (x489 x1624))
(assert (= (x1517 (x1074 (x1569 160))) (x1569 160)))
(assert (= (x1343 736) (x972 736)))
(assert (= (x1784 768) (x166 768)))
(assert (x1124 (x1569 160)))
(assert (= (x312 224) (x1230 224)))
(assert (x489 x740))
(assert (x489 x1264))
(assert (= (x1877 640) (x624 640)))
(assert (= (x1062 928) (x1754 928)))
(assert (= x1720 x1711))
(assert (= (x1275 704) (x1738 704)))
(assert (x489 x364))
(assert (x489 x1140))
(assert (= (and x1711 x1342) x1703))
(assert (= (x794 704) (x1594 704)))
(assert (= 3296657447 (x1517 (x368 3296657447))))
(assert (x489 x1096))
(assert (= (x1919 896) (x849 896)))
(assert (x489 x1762))
(assert (= (x1055 224) (x727 224)))
(assert (= x666 x1614))
(assert (x489 x443))
(assert (=> (>= 10000 (x1800 160)) (= (x368 (x1800 160)) (x1074 (x1800 160)))))
(assert (= (=> (and (= x635 (x925 768)) (= x1649 (x1526 768)) (= x181 (x1339 800)) (= (x1686 736) x271) (= x758 false)) x997) x612))
(assert (= (x1336 864) (x1899 864)))
(assert (x1124 (x737 128)))
(assert (= (x741 928) (x288 928)))
(assert (x489 x1603))
(assert (x489 x1700))
(assert (= (x1239 640) (x867 640)))
(assert (= (x835 672) (x682 672)))
(assert (= (or (and x1444 (not x1885)) (and (not x1209) x1724)) x121))
(assert (= (x1899 928) (x1336 928)))
(assert (x489 x548))
(assert (= (x250 320) (x1931 320)))
(assert (x489 x174))
(assert (x489 x852))
(assert (= (x1802 x493) (ite (= x493 (x368 0)) 1 (x628 x493))))
(assert (x1124 (x1895 160)))
(assert (= (x312 352) (x1230 352)))
(assert (= (x1142 704) (x1329 704)))
(assert (= (x1899 672) (x1336 672)))
(assert (x489 x1494))
(assert (x489 x1916))
(assert (= (x1144 992) (x1884 992)))
(assert (= (or (and (not x1449) x233) x475) x1720))
(assert (x489 x1113))
(assert (= (x949 352) (x1706 352)))
(assert (= (x1142 320) (x1329 320)))
(assert (= (x1877 864) (x624 864)))
(assert (= x1764 (=> (and (= x1681 (x1804 (+ x152 x1481))) (= x1855 (< x474 x1432)) (= x1432 (x131 (x368 41))) (= x1 (x1083 288))) (and (=> (not x1855) x1283) (=> x1855 x896)))))
(assert (= (=> (and (= x1507 (x1686 320)) (= x398 (> x1507 0))) (and (=> x398 x931) (=> (not x398) x612))) x192))
(assert (= (ite (= (x368 0) (x368 40)) 1 (x628 (x368 40))) (x701 (x368 40))))
(assert (= (x1591 704) (ite (and x6 x1755) (x355 704) (x934 704))))
(assert (= (x1135 672) (x1213 672)))
(assert (= (ite (and x702 x1519) (x205 320) (x763 320)) (x1181 320)))
(assert (= (x1067 672) (x1640 672)))
(assert (x489 x1027))
(assert (x489 x1331))
(assert (x489 x1730))
(assert (x489 x1898))
(assert (= (ite (and x1519 x702) (x205 768) (x763 768)) (x1181 768)))
(assert (= x143 (and x1077 (not x135))))
(assert (= (x1349 640) (x1118 640)))
(assert (= (x1802 (x368 39)) (ite (= (x368 0) (x368 39)) 1 (x628 (x368 39)))))
(assert (= x1525 (=> (and (= x1607 (= 0 x76)) (= (= x940 x430) x599) (= (x218 256) x76) (= x1202 (= 0 (ite x554 1 0))) (= x554 (or x599 x1607)) (= x940 (div x512 x76)) (= x430 (x1692 (x368 39))) (= (mod (* x430 x76) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x512)) (and (=> x1202 x896) (=> (not x1202) x683)))))
(assert (= (x1594 672) (x794 672)))
(assert (x489 x290))
(assert (x489 x1726))
(assert (x489 x371))
(assert (x489 x1621))
(assert (x489 x1177))
(assert (= (x1754 736) (x1062 736)))
(assert (= (ite (and x1720 x38) (x3 352) (x1204 352)) (x608 352)))
(assert (= x419 (x323 224)))
(assert (= (x964 320) (x480 320)))
(assert (= (x1118 1088) (x1349 1088)))
(assert (= (x1343 704) (x972 704)))
(assert (= (x1816 864) (x1053 864)))
(assert (x489 x10))
(assert (= (x128 768) (x1564 768)))
(assert (= (x160 736) (x191 736)))
(assert (= (x1733 640) (x1204 640)))
(assert (x489 x384))
(assert (x489 x1552))
(assert (x489 x1333))
(assert (x489 x872))
(assert (= (x1517 (x1074 x1040)) x1040))
(assert (= (x1517 (x276 x552 6)) (+ (x1517 x552) 6)))
(assert (x489 x562))
(assert (x489 x66))
(assert (= (x368 464926286) (x1074 464926286)))
(assert (= (x1004 736) (x768 736)))
(assert (x489 x1415))
(assert true)
(assert (x489 x635))
(assert (x489 x646))
(assert (= (and x770 x1742) x1864))
(assert (= x1628 (and (not x767) x884)))
(assert (= (x727 704) (x1055 704)))
(assert (x489 x1016))
(assert (= (x480 672) (x964 672)))
(assert (= (x1517 (x368 2780307423)) 2780307423))
(assert (= (x368 3296657447) (x1074 3296657447)))
(assert (x489 x1865))
(assert (x489 x1021))
(assert (= (x1055 352) (x727 352)))
(assert (= (=> (= x1665 (> x965 0)) (and (=> x1665 x1066) (=> (not x1665) x896))) x957))
(assert (x489 x1378))
(assert (= (x939 992) (x1536 992)))
(assert (x1124 (x1286 160)))
(assert (= (x1517 (x368 2052391781)) 2052391781))
(assert (x489 x24))
(assert (= (x303 1024) (x941 1024)))
(assert (= x126 (and x310 x74)))
(assert (x489 x428))
(assert (=> (<= x695 10000) (= (x368 x695) (x1074 x695))))
(assert (= (x288 640) (x741 640)))
(assert (= (x701 (x368 10)) (ite (= (x368 0) (x368 10)) 1 (x628 (x368 10)))))
(assert (x489 x1443))
(assert (x489 x1220))
(assert (= (x864 1056) (x1903 1056)))
(assert (x1124 274184521717934524641157099916833587200))
(assert (x489 x235))
(assert (= (x1692 (x368 40)) (ite (= (x368 0) (x368 40)) 1 (x1254 (x368 40)))))
(assert (x489 x1139))
(assert (x489 x1358))
(assert (x489 x1197))
(assert (= (x1884 928) (x1144 928)))
(assert (= (ite (= (x368 0) x1675) 1 (x628 x1675)) (x1802 x1675)))
(assert (= (x283 768) (x1183 768)))
(assert (x1124 (x97 160)))
(assert (= (x1539 864) (x1531 864)))
(assert (x489 x508))
(assert (= x488 x431))
(assert (= x1615 (and x1652 (not x1868))))
(assert (x489 x518))
(assert (= (x90 704) (x808 704)))
(assert (= (x357 928) (x1360 928)))
(assert (= (x1517 (x1074 (x526 160))) (x526 160)))
(assert (= x1520 (=> (and (= (< x1637 x530) x1602) (= x700 (x1119 992)) (> x1870 31) (= (x1102 768) x530) (< 0 x9) (= (x1102 960) x1637)) (and (=> (and (= x1105 (x19 896)) (or (and (not (< x1775 x15)) (= (x1919 992) x263) (= x438 (x237 896)) x844 (= x1775 (x134 x129)) (< 0 x821) (= (x69 1056) x294) (= (x639 1024) x130) (= x1016 (x851 1056)) (= (x1127 960) x1093) (or (and x77 (= (= (x1759 (x1074 x190)) x1495) x1545) (= (x1441 (x1074 274184521717934524641157099916833587200)) x1241) (< x1886 4294967296) x1545 (= (x1441 (x1074 x190)) x1495) (= (<= x1241 (x1759 (x1074 274184521717934524641157099916833587200))) x77) x611) (not x611)) (or (and (< x1751 4294967296) (= x821 1) x655) (and (not x655) (= x578 x821))) (= (> x578 0) x655) (not (< x899 x1093)) (= (> x356 0) x611) (= (x851 1056) x15) (= (x521 (- x645 x1016)) x1129) (= x1860 (x521 (- x1775 x15))) (not (> x1016 x645)) (= (x1127 1088) x899) (= x645 (x522 (x368 40))) (< 31 x1886) (= (x276 x1401 6) x129) (= (x849 896) x190) (= x1401 (x1141 (x1074 (x851 128)) (x1074 (x851 160)) 0)) (= (> x130 0) x1487) (or (and (= x1648 (x276 x552 6)) (= (x1847 224) x1914) (not (< x364 x1563)) (= x595 (x1691 1024)) (= (x1141 (x1074 (x37 128)) (x1074 (x37 160)) 0) x950) (or x914 (and (= x168 (x1831 256)) (= (div x1143 x384) x7) (= (mod (* x18 x168) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1143) (not (= 0 x384)) (not x914) (= x469 (= x18 x752)) (or x1747 (and (not x1747) (= x358 (x1141 (x1074 (x737 128)) (x1074 (x737 160)) 0)) (= x1226 (x289 (x368 39))) (= x1385 (x276 x358 2)) (= (x138 224) x1512) (= (x521 (- x452 x387)) x1380) (not (> x1065 x1226)) (= x99 (x521 (- x1226 x1065))) (= x387 (x737 320)) (= x1065 (x737 320)) (not (> x387 x452)) (= (x701 x1385) x452))) (= x752 (div x1143 x168)) (not (= 0 x982)) (= x1072 (x1141 (x1074 (x1814 128)) (x1074 (x1814 160)) 0)) (= x1221 (or x469 x478)) (= (x701 x846) x445) (= (x138 320) x1579) (= x846 (x276 x1072 2)) (= x384 (x701 (x368 40))) (= x1747 (= 0 x1579)) (= x1839 (x1831 224)) (= (ite (< x445 x7) x445 x7) x305) (= x982 (ite x1221 1 0)) (= (x701 (x368 39)) x18) (= (= x168 0) x478))) (= (x521 (- x241 x1047)) x228) (= (x639 1024) x819) (= (x1804 (+ x1429 x618)) x838) (= x241 (x1847 288)) (= x832 (x1847 256)) (= (x1141 (x1074 (x1847 128)) (x1074 (x1847 160)) 0) x1461) (= (x1831 256) x1089) (= x1378 (x1831 288)) (= (x167 864) x618) (= (x521 (- x1922 x819)) x461) (= (x942 x1257) x1865) (= (x167 1024) x1429) (not (> x819 x1922)) (= (x1075 224) x900) (= x577 (x701 x1648)) (= (= 0 x1840) x914) (= (x37 256) x1563) (not (> x1047 x241)) (not (>= (+ x618 x1429) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x1089 x1378)) (= (x1141 (x1074 (x1286 128)) (x1074 (x1286 160)) 0) x552) (= (x1660 224) x169) (not (>= (+ x832 x1865) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1332 896) x1198) (= x1922 (x639 768)) x1487 (= x220 (x276 x950 6)) (= x1257 (x276 x1461 8)) (= x541 (x521 (- x364 x1563))) (= (x1847 256) x1047) (= x1840 (x701 (x368 39))) (= x238 (x1804 (+ x1865 x832))) (= x364 (x990 (x368 40)))) (not x1487)) (< 0 x356) (< 31 x1751) (= x1027 (x521 (- x899 x1093)))) (not x844)) (= x844 (< 0 x1368)) (= (x1102 768) x495) (= x1597 (x1102 960)) (= x102 (x1141 (x1074 (x698 128)) (x1074 (x698 160)) 0)) (= (x276 x102 6) x23) (= (x521 (- x495 x1597)) x1206) x1602 (= (x1835 992) x1368) (= x525 (x19 992)) (not (> x1597 x495)) (= (ite (< x917 x525) x917 x525) x1822) (= x917 (x701 x23))) x162) (=> (not x1602) x359)))))
(assert (x1124 (x302 128)))
(assert (= x1038 (x166 576)))
(assert (= x1095 (=> (and (= x531 (x624 384)) (= x686 (= 0 x531))) (and (=> x686 x896) (=> (and (not x686) (= (div x929 x531) x1262)) x1002)))))
(assert (x489 x854))
(assert (x489 x1646))
(assert (x489 x618))
(assert (= (x651 640) (x777 640)))
(assert (= (x1329 864) (x1142 864)))
(assert (= (and x960 x549) x976))
(assert (= x542 (x204 896)))
(assert (= (x1183 352) (x283 352)))
(assert (= (x218 352) (x572 352)))
(assert (x489 x601))
(assert (x1124 (x1754 128)))
(assert (= (x200 736) (x1228 736)))
(assert (= (x357 896) (x1360 896)))
(assert (x489 x403))
(assert (= (ite (= x332 (x368 0)) 1 (x628 x332)) (x701 x332)))
(assert (x1124 x1798))
(assert (= (x253 928) (x1666 928)))
(assert (x489 x1469))
(assert (= (x1010 736) (x806 736)))
(assert (x489 x819))
(assert (x489 x1326))
(assert (= (x1010 768) (x806 768)))
(assert (x489 x829))
(assert (x489 x271))
(assert (= (x1564 672) (x128 672)))
(assert (= (x138 256) (x1814 256)))
(assert (x489 x1082))
(assert (= (x1680 (x1074 x509)) (ite (and x434 x1582) (x1565 (x1074 x509)) (x1348 (x1074 x509)))))
(assert (= (x1754 128) (x1517 (x1074 (x1754 128)))))
(assert (= (x835 864) (x682 864)))
(assert (= (x405 864) (x1789 864)))
(assert (= (x1814 768) (x138 768)))
(assert (= x1588 (=> (and (= x974 (< x1 x1155)) (= (x1116 320) x1155)) (and (=> x974 x896) (=> (not x974) x1471)))))
(assert (x489 x530))
(assert (x489 x485))
(assert (= (x651 352) x1296))
(assert (= (ite (= (x368 0) (x1074 x1879)) 1 (x628 (x1074 x1879))) (x1802 (x1074 x1879))))
(assert (x489 x569))
(assert (=> (<= (x526 160) 10000) (= (x1074 (x526 160)) (x368 (x526 160)))))
(assert (= (x567 384) x1826))
(assert (x1124 x1040))
(assert (= (x293 896) (x473 896)))
(assert (x1124 x62))
(assert (= (x368 2209625481) (x1074 2209625481)))
(assert (= (x368 2316151882) (x1074 2316151882)))
(assert (= x775 (=> (and (= x1748 (x521 (- x1121 x1284))) (= x197 (x1141 (x1074 (x661 128)) (x1074 (x661 160)) 0)) (= (x661 736) x1477) (= x767 (> x1477 x1218)) (= x1218 (x657 x197))) (and (=> x767 x896) (=> (and (or (not x379) (and x379 (< x500 4294967296))) (= x1486 (x521 (- x1218 x1477))) (= (x661 736) x451) (or (not x1201) (and (= x1881 (= (x324 (x1074 x1891)) x1595)) (= x1269 (>= (x324 (x1074 274184521717934524641157099916833587200)) x81)) x1269 x1881 (= (x648 (x1074 x1891)) x1595) (= (x648 (x1074 274184521717934524641157099916833587200)) x81) (> 4294967296 x1761) x1201)) (= x1472 (x1804 (+ 64 x1390))) (= x1390 (x636 384)) (= (> x548 0) x1201) (= x1917 (x1804 (+ x1390 480))) (= x1690 (x862 672)) (= x703 (x1223 288)) (= x1891 (x533 224)) (= x802 (x1871 768)) (not x767) (= (< 0 x544) x379) (= (x1875 (x368 10)) x26) (= x1317 (x636 256)) (= x985 (x1804 (+ 512 x1390)))) x300)))))
(assert (=> (>= 10000 (x851 160)) (= (x1074 (x851 160)) (x368 (x851 160)))))
(assert (= x1027 (x639 1056)))
(assert (x489 x89))
(assert (= (x1666 672) (x253 672)))
(assert (=> (>= 10000 (x413 160)) (= (x368 (x413 160)) (x1074 (x413 160)))))
(assert (= (+ 2 (x1517 x68)) (x1517 (x276 x68 2))))
(assert (= (x1228 320) (x200 320)))
(assert (= (x1074 1889567281) (x368 1889567281)))
(assert (x489 x387))
(assert (x489 x561))
(assert (x489 x297))
(assert (= (x1543 x482 160) (div x482 1461501637330902918203684832716283019655932542976)))
(assert (= (x1074 1461501637330902918203684832716283019655932542975) (x368 1461501637330902918203684832716283019655932542975)))
(assert (x1124 (x353 128)))
(assert (= true x702))
(assert (x489 x1438))
(assert (= (x473 768) (x293 768)))
(assert (x489 x1323))
(assert (x489 x421))
(assert (x489 x1499))
(assert (x489 x1219))
(assert (=> (<= (x777 128) 10000) (= (x1074 (x777 128)) (x368 (x777 128)))))
(assert (x489 x804))
(assert (x489 x542))
(assert (x1124 (x966 160)))
(assert (= (x1349 320) (x1118 320)))
(assert (x489 x1031))
(assert (= (x2 224) (x533 224)))
(assert (x489 x1322))
(assert (= (x698 864) (x1835 864)))
(assert (x489 x79))
(assert (= (=> (and (= x888 (x276 x1571 6)) (= (x1692 x888) x1400) (= x892 (> x559 0)) (= (x1141 (x1074 (x959 128)) (x1074 (x959 160)) 0) x1571) (= x559 (x1845 992)) (= x573 (x1830 992)) (= (x1830 896) x339) (= x1730 (x521 (- x730 x954))) (= (ite (> x573 x1400) x1400 x573) x96)) (and (=> (not x892) x1372) (=> (and (= (x835 896) x509) (or (not x1606) (and x1650 (> 4294967296 x56) (= x1650 (= (x1172 (x1074 x509)) x1109)) x1042 x1606 (= (<= x654 (x1172 (x1074 274184521717934524641157099916833587200))) x1042) (= (x1680 (x1074 274184521717934524641157099916833587200)) x654) (= x1109 (x1680 (x1074 x509))))) x892 (= (x682 992) x1085) (= (> x184 0) x1606)) x50))) x436))
(assert (= (x1692 x888) (ite (= (x368 0) x888) 1 (x1254 x888))))
(assert (x489 x1099))
(assert (x489 x26))
(assert (= (x1329 736) (x1142 736)))
(assert (= (x1239 352) (x867 352)))
(assert (= (x808 640) (x90 640)))
(assert (x489 x736))
(assert (= (x1754 1056) (x1062 1056)))
(assert (= (x1919 736) (x849 736)))
(assert (x1124 (x1847 128)))
(assert (=> (<= (x1025 160) 10000) (= (x1074 (x1025 160)) (x368 (x1025 160)))))
(assert (= (x155 (x1074 x1891)) (ite (and x670 x1872 x1154) (ite (and x1154 x762 x1872 x670) (x1807 (x1074 x1891)) (x1441 (x1074 x1891))) (x1441 (x1074 x1891)))))
(assert (= x377 (and x1466 (not x46))))
(assert (x489 x1121))
(assert (x489 x995))
(assert (x489 x136))
(assert (x489 x1918))
(assert (= (x1802 x1558) (ite (= (x368 0) x1558) 1 (x628 x1558))))
(assert (x489 x1052))
(assert (x489 x1159))
(assert (x489 x1231))
(assert (= (x346 800) (x763 800)))
(assert (x489 x656))
(assert (x489 x87))
(assert (= (x138 896) (x1814 896)))
(assert (= (x1536 896) (x939 896)))
(assert (= (x200 352) (x1228 352)))
(assert (x489 x1445))
(assert (= x93 (=> (and (= x1090 (x1410 (x368 40))) (= (x521 (- x1103 x286)) x1235) (= x1434 (x97 1056)) (= x1858 (> x1434 x1090))) (and (=> x1858 x896) (=> (and (not x1858) (= x483 (x521 (- x1090 x1434)))) x1372)))))
(assert (x489 x1674))
(assert (x489 x149))
(assert (= (x701 x1648) (ite (= x1648 (x368 0)) 1 (x628 x1648))))
(assert (x489 x1225))
(assert (x489 x752))
(assert (= (x939 768) (x1536 768)))
(assert (x489 x1482))
(assert (=> (<= (x302 128) 10000) (= (x368 (x302 128)) (x1074 (x302 128)))))
(assert (= (x939 928) (x1536 928)))
(assert (= (x1286 1056) (x1831 1056)))
(assert (x489 x181))
(assert (x489 x1108))
(assert (= (x208 896) (x1569 896)))
(assert (= (x1594 352) (x794 352)))
(assert (= 2681579215 (x1517 (x368 2681579215))))
(assert (= (x941 736) (x303 736)))
(assert (= (x1517 (x1074 x509)) x509))
(assert (= (and x226 x311) x74))
(assert (x489 x1770))
(assert (x489 x689))
(assert (x489 x1798))
(assert (x489 x1400))
(assert (= (x1517 (x276 x1451 6)) (+ 6 (x1517 x1451))))
(assert (= (x763 352) (x346 352)))
(assert (= (x1531 672) (x1539 672)))
(assert (= (x1517 (x368 2757214935)) 2757214935))
(assert (= (x1907 (x1074 274184521717934524641157099916833587200)) (ite (and (not x1858) x1615) (ite (and x1606 x1735 x892) (x1172 (x1074 274184521717934524641157099916833587200)) (x1680 (x1074 274184521717934524641157099916833587200))) (x1680 (x1074 274184521717934524641157099916833587200)))))
(assert (= (x1569 736) (x208 736)))
(assert (= (x1517 (x1074 (x851 128))) (x851 128)))
(assert (= (x1873 352) (x1458 352)))
(assert (x489 x222))
(assert (= (x1360 640) (x357 640)))
(assert (x489 x452))
(assert (x489 x1481))
(assert (x489 x230))
(assert (x489 x792))
(assert (= (x1564 640) (x128 640)))
(assert (x489 x965))
(assert (= (x1754 320) (x1062 320)))
(assert (x489 x1929))
(assert (x489 x25))
(assert (=> (>= 10000 (x966 160)) (= (x1074 (x966 160)) (x368 (x966 160)))))
(assert (x489 x1388))
(assert (= (ite (= x1554 (x368 0)) 1 (x628 x1554)) (x1802 x1554)))
(assert (x489 x305))
(assert (x489 x1649))
(assert (x489 x544))
(assert (= (x1517 (x368 3065339685)) 3065339685))
(assert (= (x1025 160) (x1517 (x1074 (x1025 160)))))
(assert (= (x1517 (x368 1000000000000000000)) 1000000000000000000))
(assert (= (x801 352) (x1157 352)))
(assert (= (x1053 768) (x1816 768)))
(assert (= (x1144 704) (x1884 704)))
(assert (= (x1640 704) (x1067 704)))
(assert (x489 x1901))
(assert (= (x701 (x1074 x695)) (ite (= (x1074 x695) (x368 0)) 1 (x628 (x1074 x695)))))
(assert (x489 x1423))
(assert (= (x963 320) (x652 320)))
(assert (= (and (not x606) x420) x1081))
(assert (x489 x62))
(assert (x489 x962))
(assert (= (x701 (x368 41)) (ite (= (x368 0) (x368 41)) 1 (x628 (x368 41)))))
(assert (= x106 (x1517 (x1074 x106))))
(assert (x489 x541))
(assert (= (x818 640) (x1345 640)))
(assert (x489 x261))
(assert (= (x1213 640) (x1135 640)))
(assert (= x936 (or (and (not x625) x281) (and x1234 (not x1551)))))
(assert (= (x1004 704) (x768 704)))
(assert (x489 x887))
(assert (= (x949 864) (x1706 864)))
(assert (= (ite (= (x368 0) x1554) 1 (x1254 x1554)) (x1692 x1554)))
(assert (x489 x1241))
(assert (= (x1300 704) (x644 704)))
(assert (= (x1594 928) (x794 928)))
(assert (x489 x1853))
(assert (= (x1831 352) (x1286 352)))
(assert (= (x1053 672) (x1816 672)))
(assert (= (x1931 640) (x250 640)))
(assert (= x96 (x1845 992)))
(assert (=> (>= 10000 (x1931 160)) (= (x368 (x1931 160)) (x1074 (x1931 160)))))
(assert (= (x200 224) (x1228 224)))
(assert (= (x128 864) (x1564 864)))
(assert (x489 x595))
(assert (= (x1074 1020253707) (x368 1020253707)))
(assert (x489 x893))
(assert (= x281 (and (not x1217) x189)))
(assert (x489 x339))
(assert (=> (<= (x1814 160) 10000) (= (x368 (x1814 160)) (x1074 (x1814 160)))))
(assert (x489 x465))
(assert (= (x204 320) (x1705 320)))
(assert (= x432 (=> (and (= x679 (< 0 x1501)) (= (x502 736) x1721) (= (x1645 (x368 9)) x1846) (< 67 x1079) (= x1421 (x840 768)) (= (x360 768) x297) (= (ite (< x1668 32) x1668 32) x1654) (= x434 (> x841 0)) (= x558 (x1804 (+ 32 x1459))) (= x70 (x1804 (+ x1841 512))) (= x995 x543) (= (x521 (- x1633 x1542)) x1050) (= (x521 (- x1846 x301)) x1051) (>= x1712 0) (= (x1804 (+ x1841 480)) x1353) (= (x1804 (+ x1841 64)) x136) (= x1097 (x609 768)) (<= x709 1461501637330902918203684832716283019655932542975) (= (< 0 x1188) x902) (= (x983 672) x88) (= x555 (x151 800)) (= (x502 320) x1188) (< 0 x841) (= true (<= x1079 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (or (not x434) (and (> 4294967296 x1668) x537 (= x381 (<= x1205 (x1565 (x1074 274184521717934524641157099916833587200)))) (= (= x1695 (x1565 (x1074 x1040))) x537) x434 (= x1695 (x1348 (x1074 x1040))) (= (x1348 (x1074 274184521717934524641157099916833587200)) x1205) x381)) (>= 1461501637330902918203684832716283019655932542975 x1712) (= x1509 (x1740 (x368 10))) (<= x543 1461501637330902918203684832716283019655932542975) (= x396 (x1895 736)) (= x709 x1457) (= x1315 x1457) (= x301 (x1778 736)) (= (x385 x1196) x1633) (= x142 (x345 256)) (= x1728 x601) (or (and (< x1273 4294967296) x275) (not x275)) (= (x312 224) x1040) (>= x543 0) (= x1196 (x1141 (x1074 (x1895 128)) (x1074 (x1895 160)) 0)) (= (x1183 576) x1459) (<= 0 x709) (= x1780 x962) (not (< x1633 x1542)) (or (and x679 (< x1734 4294967296)) (not x679)) (not (> x301 x1846)) (= (x215 288) x576) (= x1841 (x345 384)) (= x275 (< 0 x1101)) (= (x1895 736) x1542) (or (and (= (x502 352) x10) (< 0 x1796) (= (x502 320) x1511) x902 (= x1911 (x521 (- 32 x1511))) (= (x1543 x10 x852) x1796) (= (mod (* x1911 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x852)) (not x902))) x1397)))
(assert (x489 x287))
(assert (= (x1543 x798 x1046) (div x798 (x217 2 x1046))))
(assert (x489 x103))
(assert (= (x794 896) (x1594 896)))
(assert (x489 x1688))
(assert (= (x1517 (x1074 (x966 128))) (x966 128)))
(assert (= (x698 928) (x1835 928)))
(assert (x489 x1827))
(assert (= (x1275 736) (x1738 736)))
(assert (= (x1458 736) (x1873 736)))
(assert (= x566 (=> (and (= x969 (= x1117 0)) (= (mod (* x1833 x1117) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x929) (= x1117 (x624 352)) (= (or x969 x590) x1337) (= x590 (= x224 x1833)) (= (x131 (x368 9)) x1833) (= (div x929 x1117) x224) (= (= 0 (ite x1337 1 0)) x46)) (and (=> x46 x896) (=> (not x46) x1095)))))
(assert (= (and x1529 x1376) x1152))
(assert (= (x1705 704) (x204 704)))
(assert (x489 x1015))
(assert (= (x1336 320) x822))
(assert (x489 x1870))
(assert (= (x639 864) (x1127 864)))
(assert (x489 x581))
(assert (x489 x1538))
(assert (x489 x998))
(assert (x489 x987))
(assert (x489 x803))
(assert (x489 x446))
(assert (x489 x1492))
(assert (=> (<= (x1800 128) 10000) (= (x368 (x1800 128)) (x1074 (x1800 128)))))
(assert (x1124 (x1847 160)))
(assert (x489 x356))
(assert (= (x1903 736) (x864 736)))
(assert (x489 x344))
(assert (= (x1564 352) (x128 352)))
(assert (x489 x152))
(assert (= (x698 160) (x1517 (x1074 (x698 160)))))
(assert (= 0 (x1659 320)))
(assert (= (x473 1024) (x293 1024)))
(assert (x489 x5))
(assert (x489 x471))
(assert (= (ite (= (x368 0) x1558) 1 (x1254 x1558)) (x1692 x1558)))
(assert (= (+ 6 (x1517 x847)) (x1517 (x276 x847 6))))
(assert (x489 x645))
(assert (x489 x1346))
(assert (= (x1345 352) (x818 352)))
(assert (= x1729 (x757 224)))
(assert (= (and x1212 x734) x1632))
(assert (= (x1802 x282) (ite (= (x368 0) x282) 1 (x628 x282))))
(assert (x489 x1453))
(assert (x489 x1215))
(assert (x489 x1524))
(assert (x489 x44))
(assert (x489 x1913))
(assert (x489 x1490))
(assert (= x50 (=> (= x734 (< 0 x184)) (and (=> x734 x307) (=> (not x734) x896)))))
(assert (= (x1300 928) (x644 928)))
(assert (x489 x1128))
(assert (= (=> (and (= (div x1729 x1908) x78) (= x1729 (mod (* x1908 x36) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1600 (= 0 x1908)) (= x36 (x131 (x368 44))) (= x1908 (x521 (- x474 x1432))) (= x173 (= x36 x78)) (= (or x173 x1600) x298) (= x1190 (= (ite x298 1 0) 0))) (and (=> x1190 x896) (=> (not x1190) x1370))) x1283))
(assert (x1124 (x748 128)))
(assert (x489 x1170))
(assert (= (x208 352) (x1569 352)))
(assert (= (x1517 (x276 x1250 2)) (+ 2 (x1517 x1250))))
(assert (x489 x18))
(assert (x489 x917))
(assert (= (and x233 x1449) x770))
(assert (= x1735 (and (not x707) x1145)))
(assert (= (x964 768) (x480 768)))
(assert (x489 x1630))
(assert (x489 x908))
(assert (x489 x301))
(assert (x489 x869))
(assert (= (x567 768) (x1041 768)))
(assert (x489 x416))
(assert (= (x941 704) (x303 704)))
(assert (= x1466 (and x1194 x1753)))
(assert (x489 x719))
(assert (= (x1802 x1281) (ite (= (x368 0) x1281) 1 (x628 x1281))))
(assert (x489 x1501))
(assert (= (x652 768) (x963 768)))
(assert (= (x567 672) (x1041 672)))
(assert (= (x1311 288) (x1280 288)))
(assert (= (x1802 x571) (ite (= (x368 0) x571) 1 (x628 x571))))
(assert (=> (>= 10000 (x526 128)) (= (x368 (x526 128)) (x1074 (x526 128)))))
(assert (= (=> (and (= x744 (x615 896)) (= x524 (not (< 0 x744))) (= x1108 (x1706 928)) (= x623 (x825 (x1074 x222))) (= x222 (x1804 (+ x1108 17)))) (and x524 x1732)) x472))
(assert (= x871 (and x153 (not x1880))))
(assert (= (x1517 (x1074 (x1814 128))) (x1814 128)))
(assert (= (x1517 (x1074 (x1025 128))) (x1025 128)))
(assert (x489 x1233))
(assert (= x1066 (=> (= x1111 (> x511 31)) (and (=> (not x1111) x896) (=> x1111 x1393)))))
(assert (= (x90 672) (x808 672)))
(assert (= (x1517 (x276 x1401 6)) (+ (x1517 x1401) 6)))
(assert (= (x786 672) (x269 672)))
(assert (x489 x1317))
(check-sat)
