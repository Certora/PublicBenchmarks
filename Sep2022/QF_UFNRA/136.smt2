(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_UFNRA)
(declare-fun uninterp_frac (Real Real) Real)
(define-fun axiom_frac_bound ((d1 Real) (d2 Real)) Bool (and (=> (> d2 0) (and (<= 0.0 (uninterp_frac d1 d2)) (< (uninterp_frac d1 d2) 1.0))) (=> (< d2 0) (and (>= 0.0 (uninterp_frac d1 d2)) (> (uninterp_frac d1 d2) (- 1.0))))))
(define-fun axiom_frac_zero ((d1 Real) (d2 Real) (m1 Real) (m2 Real) (e Real)) Bool (=> (and (= d1 (* m1 m2)) (or (= d2 m1) (= d2 m2))) (= e 0)))
(define-fun uninterp_mod ((x Real) (m Real)) Real (ite (and (>= x 0) (< x m)) x (ite (and (>= x m) (< x (+ m m))) (- x m) (ite (and (>= x (- m)) (< x 0)) (+ x m) (* m (uninterp_frac x m))))))
(define-fun axiom_int_approximation ((x Real)) Bool (or (= x 0) (>= x 1) (<= x (- 1))))
(declare-fun x31 () Bool)
(declare-fun x772 () Bool)
(declare-fun x732 () Real)
(declare-fun x595 () Real)
(declare-fun x56 () Bool)
(declare-fun x744 () Real)
(declare-fun x300 () Real)
(declare-fun x292 () Bool)
(declare-fun x192 () Real)
(declare-fun x900 () Real)
(declare-fun x152 () Real)
(declare-fun x476 () Real)
(declare-fun x88 (Real) Real)
(declare-fun x515 () Real)
(declare-fun x481 () Bool)
(declare-fun x865 () Bool)
(declare-fun x438 () Real)
(declare-fun x843 () Real)
(declare-fun x841 () Real)
(declare-fun x391 () Real)
(declare-fun x889 () Real)
(declare-fun x112 () Real)
(declare-fun x669 () Real)
(declare-fun x264 () Real)
(declare-fun x185 (Real Real) Real)
(declare-fun x53 () Real)
(declare-fun x214 () Real)
(declare-fun x603 () Real)
(declare-fun x720 () Real)
(declare-fun x817 () Real)
(declare-fun x852 () Real)
(declare-fun x800 () Real)
(declare-fun x455 () Real)
(declare-fun x705 () Real)
(declare-fun x125 () Bool)
(declare-fun x142 () Real)
(declare-fun x514 () Real)
(declare-fun x63 () Real)
(declare-fun x415 () Real)
(declare-fun x552 () Real)
(declare-fun x764 (Real Real) Real)
(declare-fun x414 () Real)
(declare-fun x503 () Real)
(declare-fun x119 () Bool)
(declare-fun x536 () Real)
(declare-fun x174 () Real)
(declare-fun x724 () Real)
(declare-fun x692 (Real) Real)
(declare-fun x399 () Real)
(declare-fun x435 () Real)
(declare-fun x863 () Real)
(declare-fun x798 () Bool)
(declare-fun x198 (Real) Real)
(declare-fun x622 () Real)
(declare-fun x247 () Real)
(declare-fun x156 () Real)
(declare-fun x243 () Real)
(declare-fun x778 () Bool)
(declare-fun x425 () Real)
(declare-fun x906 () Bool)
(declare-fun x612 () Bool)
(declare-fun x839 () Real)
(declare-fun x378 (Real) Real)
(declare-fun x306 () Real)
(declare-fun x190 () Bool)
(declare-fun x245 () Real)
(declare-fun x699 () Real)
(declare-fun x633 () Real)
(declare-fun x678 () Real)
(declare-fun x910 () Real)
(declare-fun x631 () Real)
(declare-fun x5 () Real)
(declare-fun x581 () Real)
(declare-fun x253 (Real) Real)
(declare-fun x707 (Real) Real)
(declare-fun x406 (Real) Real)
(declare-fun x594 (Real) Real)
(declare-fun x222 () Real)
(declare-fun x252 (Real) Real)
(declare-fun x317 () Real)
(declare-fun x396 () Real)
(declare-fun x601 () Bool)
(declare-fun x431 () Real)
(declare-fun x513 () Real)
(declare-fun x194 () Bool)
(declare-fun x287 () Real)
(declare-fun x355 () Real)
(declare-fun x238 () Real)
(declare-fun x356 () Real)
(declare-fun x401 () Bool)
(declare-fun x750 () Real)
(declare-fun x809 () Real)
(declare-fun x348 () Real)
(declare-fun x345 () Real)
(declare-fun x285 () Real)
(declare-fun x331 () Bool)
(declare-fun x861 () Real)
(declare-fun x42 () Real)
(declare-fun x893 () Real)
(declare-fun x12 (Real) Real)
(declare-fun x13 () Bool)
(declare-fun x379 (Real) Real)
(declare-fun x842 () Real)
(declare-fun x260 () Real)
(declare-fun x201 () Real)
(declare-fun x74 () Real)
(declare-fun x828 () Real)
(declare-fun x316 () Real)
(declare-fun x847 () Bool)
(declare-fun x557 () Real)
(declare-fun x794 () Real)
(declare-fun x350 () Real)
(declare-fun x327 () Real)
(declare-fun x17 () Real)
(declare-fun x598 () Bool)
(declare-fun x325 () Real)
(declare-fun x478 (Real) Real)
(declare-fun x288 () Bool)
(declare-fun x779 () Real)
(declare-fun x881 () Real)
(declare-fun x151 () Real)
(declare-fun x565 () Bool)
(declare-fun x302 () Real)
(declare-fun x535 (Real) Real)
(declare-fun x349 () Bool)
(declare-fun x730 () Real)
(declare-fun x516 () Bool)
(declare-fun x609 () Real)
(declare-fun x330 () Real)
(declare-fun x440 () Real)
(declare-fun x7 () Real)
(declare-fun x475 () Bool)
(declare-fun x722 () Real)
(declare-fun x127 () Bool)
(declare-fun x823 () Real)
(declare-fun x706 () Real)
(declare-fun x82 () Real)
(declare-fun x368 () Real)
(declare-fun x879 () Real)
(declare-fun x213 () Real)
(declare-fun x258 () Real)
(declare-fun x618 () Real)
(declare-fun x479 () Real)
(declare-fun x180 () Real)
(declare-fun x501 () Bool)
(declare-fun x789 () Real)
(declare-fun x255 () Real)
(declare-fun x28 () Real)
(declare-fun x73 () Real)
(declare-fun x523 () Real)
(declare-fun x541 () Bool)
(declare-fun x239 () Real)
(declare-fun x511 () Real)
(declare-fun x143 () Real)
(declare-fun x559 () Bool)
(declare-fun x267 () Real)
(declare-fun x613 () Real)
(declare-fun x482 () Bool)
(declare-fun x133 () Real)
(declare-fun x240 () Real)
(declare-fun x284 () Real)
(declare-fun x486 () Real)
(declare-fun x859 () Bool)
(declare-fun x825 () Real)
(declare-fun x652 () Real)
(declare-fun x360 () Real)
(declare-fun x377 () Bool)
(declare-fun x32 () Real)
(declare-fun x26 () Bool)
(declare-fun x491 () Real)
(declare-fun x90 () Real)
(declare-fun x903 () Bool)
(declare-fun x651 () Real)
(declare-fun x642 () Real)
(declare-fun x837 () Real)
(declare-fun x895 () Bool)
(declare-fun x108 () Real)
(declare-fun x898 () Bool)
(declare-fun x105 () Real)
(declare-fun x868 () Bool)
(declare-fun x39 () Real)
(declare-fun x410 () Real)
(declare-fun x229 () Real)
(declare-fun x357 () Real)
(declare-fun x94 () Real)
(declare-fun x855 () Real)
(declare-fun x256 () Bool)
(declare-fun x672 () Bool)
(declare-fun x219 () Real)
(declare-fun x265 () Real)
(declare-fun x568 () Real)
(declare-fun x22 () Real)
(declare-fun x834 () Real)
(declare-fun x848 () Real)
(declare-fun x237 () Real)
(declare-fun x405 () Real)
(declare-fun x366 () Real)
(declare-fun x221 () Bool)
(declare-fun x822 () Real)
(declare-fun x509 () Bool)
(declare-fun x386 () Real)
(declare-fun x464 () Real)
(declare-fun x540 () Bool)
(declare-fun x64 () Bool)
(declare-fun x144 () Real)
(declare-fun x335 (Real Real) Real)
(declare-fun x138 () Real)
(declare-fun x115 () Real)
(declare-fun x246 () Bool)
(declare-fun x640 () Bool)
(declare-fun x251 () Bool)
(declare-fun x912 () Bool)
(declare-fun x439 () Real)
(declare-fun x643 () Real)
(declare-fun x474 () Bool)
(declare-fun x277 () Real)
(declare-fun x204 () Real)
(declare-fun x20 () Real)
(declare-fun x129 () Real)
(declare-fun x1 () Real)
(declare-fun x654 () Real)
(declare-fun x36 (Real) Real)
(declare-fun x403 () Real)
(declare-fun x413 () Bool)
(declare-fun x154 () Real)
(declare-fun x301 () Real)
(declare-fun x273 () Bool)
(declare-fun x599 () Bool)
(declare-fun x423 () Real)
(declare-fun x653 () Real)
(declare-fun x420 () Real)
(declare-fun x361 () Real)
(declare-fun x338 () Real)
(declare-fun x890 () Bool)
(declare-fun x433 () Real)
(declare-fun x919 () Real)
(declare-fun x799 (Real) Real)
(declare-fun x587 () Bool)
(declare-fun x745 () Real)
(declare-fun x902 () Real)
(declare-fun x698 () Real)
(declare-fun x827 () Real)
(declare-fun x525 () Bool)
(declare-fun x471 () Real)
(declare-fun x443 () Real)
(declare-fun x27 () Real)
(declare-fun x179 () Real)
(declare-fun x712 () Real)
(declare-fun x661 () Real)
(declare-fun x295 () Real)
(declare-fun x148 () Bool)
(declare-fun x146 () Real)
(declare-fun x596 () Real)
(declare-fun x864 () Real)
(declare-fun x226 (Real) Real)
(declare-fun x162 (Real) Real)
(declare-fun x128 () Real)
(declare-fun x913 () Real)
(declare-fun x83 () Real)
(declare-fun x51 () Real)
(declare-fun x397 () Real)
(declare-fun x444 () Real)
(declare-fun x155 () Real)
(declare-fun x680 () Real)
(declare-fun x441 () Real)
(declare-fun x539 () Real)
(declare-fun x4 () Real)
(declare-fun x742 () Real)
(declare-fun x694 () Real)
(declare-fun x850 () Bool)
(declare-fun x588 () Real)
(declare-fun x447 () Real)
(declare-fun x173 () Real)
(declare-fun x411 () Bool)
(declare-fun x831 (Real) Real)
(declare-fun x781 () Real)
(declare-fun x556 () Bool)
(declare-fun x697 () Real)
(declare-fun x281 () Real)
(declare-fun x307 () Real)
(declare-fun x502 () Real)
(declare-fun x158 () Real)
(declare-fun x101 () Bool)
(declare-fun x922 (Real) Real)
(declare-fun x616 (Real) Real)
(declare-fun x569 () Real)
(declare-fun x518 () Real)
(declare-fun x337 () Real)
(declare-fun x21 () Real)
(declare-fun x585 () Bool)
(declare-fun x274 () Real)
(declare-fun x915 () Real)
(declare-fun x584 () Real)
(declare-fun x461 () Real)
(declare-fun x611 () Real)
(declare-fun x590 () Bool)
(declare-fun x374 () Real)
(declare-fun x270 (Real Real) Real)
(declare-fun x79 () Real)
(declare-fun x450 () Bool)
(declare-fun x676 () Real)
(declare-fun x776 () Real)
(declare-fun x206 () Real)
(declare-fun x806 () Real)
(declare-fun x387 () Real)
(declare-fun x527 () Real)
(declare-fun x67 () Real)
(declare-fun x586 () Bool)
(declare-fun x547 () Bool)
(declare-fun x811 () Real)
(declare-fun x739 () Real)
(declare-fun x446 () Bool)
(declare-fun x484 () Real)
(declare-fun x445 () Real)
(declare-fun x815 () Real)
(declare-fun x227 () Real)
(declare-fun x833 () Real)
(declare-fun x727 () Real)
(declare-fun x72 () Bool)
(declare-fun x3 () Real)
(declare-fun x375 () Real)
(declare-fun x687 () Real)
(declare-fun x544 () Bool)
(declare-fun x282 () Bool)
(declare-fun x276 () Bool)
(declare-fun x200 () Real)
(declare-fun x80 () Real)
(declare-fun x679 () Real)
(declare-fun x126 () Real)
(declare-fun x202 () Bool)
(declare-fun x663 () Bool)
(declare-fun x344 () Real)
(declare-fun x754 () Bool)
(declare-fun x487 () Bool)
(declare-fun x319 () Bool)
(declare-fun x626 () Real)
(declare-fun x48 () Bool)
(declare-fun x607 () Real)
(declare-fun x71 (Real) Real)
(declare-fun x673 () Real)
(declare-fun x98 () Real)
(declare-fun x710 () Real)
(declare-fun x853 (Real) Real)
(declare-fun x359 () Bool)
(declare-fun x354 () Real)
(declare-fun x646 () Real)
(declare-fun x846 () Real)
(declare-fun x134 () Real)
(declare-fun x388 () Real)
(declare-fun x381 () Real)
(declare-fun x575 () Real)
(declare-fun x662 () Bool)
(declare-fun x113 () Real)
(declare-fun x624 () Real)
(declare-fun x760 () Real)
(declare-fun x326 () Real)
(declare-fun x364 () Real)
(declare-fun x465 () Bool)
(declare-fun x517 (Real) Real)
(declare-fun x677 () Real)
(declare-fun x634 () Real)
(declare-fun x100 () Bool)
(declare-fun x244 () Real)
(declare-fun x689 () Real)
(declare-fun x574 () Real)
(declare-fun x191 () Real)
(declare-fun x188 () Real)
(declare-fun x59 () Real)
(declare-fun x802 () Real)
(declare-fun x40 () Real)
(declare-fun x792 () Real)
(declare-fun x704 () Real)
(declare-fun x84 () Real)
(declare-fun x756 () Real)
(declare-fun x674 () Real)
(declare-fun x688 () Bool)
(declare-fun x107 () Real)
(declare-fun x901 (Real) Real)
(declare-fun x579 () Bool)
(declare-fun x394 (Real) Real)
(declare-fun x416 () Real)
(declare-fun x731 () Real)
(declare-fun x621 () Real)
(declare-fun x402 () Bool)
(declare-fun x347 () Bool)
(declare-fun x897 () Bool)
(declare-fun x696 () Bool)
(declare-fun x665 () Bool)
(declare-fun x352 () Real)
(declare-fun x648 () Real)
(declare-fun x505 () Real)
(declare-fun x87 (Real) Real)
(declare-fun x795 () Bool)
(declare-fun x205 () Real)
(declare-fun x91 () Bool)
(declare-fun x97 (Real) Real)
(declare-fun x494 (Real) Real)
(declare-fun x907 () Real)
(declare-fun x241 () Real)
(declare-fun x250 () Real)
(declare-fun x773 () Bool)
(declare-fun x882 () Real)
(declare-fun x392 () Real)
(declare-fun x37 () Real)
(declare-fun x371 () Real)
(declare-fun x61 () Real)
(declare-fun x336 () Real)
(declare-fun x334 () Bool)
(declare-fun x572 () Bool)
(declare-fun x782 () Real)
(declare-fun x567 () Real)
(declare-fun x217 () Real)
(declare-fun x658 () Bool)
(declare-fun x733 () Real)
(declare-fun x136 () Bool)
(declare-fun x442 () Real)
(declare-fun x196 () Real)
(declare-fun x457 () Real)
(declare-fun x183 () Real)
(declare-fun x16 () Real)
(declare-fun x18 () Real)
(declare-fun x328 () Bool)
(declare-fun x605 () Real)
(declare-fun x667 () Real)
(declare-fun x468 () Real)
(declare-fun x787 () Real)
(declare-fun x210 () Real)
(declare-fun x807 () Real)
(declare-fun x647 () Real)
(declare-fun x153 () Real)
(declare-fun x181 () Real)
(declare-fun x390 () Real)
(declare-fun x777 () Real)
(declare-fun x860 () Real)
(declare-fun x65 () Real)
(declare-fun x263 () Real)
(declare-fun x477 () Bool)
(declare-fun x691 () Bool)
(declare-fun x819 () Real)
(declare-fun x655 () Bool)
(declare-fun x620 () Bool)
(declare-fun x872 () Bool)
(declare-fun x297 () Real)
(declare-fun x589 (Real) Real)
(declare-fun x740 () Real)
(declare-fun x553 () Real)
(declare-fun x123 () Bool)
(declare-fun x774 () Real)
(declare-fun x883 () Real)
(declare-fun x664 () Real)
(declare-fun x75 () Real)
(declare-fun x920 (Real) Real)
(declare-fun x583 () Real)
(declare-fun x909 () Real)
(declare-fun x899 () Real)
(declare-fun x147 () Real)
(declare-fun x289 () Bool)
(declare-fun x671 (Real) Real)
(declare-fun x636 (Real) Real)
(declare-fun x407 () Real)
(declare-fun x310 () Real)
(declare-fun x554 () Real)
(declare-fun x884 () Bool)
(declare-fun x803 () Bool)
(declare-fun x426 () Real)
(declare-fun x550 () Bool)
(declare-fun x178 (Real) Real)
(declare-fun x68 () Real)
(declare-fun x58 () Real)
(declare-fun x911 () Bool)
(declare-fun x296 () Bool)
(declare-fun x92 () Real)
(declare-fun x734 () Real)
(declare-fun x305 () Real)
(declare-fun x96 () Real)
(declare-fun x231 () Real)
(declare-fun x638 () Bool)
(declare-fun x186 () Real)
(declare-fun x765 () Bool)
(declare-fun x216 () Real)
(declare-fun x60 () Real)
(declare-fun x623 () Real)
(declare-fun x735 () Real)
(declare-fun x686 () Bool)
(declare-fun x715 () Real)
(declare-fun x668 () Real)
(declare-fun x404 () Real)
(declare-fun x755 () Real)
(declare-fun x564 () Real)
(declare-fun x888 () Real)
(declare-fun x38 () Real)
(declare-fun x649 () Real)
(declare-fun x858 () Real)
(declare-fun x537 () Real)
(declare-fun x248 () Bool)
(declare-fun x408 () Bool)
(declare-fun x785 (Real) Real)
(declare-fun x473 () Real)
(declare-fun x294 () Real)
(declare-fun x639 () Real)
(declare-fun x367 () Bool)
(declare-fun x746 () Real)
(declare-fun x768 () Bool)
(declare-fun x725 () Real)
(declare-fun x492 () Real)
(declare-fun x380 () Real)
(declare-fun x793 (Real) Real)
(declare-fun x840 () Real)
(declare-fun x118 () Real)
(declare-fun x770 () Real)
(declare-fun x466 () Real)
(declare-fun x604 () Real)
(declare-fun x141 () Real)
(declare-fun x757 () Real)
(declare-fun x33 () Real)
(declare-fun x788 () Real)
(declare-fun x546 () Real)
(declare-fun x362 () Real)
(declare-fun x398 () Real)
(declare-fun x169 () Real)
(declare-fun x384 () Real)
(declare-fun x769 () Real)
(declare-fun x761 () Real)
(declare-fun x685 () Real)
(declare-fun x660 (Real) Real)
(declare-fun x340 () Real)
(declare-fun x49 () Real)
(declare-fun x829 () Real)
(declare-fun x845 () Real)
(declare-fun x303 () Real)
(declare-fun x218 () Bool)
(declare-fun x145 () Real)
(declare-fun x346 () Bool)
(declare-fun x291 () Bool)
(declare-fun x385 () Bool)
(declare-fun x30 () Real)
(declare-fun x791 (Real) Real)
(declare-fun x207 () Real)
(declare-fun x182 () Bool)
(declare-fun x814 (Real) Real)
(declare-fun x736 (Real) Real)
(declare-fun x766 () Real)
(declare-fun x524 () Real)
(declare-fun x867 () Real)
(declare-fun x19 () Real)
(declare-fun x600 () Real)
(declare-fun x343 () Real)
(declare-fun x606 () Bool)
(declare-fun x376 () Real)
(declare-fun x729 () Real)
(declare-fun x905 () Real)
(declare-fun x512 () Real)
(declare-fun x81 () Bool)
(declare-fun x543 () Real)
(declare-fun x629 () Real)
(declare-fun x189 () Real)
(declare-fun x570 (Real) Real)
(declare-fun x422 () Bool)
(declare-fun x602 () Real)
(declare-fun x309 () Real)
(declare-fun x538 () Real)
(declare-fun x857 () Real)
(declare-fun x131 () Real)
(declare-fun x372 () Bool)
(declare-fun x393 () Bool)
(declare-fun x283 () Real)
(declare-fun x70 () Bool)
(declare-fun x498 () Bool)
(declare-fun x644 (Real) Real)
(declare-fun x615 () Bool)
(declare-fun x917 () Real)
(declare-fun x313 () Real)
(declare-fun x650 () Real)
(declare-fun x659 () Real)
(declare-fun x15 () Real)
(declare-fun x34 () Real)
(declare-fun x109 () Bool)
(declare-fun x290 () Real)
(declare-fun x921 (Real) Real)
(declare-fun x436 () Real)
(declare-fun x545 () Bool)
(declare-fun x880 (Real) Real)
(declare-fun x418 () Real)
(declare-fun x752 () Real)
(declare-fun x197 () Bool)
(declare-fun x11 () Real)
(declare-fun x521 () Real)
(declare-fun x483 () Real)
(declare-fun x580 () Real)
(declare-fun x767 () Real)
(declare-fun x432 () Real)
(declare-fun x236 () Real)
(declare-fun x8 () Real)
(declare-fun x102 () Real)
(declare-fun x726 () Real)
(declare-fun x395 () Real)
(declare-fun x721 () Bool)
(declare-fun x77 () Real)
(declare-fun x681 () Real)
(declare-fun x225 () Real)
(declare-fun x542 () Real)
(declare-fun x887 () Bool)
(declare-fun x463 () Real)
(declare-fun x46 () Real)
(declare-fun x762 () Bool)
(declare-fun x266 () Bool)
(declare-fun x675 () Real)
(declare-fun x452 () Bool)
(declare-fun x738 () Real)
(declare-fun x849 () Real)
(declare-fun x187 () Real)
(declare-fun x551 () Real)
(declare-fun x578 (Real) Real)
(declare-fun x106 () Real)
(declare-fun x759 () Bool)
(declare-fun x797 () Real)
(declare-fun x453 () Bool)
(declare-fun x741 () Bool)
(declare-fun x560 () Real)
(declare-fun x208 () Real)
(declare-fun x460 () Real)
(declare-fun x448 () Real)
(declare-fun x165 () Bool)
(declare-fun x737 () Real)
(declare-fun x351 (Real) Real)
(declare-fun x832 () Bool)
(declare-fun x816 () Real)
(declare-fun x24 () Real)
(declare-fun x409 () Real)
(declare-fun x534 () Real)
(declare-fun x159 () Real)
(declare-fun x592 () Real)
(declare-fun x321 (Real Real) Real)
(declare-fun x14 () Real)
(declare-fun x838 () Bool)
(declare-fun x89 () Real)
(declare-fun x55 () Real)
(declare-fun x635 () Real)
(declare-fun x632 () Real)
(declare-fun x821 () Real)
(declare-fun x412 () Real)
(declare-fun x801 () Real)
(declare-fun x708 () Real)
(declare-fun x923 () Real)
(declare-fun x161 (Real) Real)
(declare-fun x783 () Real)
(declare-fun x69 () Bool)
(declare-fun x166 () Bool)
(declare-fun x702 () Bool)
(declare-fun x682 () Real)
(declare-fun x896 (Real Real) Real)
(declare-fun x657 () Bool)
(declare-fun x249 (Real) Real)
(declare-fun x175 () Real)
(declare-fun x95 () Bool)
(declare-fun x428 () Real)
(declare-fun x93 () Real)
(declare-fun x526 () Bool)
(declare-fun x363 () Bool)
(declare-fun x293 () Real)
(declare-fun x573 () Real)
(declare-fun x120 () Bool)
(declare-fun x171 () Real)
(declare-fun x54 () Real)
(declare-fun x44 () Real)
(declare-fun x427 (Real Real) Real)
(declare-fun x35 () Real)
(declare-fun x703 () Real)
(declare-fun x121 () Real)
(declare-fun x76 () Real)
(declare-fun x369 () Bool)
(declare-fun x451 () Real)
(declare-fun x555 () Real)
(declare-fun x315 () Real)
(declare-fun x610 () Real)
(declare-fun x389 () Real)
(declare-fun x135 () Bool)
(declare-fun x749 () Bool)
(declare-fun x812 () Real)
(declare-fun x571 () Real)
(declare-fun x874 () Real)
(declare-fun x224 () Bool)
(declare-fun x6 () Real)
(declare-fun x533 () Real)
(declare-fun x193 () Real)
(declare-fun x23 () Bool)
(declare-fun x332 () Bool)
(declare-fun x582 () Real)
(declare-fun x630 () Real)
(declare-fun x701 () Bool)
(declare-fun x324 (Real) Real)
(declare-fun x751 () Bool)
(declare-fun x892 () Bool)
(declare-fun x844 () Real)
(declare-fun x209 () Real)
(declare-fun x593 () Bool)
(declare-fun x278 () Real)
(declare-fun x50 () Real)
(declare-fun x531 () Real)
(declare-fun x318 () Real)
(declare-fun x211 () Real)
(declare-fun x66 () Real)
(declare-fun x358 () Bool)
(declare-fun x257 () Bool)
(declare-fun x78 () Real)
(declare-fun x223 () Bool)
(declare-fun x645 () Real)
(declare-fun x700 () Real)
(declare-fun x684 () Real)
(declare-fun x597 () Real)
(declare-fun x608 () Real)
(declare-fun x628 () Real)
(declare-fun x490 () Real)
(declare-fun x163 () Real)
(declare-fun x228 () Real)
(declare-fun x507 () Real)
(declare-fun x172 () Real)
(declare-fun x269 () Bool)
(declare-fun x320 () Real)
(declare-fun x693 (Real) Real)
(declare-fun x830 () Real)
(declare-fun x810 () Real)
(declare-fun x862 () Bool)
(declare-fun x510 () Real)
(declare-fun x780 () Real)
(declare-fun x625 () Real)
(declare-fun x835 () Bool)
(declare-fun x212 () Real)
(define-fun x666 ((x220 Real)) Real (ite (and (>= x220 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220)) x220 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x85 ((x220 Real)) Real (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x220) (< x220 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220) x220))
(define-fun x149 ((x353 Real)) Bool (and (< x353 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x353)))
(define-fun x286 ((x353 Real)) Bool (and (<= 0 x353) (< x353 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x417 ((x353 Real)) Bool (and (= x353 (x321 x353 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x321 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353) x353)))
(define-fun x885 ((x353 Real)) Bool (and (= 0 (x321 x353 0)) (= 0 (x321 0 x353))))
(define-fun x458 ((x353 Real)) Bool (= (x321 x353 x353) x353))
(define-fun x520 ((x353 Real)) Bool (and (x458 x353) (x417 x353) (x885 x353)))
(define-fun x656 ((x353 Real)) Bool (= (x321 20282409603651670423947251286015 x353) (x321 20282409603651670423947251286015 (x321 20282409603651670423947251286015 x353))))
(define-fun x836 ((x353 Real)) Bool (=> (and (<= 0 x353) (< x353 20282409603651670423947251286016)) (= x353 (x321 20282409603651670423947251286015 x353))))
(define-fun x528 ((x353 Real)) Bool (=> (= x353 (x321 20282409603651670423947251286015 x353)) (and (>= x353 0) (< x353 20282409603651670423947251286016))))
(define-fun x9 ((x353 Real)) Bool (=> (and (<= 20282409603651670423947251286016 x353) (< x353 40564819207303340847894502572032)) (= (x321 20282409603651670423947251286015 x353) (- x353 20282409603651670423947251286016))))
(define-fun x532 ((x353 Real) (x499 Real)) Bool (and (= x353 (+ (x321 20282409603651670423947251286015 x353) (* x499 20282409603651670423947251286016))) (>= x499 0)))
(define-fun x871 ((x353 Real) (x577 Real)) Bool (and (x656 x353) (x836 x353) (x532 x353 x577) (x9 x353) (x528 x353)))
(define-fun x167 ((x353 Real) (x499 Real)) Bool (= (x321 x499 x353) (x321 x353 x499)))
(define-fun x753 ((x353 Real) (x499 Real)) Bool (and (=> (>= x499 0) (<= (x321 x353 x499) x499)) (=> (>= x353 0) (>= x353 (x321 x353 x499))) (<= 0 (x321 x353 x499))))
(define-fun x561 ((x353 Real) (x499 Real)) Bool (and (x167 x353 x499) (x753 x353 x499)))
(define-fun x886 ((x353 Real) (x577 Real)) Bool (and (x871 x353 x577) (x561 x353 20282409603651670423947251286015)))
(define-fun x873 ((x353 Real)) Bool (= (ite (> 10141204801825835211973625643008 (x321 x353 20282409603651670423947251286015)) (x321 x353 20282409603651670423947251286015) (+ (x321 x353 20282409603651670423947251286015) 115792089237316195423570985008687907853269984645358154435805913583965878353920)) (x226 x353)))
(define-fun x304 ((x353 Real)) Bool (= (x321 1 (x321 1 x353)) (x321 1 x353)))
(define-fun x891 ((x353 Real)) Bool (=> (and (< x353 2) (<= 0 x353)) (= (x321 1 x353) x353)))
(define-fun x914 ((x353 Real)) Bool (=> (= x353 (x321 1 x353)) (and (>= x353 0) (< x353 2))))
(define-fun x329 ((x353 Real)) Bool (=> (and (< x353 4) (>= x353 2)) (= (x321 1 x353) (- x353 2))))
(define-fun x522 ((x353 Real) (x499 Real)) Bool (and (<= 0 x499) (= (+ (x321 1 x353) (* x499 2)) x353)))
(define-fun x52 ((x353 Real) (x577 Real)) Bool (and (x304 x353) (x891 x353) (x914 x353) (x522 x353 x577) (x329 x353)))
(define-fun x419 ((x353 Real) (x577 Real)) Bool (and (x561 x353 1) (x52 x353 x577)))
(define-fun x743 ((x353 Real)) Bool (= (x321 255 x353) (x321 255 (x321 255 x353))))
(define-fun x775 ((x353 Real)) Bool (=> (and (< x353 256) (>= x353 0)) (= (x321 255 x353) x353)))
(define-fun x116 ((x353 Real)) Bool (=> (= x353 (x321 255 x353)) (and (< x353 256) (<= 0 x353))))
(define-fun x496 ((x353 Real)) Bool (=> (and (< x353 512) (<= 256 x353)) (= (- x353 256) (x321 255 x353))))
(define-fun x421 ((x353 Real) (x499 Real)) Bool (and (= x353 (+ (* 256 x499) (x321 255 x353))) (<= 0 x499)))
(define-fun x763 ((x353 Real) (x577 Real)) Bool (and (x116 x353) (x743 x353) (x775 x353) (x496 x353) (x421 x353 x577)))
(define-fun x637 ((x353 Real) (x577 Real)) Bool (and (x561 x353 255) (x763 x353 x577)))
(define-fun x804 ((x353 Real)) Bool (= (x321 1461501637330902918203684832716283019655932542975 (x321 1461501637330902918203684832716283019655932542975 x353)) (x321 1461501637330902918203684832716283019655932542975 x353)))
(define-fun x748 ((x353 Real)) Bool (=> (and (< x353 1461501637330902918203684832716283019655932542976) (>= x353 0)) (= x353 (x321 1461501637330902918203684832716283019655932542975 x353))))
(define-fun x139 ((x353 Real)) Bool (=> (= (x321 1461501637330902918203684832716283019655932542975 x353) x353) (and (< x353 1461501637330902918203684832716283019655932542976) (<= 0 x353))))
(define-fun x29 ((x353 Real)) Bool (=> (and (>= x353 1461501637330902918203684832716283019655932542976) (< x353 2923003274661805836407369665432566039311865085952)) (= (- x353 1461501637330902918203684832716283019655932542976) (x321 1461501637330902918203684832716283019655932542975 x353))))
(define-fun x467 ((x353 Real) (x499 Real)) Bool (and (>= x499 0) (= x353 (+ (* 1461501637330902918203684832716283019655932542976 x499) (x321 1461501637330902918203684832716283019655932542975 x353)))))
(define-fun x373 ((x353 Real) (x577 Real)) Bool (and (x748 x353) (x139 x353) (x467 x353 x577) (x29 x353) (x804 x353)))
(define-fun x670 ((x353 Real) (x577 Real)) Bool (and (x561 x353 1461501637330902918203684832716283019655932542975) (x373 x353 x577)))
(define-fun x771 ((x353 Real)) Bool (= (x321 65535 (x321 65535 x353)) (x321 65535 x353)))
(define-fun x150 ((x353 Real)) Bool (=> (and (< x353 65536) (<= 0 x353)) (= (x321 65535 x353) x353)))
(define-fun x117 ((x353 Real)) Bool (=> (= x353 (x321 65535 x353)) (and (>= x353 0) (< x353 65536))))
(define-fun x808 ((x353 Real)) Bool (=> (and (> 131072 x353) (>= x353 65536)) (= (- x353 65536) (x321 65535 x353))))
(define-fun x508 ((x353 Real) (x499 Real)) Bool (and (= (+ (x321 65535 x353) (* 65536 x499)) x353) (<= 0 x499)))
(define-fun x140 ((x353 Real) (x577 Real)) Bool (and (x117 x353) (x150 x353) (x508 x353 x577) (x808 x353) (x771 x353)))
(define-fun x813 ((x353 Real) (x577 Real)) Bool (and (x561 x353 65535) (x140 x353 x577)))
(define-fun x111 ((x353 Real)) Bool (and (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x896 x353 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x723 ((x353 Real)) Bool (and (= x353 (x896 x353 0)) (= (x896 0 x353) x353)))
(define-fun x43 ((x353 Real)) Bool (= x353 (x896 x353 x353)))
(define-fun x820 ((x353 Real)) Bool (and (x723 x353) (x43 x353) (x111 x353)))
(define-fun x2 ((x353 Real) (x499 Real)) Bool (= (x896 x499 x353) (x896 x353 x499)))
(define-fun x449 ((x353 Real) (x499 Real)) Bool (and (>= (+ x353 x499) (x896 x353 x499)) (=> (>= x353 0) (>= (x896 x353 x499) x353)) (=> (<= 0 x499) (<= x499 (x896 x353 x499)))))
(define-fun x563 ((x353 Real) (x499 Real)) Bool (and (x2 x353 x499) (x449 x353 x499)))
(define-fun x683 ((x353 Real)) Bool (= (x321 18446744073709551615 (x321 18446744073709551615 x353)) (x321 18446744073709551615 x353)))
(define-fun x424 ((x353 Real)) Bool (=> (and (> 18446744073709551616 x353) (>= x353 0)) (= x353 (x321 18446744073709551615 x353))))
(define-fun x279 ((x353 Real)) Bool (=> (= (x321 18446744073709551615 x353) x353) (and (<= 0 x353) (> 18446744073709551616 x353))))
(define-fun x894 ((x353 Real)) Bool (=> (and (> 36893488147419103232 x353) (>= x353 18446744073709551616)) (= (x321 18446744073709551615 x353) (- x353 18446744073709551616))))
(define-fun x856 ((x353 Real) (x499 Real)) Bool (and (<= 0 x499) (= (+ (x321 18446744073709551615 x353) (* x499 18446744073709551616)) x353)))
(define-fun x339 ((x353 Real) (x577 Real)) Bool (and (x894 x353) (x424 x353) (x856 x353 x577) (x683 x353) (x279 x353)))
(define-fun x298 ((x353 Real) (x577 Real)) Bool (and (x561 x353 18446744073709551615) (x339 x353 x577)))
(define-fun x489 ((x353 Real)) Bool (= (x321 340282366920938463463374607431768211455 (x321 340282366920938463463374607431768211455 x353)) (x321 340282366920938463463374607431768211455 x353)))
(define-fun x311 ((x353 Real)) Bool (=> (and (>= x353 0) (> 340282366920938463463374607431768211456 x353)) (= x353 (x321 340282366920938463463374607431768211455 x353))))
(define-fun x114 ((x353 Real)) Bool (=> (= x353 (x321 340282366920938463463374607431768211455 x353)) (and (<= 0 x353) (> 340282366920938463463374607431768211456 x353))))
(define-fun x157 ((x353 Real)) Bool (=> (and (> 680564733841876926926749214863536422912 x353) (<= 340282366920938463463374607431768211456 x353)) (= (x321 340282366920938463463374607431768211455 x353) (- x353 340282366920938463463374607431768211456))))
(define-fun x747 ((x353 Real) (x499 Real)) Bool (and (>= x499 0) (= (+ (x321 340282366920938463463374607431768211455 x353) (* x499 340282366920938463463374607431768211456)) x353)))
(define-fun x308 ((x353 Real) (x577 Real)) Bool (and (x489 x353) (x747 x353 x577) (x157 x353) (x114 x353) (x311 x353)))
(define-fun x160 ((x353 Real) (x577 Real)) Bool (and (x308 x353 x577) (x561 x353 340282366920938463463374607431768211455)))
(define-fun x758 ((x353 Real)) Bool (= (ite (< (x321 x353 340282366920938463463374607431768211455) 170141183460469231731687303715884105728) (x321 x353 340282366920938463463374607431768211455) (+ 115792089237316195423570985008687907852929702298719625575994209400481361428480 (x321 x353 340282366920938463463374607431768211455))) (x406 x353)))
(define-fun x122 ((x851 Real)) Real (ite (= x851 128) 115197700812830431890159100217698998050002284567939525164234024451216521560064 (x831 x851)))
(define-fun x177 ((x851 Real)) Real (ite (= 128 x851) x403 (x249 x851)))
(define-fun x430 ((x851 Real)) Real (ite (= 160 x851) x534 (x177 x851)))
(define-fun x454 ((x851 Real)) Real (ite (= x851 192) x623 (x430 x851)))
(define-fun x718 ((x851 Real)) Real (ite (= 224 x851) x113 (x454 x851)))
(define-fun x215 ((x851 Real)) Real (ite (= 256 x851) x265 (x718 x851)))
(define-fun x627 ((x851 Real)) Real (ite (= x851 128) x264 (x122 x851)))
(define-fun x904 ((x851 Real)) Real (ite (= x851 160) x460 (x627 x851)))
(define-fun x462 ((x851 Real)) Real (ite (= x851 192) x258 (x904 x851)))
(define-fun x713 ((x851 Real)) Real (ite (= 224 x851) x684 (x462 x851)))
(define-fun x262 ((x851 Real)) Real (ite (= x851 256) x830 (x713 x851)))
(define-fun x57 ((x851 Real)) Real (ite (= x851 0) x212 (x97 x851)))
(define-fun x695 ((x851 Real)) Real (ite (= 32 x851) x679 (x57 x851)))
(define-fun x784 ((x851 Real)) Real (ite (= x851 64) x848 (x695 x851)))
(define-fun x203 ((x851 Real)) Real (ite (= x851 96) x7 (x784 x851)))
(define-fun x641 ((x851 Real)) Real (ite (= 128 x851) x28 (x203 x851)))
(define-fun x254 ((x851 Real)) Real (ite (= x851 640) 0 (x578 x851)))
(define-fun x786 ((x851 Real)) Real (ite (= 672 x851) x350 (x88 x851)))
(define-fun x614 ((x851 Real)) Real (ite (= 704 x851) x761 (x791 x851)))
(define-fun x826 ((x851 Real)) Real (ite (= 736 x851) x82 (x616 x851)))
(define-fun x566 ((x851 Real)) Real (ite (= 768 x851) x392 (x394 x851)))
(define-fun x62 ((x851 Real)) Real (ite (= 800 x851) x809 (x570 x851)))
(define-fun x132 ((x851 Real)) Real (ite (= x851 832) x812 (x880 x851)))
(define-fun x714 ((x851 Real)) Real (ite (= x851 864) x209 (x921 x851)))
(define-fun x805 ((x851 Real)) Real (ite (= x428 x851) x524 (x87 x851)))
(define-fun x916 ((x851 Real)) Real (ite (= x368 x851) x800 (x87 x851)))
(define-fun x280 ((x851 Real)) Real (ite (and x202 (not x224)) (ite (and x202 (not x422) (not x224)) (x87 x851) (x916 x851)) (x805 x851)))
(define-fun x365 ((x851 Real)) Real (ite (= 128 x851) 115197700812830431890159100217698998050002284567939525164234024451216521560064 (x799 x851)))
(define-fun x110 ((x851 Real)) Real (ite (= 128 x851) x403 (x71 x851)))
(define-fun x790 ((x851 Real)) Real (ite (= x851 160) x425 (x110 x851)))
(define-fun x170 ((x851 Real)) Real (ite (= 192 x851) x623 (x790 x851)))
(define-fun x164 ((x851 Real)) Real (ite (= 224 x851) x113 (x170 x851)))
(define-fun x870 ((x851 Real)) Real (ite (= 256 x851) x265 (x164 x851)))
(define-fun x709 ((x851 Real)) Real (ite (= x851 128) x584 (x365 x851)))
(define-fun x242 ((x851 Real)) Real (ite (= x851 160) x426 (x709 x851)))
(define-fun x342 ((x851 Real)) Real (ite (= x851 192) x151 (x242 x851)))
(define-fun x908 ((x851 Real)) Real (ite (= 224 x851) x27 (x342 x851)))
(define-fun x480 ((x851 Real)) Real (ite (= 256 x851) x386 (x908 x851)))
(define-fun x716 ((x851 Real)) Real (ite (= x851 0) x766 (x36 x851)))
(define-fun x711 ((x851 Real)) Real (ite (= x851 32) x17 (x716 x851)))
(define-fun x495 ((x851 Real)) Real (ite (= 64 x851) x306 (x711 x851)))
(define-fun x130 ((x851 Real)) Real (ite (= 96 x851) x537 (x495 x851)))
(define-fun x268 ((x851 Real)) Real (ite (= x851 128) x211 (x130 x851)))
(define-fun x549 ((x851 Real)) Real (ite (= x851 544) 0 (x178 x851)))
(define-fun x824 ((x851 Real)) Real (ite (= x851 576) x79 (x162 x851)))
(define-fun x233 ((x851 Real)) Real (ite (= x851 608) x55 (x379 x851)))
(define-fun x918 ((x851 Real)) Real (ite (= x851 640) x309 (x252 x851)))
(define-fun x469 ((x851 Real)) Real (ite (= x851 672) x241 (x589 x851)))
(define-fun x261 ((x851 Real)) Real (ite (= x851 704) x552 (x517 x851)))
(define-fun x459 ((x851 Real)) Real (ite (= 736 x851) x674 (x378 x851)))
(define-fun x314 ((x851 Real)) Real (ite (= 768 x851) x595 (x478 x851)))
(define-fun x866 ((x851 Real)) Real (ite (= x851 128) x849 (x253 x851)))
(define-fun x869 ((x851 Real)) Real (ite (= x851 160) x391 (x866 x851)))
(define-fun x195 ((x851 Real)) Real (ite (= 192 x851) x441 (x869 x851)))
(define-fun x530 ((x851 Real)) Real (ite (= x851 224) x571 (x195 x851)))
(define-fun x434 ((x851 Real)) Real (ite (= x851 256) x293 (x530 x851)))
(define-fun x86 ((x851 Real)) Real (ite (= x851 800) x398 (x535 x851)))
(define-fun x47 ((x851 Real)) Real (ite (= x851 832) x243 (x86 x851)))
(define-fun x10 ((x851 Real)) Real (ite (= 864 x851) x115 (x47 x851)))
(define-fun x488 ((x851 Real)) Real (ite (= x851 896) x782 (x10 x851)))
(define-fun x232 ((x851 Real)) Real (ite (= 928 x851) x677 (x488 x851)))
(define-fun x437 ((x851 Real)) Real (ite (= 0 x851) x625 (x636 x851)))
(define-fun x472 ((x851 Real)) Real (ite (= x851 32) x669 (x437 x851)))
(define-fun x717 ((x851 Real)) Real (ite (= 64 x851) x134 (x472 x851)))
(define-fun x168 ((x851 Real)) Real (ite (= 96 x851) x704 (x717 x851)))
(define-fun x259 ((x851 Real)) Real (ite (= x851 128) x471 (x168 x851)))
(define-fun x299 ((x851 Real)) Real (ite (= x851 544) 0 (x644 x851)))
(define-fun x383 ((x851 Real)) Real (ite (= 576 x851) x355 (x922 x851)))
(define-fun x470 ((x851 Real)) Real (ite (= 608 x851) x730 (x12 x851)))
(define-fun x103 ((x851 Real)) Real (ite (= 640 x851) x834 (x351 x851)))
(define-fun x137 ((x851 Real)) Real (ite (= x851 672) x30 (x814 x851)))
(define-fun x456 ((x851 Real)) Real (ite (= x851 704) x174 (x692 x851)))
(define-fun x230 ((x851 Real)) Real (ite (= x851 736) x860 (x707 x851)))
(define-fun x500 ((x851 Real)) Real (ite (= x851 768) x16 (x660 x851)))
(define-fun x818 ((x851 Real)) Real (ite (= 128 x851) x849 (x671 x851)))
(define-fun x333 ((x851 Real)) Real (ite (= x851 160) x777 (x818 x851)))
(define-fun x519 ((x851 Real)) Real (ite (= 192 x851) x441 (x333 x851)))
(define-fun x506 ((x851 Real)) Real (ite (= 224 x851) x571 (x519 x851)))
(define-fun x271 ((x851 Real)) Real (ite (= x851 256) x293 (x506 x851)))
(define-fun x728 ((x851 Real)) Real (ite (= 800 x851) x844 (x594 x851)))
(define-fun x235 ((x851 Real)) Real (ite (= 832 x851) x503 (x728 x851)))
(define-fun x493 ((x851 Real)) Real (ite (= x851 864) x42 (x235 x851)))
(define-fun x322 ((x851 Real)) Real (ite (= x851 896) x461 (x493 x851)))
(define-fun x562 ((x851 Real)) Real (ite (= 928 x851) x769 (x322 x851)))
(define-fun x341 ((x851 Real)) Real (ite (= 0 x851) x668 (x920 x851)))
(define-fun x272 ((x851 Real)) Real (ite (= x851 32) x11 (x341 x851)))
(define-fun x323 ((x851 Real)) Real (ite (= x851 64) x389 (x272 x851)))
(define-fun x429 ((x851 Real)) Real (ite (= x851 96) x255 (x323 x851)))
(define-fun x876 ((x851 Real)) Real (ite (= x851 128) x899 (x429 x851)))
(define-fun x312 ((x851 Real)) Real (ite (= x851 128) x403 (x693 x851)))
(define-fun x99 ((x851 Real)) Real (ite (= 160 x851) x121 (x312 x851)))
(define-fun x558 ((x851 Real)) Real (ite (= 192 x851) x623 (x99 x851)))
(define-fun x529 ((x851 Real)) Real (ite (= 224 x851) x113 (x558 x851)))
(define-fun x690 ((x851 Real)) Real (ite (= 256 x851) x265 (x529 x851)))
(define-fun x878 ((x851 Real)) Real (ite (= 800 x851) x409 (x535 x851)))
(define-fun x548 ((x851 Real)) Real (ite (= 832 x851) x740 (x878 x851)))
(define-fun x504 ((x851 Real)) Real (ite (= x851 864) x602 (x548 x851)))
(define-fun x104 ((x851 Real)) Real (ite (= x851 896) x193 (x504 x851)))
(define-fun x382 ((x851 Real)) Real (ite (= x851 928) x705 (x104 x851)))
(define-fun x485 ((x851 Real)) Real (ite (= x851 0) x416 (x636 x851)))
(define-fun x854 ((x851 Real)) Real (ite (= x851 32) x621 (x485 x851)))
(define-fun x877 ((x851 Real)) Real (ite (= x851 64) x133 (x854 x851)))
(define-fun x45 ((x851 Real)) Real (ite (= 96 x851) x603 (x877 x851)))
(define-fun x184 ((x851 Real)) Real (ite (= 128 x851) x238 (x45 x851)))
(define-fun x234 ((x851 Real)) Real (ite (= x851 128) x403 (x161 x851)))
(define-fun x875 ((x851 Real)) Real (ite (= 160 x851) x739 (x234 x851)))
(define-fun x400 ((x851 Real)) Real (ite (= 192 x851) x623 (x875 x851)))
(define-fun x591 ((x851 Real)) Real (ite (= x851 224) x113 (x400 x851)))
(define-fun x796 ((x851 Real)) Real (ite (= x851 256) x265 (x591 x851)))
(define-fun x617 ((x851 Real)) Real (ite (= 800 x851) x874 (x594 x851)))
(define-fun x25 ((x851 Real)) Real (ite (= x851 832) x345 (x617 x851)))
(define-fun x124 ((x851 Real)) Real (ite (= 864 x851) x423 (x25 x851)))
(define-fun x199 ((x851 Real)) Real (ite (= x851 896) x303 (x124 x851)))
(define-fun x41 ((x851 Real)) Real (ite (= 928 x851) x371 (x199 x851)))
(define-fun x719 ((x851 Real)) Real (ite (= x851 0) x438 (x920 x851)))
(define-fun x370 ((x851 Real)) Real (ite (= x851 32) x295 (x719 x851)))
(define-fun x497 ((x851 Real)) Real (ite (= x851 64) x366 (x370 x851)))
(define-fun x176 ((x851 Real)) Real (ite (= x851 96) x675 (x497 x851)))
(define-fun x576 ((x851 Real)) Real (ite (= 128 x851) x145 (x176 x851)))
(define-fun x275 ((x851 Real)) Real (ite (and x898 x525) (x232 x851) (x382 x851)))
(define-fun x619 ((x851 Real)) Real (ite (and x638 x749) (x562 x851) (x41 x851)))
(assert (axiom_frac_bound (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x287 x222 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297 x727 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x33 x307 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x34 x141 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x451 x907 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x745 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x5 x889 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51 (x406 x250) (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x533 x200 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x551 x200 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554 x543 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x649 x923 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x745 x5 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x788 (x406 x463) (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_zero (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936 x889 x5 (uninterp_frac (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (axiom_frac_bound 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x287 x222 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x297 x727 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x33 x307 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x34 x141 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x451 x907 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x5 x745 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x5 x889 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x51 (x406 x250) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x533 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x551 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x554 x543 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x649 x923 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x745 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x788 (x406 x463) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451 x889 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451)))
(assert (axiom_frac_bound 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x287 x222 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x297 x727 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x33 x307 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x34 x141 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x451 x907 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x5 x745 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x5 x889 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x51 (x406 x250) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x533 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x551 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x554 x543 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x649 x923 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x745 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x788 (x406 x463) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543 x889 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543)))
(assert (axiom_frac_bound 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x287 x222 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x297 x727 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x33 x307 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x34 x141 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x451 x907 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x5 x745 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x5 x889 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x51 (x406 x250) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x533 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x551 x200 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x554 x543 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x649 x923 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x745 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x788 (x406 x463) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_zero 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923 x889 x5 (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923)))
(assert (axiom_frac_bound x191 1461501637330902918203684832716283019655932542976))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x287 x222 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x297 x727 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x33 x307 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x34 x141 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x451 x907 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x5 x745 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x5 x889 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x51 (x406 x250) (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x533 x200 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x551 x200 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x554 x543 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x649 x923 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x745 x5 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x788 (x406 x463) (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x191 1461501637330902918203684832716283019655932542976 x889 x5 (uninterp_frac x191 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_bound x191 374144419156711147060143317175368453031918731001856))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x287 x222 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x297 x727 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x33 x307 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x34 x141 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x451 x907 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x5 x745 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x5 x889 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x51 (x406 x250) (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x533 x200 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x551 x200 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x554 x543 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x649 x923 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x745 x5 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x788 (x406 x463) (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_zero x191 374144419156711147060143317175368453031918731001856 x889 x5 (uninterp_frac x191 374144419156711147060143317175368453031918731001856)))
(assert (axiom_frac_bound x316 2))
(assert (axiom_frac_zero x316 2 x287 x222 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x297 x727 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x33 x307 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x34 x141 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x451 x907 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x5 x745 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x5 x889 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x51 (x406 x250) (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x533 x200 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x551 x200 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x554 x543 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x649 x923 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x745 x5 (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x788 (x406 x463) (uninterp_frac x316 2)))
(assert (axiom_frac_zero x316 2 x889 x5 (uninterp_frac x316 2)))
(assert (axiom_frac_bound x46 2))
(assert (axiom_frac_zero x46 2 x287 x222 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x297 x727 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x33 x307 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x34 x141 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x451 x907 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x5 x745 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x5 x889 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x51 (x406 x250) (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x533 x200 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x551 x200 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x554 x543 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x649 x923 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x745 x5 (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x788 (x406 x463) (uninterp_frac x46 2)))
(assert (axiom_frac_zero x46 2 x889 x5 (uninterp_frac x46 2)))
(assert (axiom_frac_bound x557 1461501637330902918203684832716283019655932542976))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x287 x222 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x297 x727 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x33 x307 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x34 x141 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x451 x907 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x5 x745 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x5 x889 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x51 (x406 x250) (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x533 x200 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x551 x200 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x554 x543 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x649 x923 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x745 x5 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x788 (x406 x463) (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_zero x557 1461501637330902918203684832716283019655932542976 x889 x5 (uninterp_frac x557 1461501637330902918203684832716283019655932542976)))
(assert (axiom_frac_bound x557 6277101735386680763835789423207666416102355444464034512896))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x287 x222 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x297 x727 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x33 x307 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x34 x141 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x451 x907 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x5 x745 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x5 x889 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x51 (x406 x250) (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x533 x200 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x551 x200 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x554 x543 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x649 x923 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x745 x5 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x788 (x406 x463) (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_zero x557 6277101735386680763835789423207666416102355444464034512896 x889 x5 (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896)))
(assert (axiom_frac_bound x557 95780971304118053647396689196894323976171195136475136))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x287 x222 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x297 x727 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x33 x307 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x34 x141 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x451 x907 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x5 x745 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x5 x889 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x51 (x406 x250) (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x533 x200 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x551 x200 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x554 x543 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x649 x923 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x745 x5 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x788 (x406 x463) (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_zero x557 95780971304118053647396689196894323976171195136475136 x889 x5 (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)))
(assert (axiom_frac_bound x629 2))
(assert (axiom_frac_zero x629 2 x287 x222 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x297 x727 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x33 x307 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x34 x141 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x451 x907 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x5 x745 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x5 x889 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x51 (x406 x250) (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x533 x200 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x551 x200 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x554 x543 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x649 x923 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x745 x5 (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x788 (x406 x463) (uninterp_frac x629 2)))
(assert (axiom_frac_zero x629 2 x889 x5 (uninterp_frac x629 2)))
(assert (axiom_int_approximation x1))
(assert (axiom_int_approximation x102))
(assert (axiom_int_approximation x105))
(assert (axiom_int_approximation x106))
(assert (axiom_int_approximation x107))
(assert (axiom_int_approximation x108))
(assert (axiom_int_approximation x11))
(assert (axiom_int_approximation x112))
(assert (axiom_int_approximation x113))
(assert (axiom_int_approximation x115))
(assert (axiom_int_approximation x118))
(assert (axiom_int_approximation x121))
(assert (axiom_int_approximation x126))
(assert (axiom_int_approximation x128))
(assert (axiom_int_approximation x129))
(assert (axiom_int_approximation x131))
(assert (axiom_int_approximation x133))
(assert (axiom_int_approximation x134))
(assert (axiom_int_approximation x138))
(assert (axiom_int_approximation x14))
(assert (axiom_int_approximation x141))
(assert (axiom_int_approximation x142))
(assert (axiom_int_approximation x143))
(assert (axiom_int_approximation x144))
(assert (axiom_int_approximation x145))
(assert (axiom_int_approximation x146))
(assert (axiom_int_approximation x147))
(assert (axiom_int_approximation x15))
(assert (axiom_int_approximation x151))
(assert (axiom_int_approximation x152))
(assert (axiom_int_approximation x153))
(assert (axiom_int_approximation x154))
(assert (axiom_int_approximation x155))
(assert (axiom_int_approximation x156))
(assert (axiom_int_approximation x158))
(assert (axiom_int_approximation x159))
(assert (axiom_int_approximation x16))
(assert (axiom_int_approximation x163))
(assert (axiom_int_approximation x169))
(assert (axiom_int_approximation x17))
(assert (axiom_int_approximation x171))
(assert (axiom_int_approximation x172))
(assert (axiom_int_approximation x173))
(assert (axiom_int_approximation x174))
(assert (axiom_int_approximation x175))
(assert (axiom_int_approximation x179))
(assert (axiom_int_approximation x18))
(assert (axiom_int_approximation x180))
(assert (axiom_int_approximation x181))
(assert (axiom_int_approximation x183))
(assert (axiom_int_approximation x186))
(assert (axiom_int_approximation x187))
(assert (axiom_int_approximation x188))
(assert (axiom_int_approximation x189))
(assert (axiom_int_approximation x19))
(assert (axiom_int_approximation x191))
(assert (axiom_int_approximation x192))
(assert (axiom_int_approximation x193))
(assert (axiom_int_approximation x196))
(assert (axiom_int_approximation x20))
(assert (axiom_int_approximation x200))
(assert (axiom_int_approximation x201))
(assert (axiom_int_approximation x204))
(assert (axiom_int_approximation x205))
(assert (axiom_int_approximation x206))
(assert (axiom_int_approximation x207))
(assert (axiom_int_approximation x208))
(assert (axiom_int_approximation x209))
(assert (axiom_int_approximation x21))
(assert (axiom_int_approximation x210))
(assert (axiom_int_approximation x211))
(assert (axiom_int_approximation x212))
(assert (axiom_int_approximation x213))
(assert (axiom_int_approximation x214))
(assert (axiom_int_approximation x216))
(assert (axiom_int_approximation x217))
(assert (axiom_int_approximation x219))
(assert (axiom_int_approximation x22))
(assert (axiom_int_approximation x222))
(assert (axiom_int_approximation x225))
(assert (axiom_int_approximation x227))
(assert (axiom_int_approximation x228))
(assert (axiom_int_approximation x229))
(assert (axiom_int_approximation x231))
(assert (axiom_int_approximation x236))
(assert (axiom_int_approximation x237))
(assert (axiom_int_approximation x238))
(assert (axiom_int_approximation x239))
(assert (axiom_int_approximation x24))
(assert (axiom_int_approximation x240))
(assert (axiom_int_approximation x241))
(assert (axiom_int_approximation x243))
(assert (axiom_int_approximation x244))
(assert (axiom_int_approximation x245))
(assert (axiom_int_approximation x247))
(assert (axiom_int_approximation x250))
(assert (axiom_int_approximation x255))
(assert (axiom_int_approximation x258))
(assert (axiom_int_approximation x260))
(assert (axiom_int_approximation x263))
(assert (axiom_int_approximation x264))
(assert (axiom_int_approximation x265))
(assert (axiom_int_approximation x267))
(assert (axiom_int_approximation x27))
(assert (axiom_int_approximation x274))
(assert (axiom_int_approximation x277))
(assert (axiom_int_approximation x278))
(assert (axiom_int_approximation x28))
(assert (axiom_int_approximation x281))
(assert (axiom_int_approximation x283))
(assert (axiom_int_approximation x284))
(assert (axiom_int_approximation x285))
(assert (axiom_int_approximation x287))
(assert (axiom_int_approximation x290))
(assert (axiom_int_approximation x293))
(assert (axiom_int_approximation x294))
(assert (axiom_int_approximation x295))
(assert (axiom_int_approximation x297))
(assert (axiom_int_approximation x3))
(assert (axiom_int_approximation x30))
(assert (axiom_int_approximation x300))
(assert (axiom_int_approximation x301))
(assert (axiom_int_approximation x302))
(assert (axiom_int_approximation x303))
(assert (axiom_int_approximation x305))
(assert (axiom_int_approximation x306))
(assert (axiom_int_approximation x307))
(assert (axiom_int_approximation x309))
(assert (axiom_int_approximation x310))
(assert (axiom_int_approximation x313))
(assert (axiom_int_approximation x315))
(assert (axiom_int_approximation x316))
(assert (axiom_int_approximation x317))
(assert (axiom_int_approximation x318))
(assert (axiom_int_approximation x32))
(assert (axiom_int_approximation x320))
(assert (axiom_int_approximation x325))
(assert (axiom_int_approximation x326))
(assert (axiom_int_approximation x327))
(assert (axiom_int_approximation x33))
(assert (axiom_int_approximation x330))
(assert (axiom_int_approximation x336))
(assert (axiom_int_approximation x337))
(assert (axiom_int_approximation x338))
(assert (axiom_int_approximation x34))
(assert (axiom_int_approximation x340))
(assert (axiom_int_approximation x343))
(assert (axiom_int_approximation x344))
(assert (axiom_int_approximation x345))
(assert (axiom_int_approximation x348))
(assert (axiom_int_approximation x35))
(assert (axiom_int_approximation x350))
(assert (axiom_int_approximation x352))
(assert (axiom_int_approximation x354))
(assert (axiom_int_approximation x355))
(assert (axiom_int_approximation x356))
(assert (axiom_int_approximation x357))
(assert (axiom_int_approximation x360))
(assert (axiom_int_approximation x361))
(assert (axiom_int_approximation x362))
(assert (axiom_int_approximation x364))
(assert (axiom_int_approximation x366))
(assert (axiom_int_approximation x368))
(assert (axiom_int_approximation x37))
(assert (axiom_int_approximation x371))
(assert (axiom_int_approximation x374))
(assert (axiom_int_approximation x375))
(assert (axiom_int_approximation x376))
(assert (axiom_int_approximation x38))
(assert (axiom_int_approximation x380))
(assert (axiom_int_approximation x381))
(assert (axiom_int_approximation x384))
(assert (axiom_int_approximation x386))
(assert (axiom_int_approximation x387))
(assert (axiom_int_approximation x388))
(assert (axiom_int_approximation x389))
(assert (axiom_int_approximation x39))
(assert (axiom_int_approximation x390))
(assert (axiom_int_approximation x391))
(assert (axiom_int_approximation x392))
(assert (axiom_int_approximation x395))
(assert (axiom_int_approximation x396))
(assert (axiom_int_approximation x397))
(assert (axiom_int_approximation x398))
(assert (axiom_int_approximation x399))
(assert (axiom_int_approximation x4))
(assert (axiom_int_approximation x40))
(assert (axiom_int_approximation x403))
(assert (axiom_int_approximation x404))
(assert (axiom_int_approximation x405))
(assert (axiom_int_approximation x407))
(assert (axiom_int_approximation x409))
(assert (axiom_int_approximation x410))
(assert (axiom_int_approximation x412))
(assert (axiom_int_approximation x414))
(assert (axiom_int_approximation x415))
(assert (axiom_int_approximation x416))
(assert (axiom_int_approximation x418))
(assert (axiom_int_approximation x42))
(assert (axiom_int_approximation x420))
(assert (axiom_int_approximation x423))
(assert (axiom_int_approximation x425))
(assert (axiom_int_approximation x426))
(assert (axiom_int_approximation x428))
(assert (axiom_int_approximation x431))
(assert (axiom_int_approximation x432))
(assert (axiom_int_approximation x433))
(assert (axiom_int_approximation x435))
(assert (axiom_int_approximation x436))
(assert (axiom_int_approximation x438))
(assert (axiom_int_approximation x439))
(assert (axiom_int_approximation x44))
(assert (axiom_int_approximation x440))
(assert (axiom_int_approximation x441))
(assert (axiom_int_approximation x442))
(assert (axiom_int_approximation x443))
(assert (axiom_int_approximation x444))
(assert (axiom_int_approximation x445))
(assert (axiom_int_approximation x447))
(assert (axiom_int_approximation x448))
(assert (axiom_int_approximation x451))
(assert (axiom_int_approximation x455))
(assert (axiom_int_approximation x457))
(assert (axiom_int_approximation x46))
(assert (axiom_int_approximation x460))
(assert (axiom_int_approximation x461))
(assert (axiom_int_approximation x463))
(assert (axiom_int_approximation x464))
(assert (axiom_int_approximation x466))
(assert (axiom_int_approximation x468))
(assert (axiom_int_approximation x471))
(assert (axiom_int_approximation x473))
(assert (axiom_int_approximation x476))
(assert (axiom_int_approximation x479))
(assert (axiom_int_approximation x483))
(assert (axiom_int_approximation x484))
(assert (axiom_int_approximation x486))
(assert (axiom_int_approximation x49))
(assert (axiom_int_approximation x490))
(assert (axiom_int_approximation x491))
(assert (axiom_int_approximation x492))
(assert (axiom_int_approximation x5))
(assert (axiom_int_approximation x50))
(assert (axiom_int_approximation x502))
(assert (axiom_int_approximation x503))
(assert (axiom_int_approximation x505))
(assert (axiom_int_approximation x507))
(assert (axiom_int_approximation x51))
(assert (axiom_int_approximation x510))
(assert (axiom_int_approximation x511))
(assert (axiom_int_approximation x512))
(assert (axiom_int_approximation x513))
(assert (axiom_int_approximation x514))
(assert (axiom_int_approximation x515))
(assert (axiom_int_approximation x518))
(assert (axiom_int_approximation x521))
(assert (axiom_int_approximation x523))
(assert (axiom_int_approximation x524))
(assert (axiom_int_approximation x527))
(assert (axiom_int_approximation x53))
(assert (axiom_int_approximation x531))
(assert (axiom_int_approximation x533))
(assert (axiom_int_approximation x534))
(assert (axiom_int_approximation x536))
(assert (axiom_int_approximation x537))
(assert (axiom_int_approximation x538))
(assert (axiom_int_approximation x539))
(assert (axiom_int_approximation x54))
(assert (axiom_int_approximation x542))
(assert (axiom_int_approximation x543))
(assert (axiom_int_approximation x546))
(assert (axiom_int_approximation x55))
(assert (axiom_int_approximation x551))
(assert (axiom_int_approximation x552))
(assert (axiom_int_approximation x553))
(assert (axiom_int_approximation x554))
(assert (axiom_int_approximation x555))
(assert (axiom_int_approximation x557))
(assert (axiom_int_approximation x560))
(assert (axiom_int_approximation x564))
(assert (axiom_int_approximation x567))
(assert (axiom_int_approximation x568))
(assert (axiom_int_approximation x569))
(assert (axiom_int_approximation x571))
(assert (axiom_int_approximation x573))
(assert (axiom_int_approximation x574))
(assert (axiom_int_approximation x575))
(assert (axiom_int_approximation x58))
(assert (axiom_int_approximation x580))
(assert (axiom_int_approximation x581))
(assert (axiom_int_approximation x582))
(assert (axiom_int_approximation x583))
(assert (axiom_int_approximation x584))
(assert (axiom_int_approximation x588))
(assert (axiom_int_approximation x59))
(assert (axiom_int_approximation x592))
(assert (axiom_int_approximation x595))
(assert (axiom_int_approximation x596))
(assert (axiom_int_approximation x597))
(assert (axiom_int_approximation x6))
(assert (axiom_int_approximation x60))
(assert (axiom_int_approximation x600))
(assert (axiom_int_approximation x602))
(assert (axiom_int_approximation x603))
(assert (axiom_int_approximation x604))
(assert (axiom_int_approximation x605))
(assert (axiom_int_approximation x607))
(assert (axiom_int_approximation x608))
(assert (axiom_int_approximation x609))
(assert (axiom_int_approximation x61))
(assert (axiom_int_approximation x610))
(assert (axiom_int_approximation x611))
(assert (axiom_int_approximation x613))
(assert (axiom_int_approximation x618))
(assert (axiom_int_approximation x621))
(assert (axiom_int_approximation x622))
(assert (axiom_int_approximation x623))
(assert (axiom_int_approximation x624))
(assert (axiom_int_approximation x625))
(assert (axiom_int_approximation x626))
(assert (axiom_int_approximation x628))
(assert (axiom_int_approximation x629))
(assert (axiom_int_approximation x63))
(assert (axiom_int_approximation x630))
(assert (axiom_int_approximation x631))
(assert (axiom_int_approximation x632))
(assert (axiom_int_approximation x633))
(assert (axiom_int_approximation x634))
(assert (axiom_int_approximation x635))
(assert (axiom_int_approximation x639))
(assert (axiom_int_approximation x642))
(assert (axiom_int_approximation x643))
(assert (axiom_int_approximation x645))
(assert (axiom_int_approximation x646))
(assert (axiom_int_approximation x647))
(assert (axiom_int_approximation x648))
(assert (axiom_int_approximation x649))
(assert (axiom_int_approximation x65))
(assert (axiom_int_approximation x650))
(assert (axiom_int_approximation x651))
(assert (axiom_int_approximation x652))
(assert (axiom_int_approximation x653))
(assert (axiom_int_approximation x654))
(assert (axiom_int_approximation x659))
(assert (axiom_int_approximation x66))
(assert (axiom_int_approximation x661))
(assert (axiom_int_approximation x664))
(assert (axiom_int_approximation x667))
(assert (axiom_int_approximation x668))
(assert (axiom_int_approximation x669))
(assert (axiom_int_approximation x67))
(assert (axiom_int_approximation x673))
(assert (axiom_int_approximation x674))
(assert (axiom_int_approximation x675))
(assert (axiom_int_approximation x676))
(assert (axiom_int_approximation x677))
(assert (axiom_int_approximation x678))
(assert (axiom_int_approximation x679))
(assert (axiom_int_approximation x68))
(assert (axiom_int_approximation x680))
(assert (axiom_int_approximation x681))
(assert (axiom_int_approximation x682))
(assert (axiom_int_approximation x684))
(assert (axiom_int_approximation x685))
(assert (axiom_int_approximation x687))
(assert (axiom_int_approximation x689))
(assert (axiom_int_approximation x694))
(assert (axiom_int_approximation x697))
(assert (axiom_int_approximation x698))
(assert (axiom_int_approximation x699))
(assert (axiom_int_approximation x7))
(assert (axiom_int_approximation x700))
(assert (axiom_int_approximation x703))
(assert (axiom_int_approximation x704))
(assert (axiom_int_approximation x705))
(assert (axiom_int_approximation x706))
(assert (axiom_int_approximation x708))
(assert (axiom_int_approximation x710))
(assert (axiom_int_approximation x712))
(assert (axiom_int_approximation x715))
(assert (axiom_int_approximation x720))
(assert (axiom_int_approximation x722))
(assert (axiom_int_approximation x724))
(assert (axiom_int_approximation x725))
(assert (axiom_int_approximation x726))
(assert (axiom_int_approximation x727))
(assert (axiom_int_approximation x729))
(assert (axiom_int_approximation x73))
(assert (axiom_int_approximation x730))
(assert (axiom_int_approximation x731))
(assert (axiom_int_approximation x732))
(assert (axiom_int_approximation x733))
(assert (axiom_int_approximation x734))
(assert (axiom_int_approximation x735))
(assert (axiom_int_approximation x737))
(assert (axiom_int_approximation x738))
(assert (axiom_int_approximation x739))
(assert (axiom_int_approximation x74))
(assert (axiom_int_approximation x740))
(assert (axiom_int_approximation x742))
(assert (axiom_int_approximation x744))
(assert (axiom_int_approximation x745))
(assert (axiom_int_approximation x746))
(assert (axiom_int_approximation x75))
(assert (axiom_int_approximation x750))
(assert (axiom_int_approximation x752))
(assert (axiom_int_approximation x755))
(assert (axiom_int_approximation x756))
(assert (axiom_int_approximation x757))
(assert (axiom_int_approximation x76))
(assert (axiom_int_approximation x760))
(assert (axiom_int_approximation x761))
(assert (axiom_int_approximation x766))
(assert (axiom_int_approximation x767))
(assert (axiom_int_approximation x769))
(assert (axiom_int_approximation x77))
(assert (axiom_int_approximation x770))
(assert (axiom_int_approximation x774))
(assert (axiom_int_approximation x776))
(assert (axiom_int_approximation x777))
(assert (axiom_int_approximation x779))
(assert (axiom_int_approximation x78))
(assert (axiom_int_approximation x780))
(assert (axiom_int_approximation x781))
(assert (axiom_int_approximation x782))
(assert (axiom_int_approximation x783))
(assert (axiom_int_approximation x787))
(assert (axiom_int_approximation x788))
(assert (axiom_int_approximation x789))
(assert (axiom_int_approximation x79))
(assert (axiom_int_approximation x792))
(assert (axiom_int_approximation x794))
(assert (axiom_int_approximation x797))
(assert (axiom_int_approximation x8))
(assert (axiom_int_approximation x80))
(assert (axiom_int_approximation x800))
(assert (axiom_int_approximation x801))
(assert (axiom_int_approximation x802))
(assert (axiom_int_approximation x806))
(assert (axiom_int_approximation x807))
(assert (axiom_int_approximation x809))
(assert (axiom_int_approximation x810))
(assert (axiom_int_approximation x811))
(assert (axiom_int_approximation x812))
(assert (axiom_int_approximation x815))
(assert (axiom_int_approximation x816))
(assert (axiom_int_approximation x817))
(assert (axiom_int_approximation x819))
(assert (axiom_int_approximation x82))
(assert (axiom_int_approximation x821))
(assert (axiom_int_approximation x822))
(assert (axiom_int_approximation x823))
(assert (axiom_int_approximation x825))
(assert (axiom_int_approximation x827))
(assert (axiom_int_approximation x828))
(assert (axiom_int_approximation x829))
(assert (axiom_int_approximation x83))
(assert (axiom_int_approximation x830))
(assert (axiom_int_approximation x833))
(assert (axiom_int_approximation x834))
(assert (axiom_int_approximation x837))
(assert (axiom_int_approximation x839))
(assert (axiom_int_approximation x84))
(assert (axiom_int_approximation x840))
(assert (axiom_int_approximation x841))
(assert (axiom_int_approximation x842))
(assert (axiom_int_approximation x843))
(assert (axiom_int_approximation x844))
(assert (axiom_int_approximation x845))
(assert (axiom_int_approximation x846))
(assert (axiom_int_approximation x848))
(assert (axiom_int_approximation x849))
(assert (axiom_int_approximation x852))
(assert (axiom_int_approximation x855))
(assert (axiom_int_approximation x857))
(assert (axiom_int_approximation x858))
(assert (axiom_int_approximation x860))
(assert (axiom_int_approximation x861))
(assert (axiom_int_approximation x863))
(assert (axiom_int_approximation x864))
(assert (axiom_int_approximation x867))
(assert (axiom_int_approximation x874))
(assert (axiom_int_approximation x879))
(assert (axiom_int_approximation x881))
(assert (axiom_int_approximation x882))
(assert (axiom_int_approximation x883))
(assert (axiom_int_approximation x888))
(assert (axiom_int_approximation x889))
(assert (axiom_int_approximation x89))
(assert (axiom_int_approximation x893))
(assert (axiom_int_approximation x899))
(assert (axiom_int_approximation x90))
(assert (axiom_int_approximation x900))
(assert (axiom_int_approximation x902))
(assert (axiom_int_approximation x905))
(assert (axiom_int_approximation x907))
(assert (axiom_int_approximation x909))
(assert (axiom_int_approximation x910))
(assert (axiom_int_approximation x913))
(assert (axiom_int_approximation x915))
(assert (axiom_int_approximation x917))
(assert (axiom_int_approximation x919))
(assert (axiom_int_approximation x92))
(assert (axiom_int_approximation x923))
(assert (axiom_int_approximation x93))
(assert (axiom_int_approximation x94))
(assert (axiom_int_approximation x96))
(assert (axiom_int_approximation x98))
(assert (x286 x677))
(assert (x286 x682))
(assert (not (= (x270 x107 6) 1110625635)))
(assert (x419 x46 x712))
(assert (x520 x518))
(assert (x670 x881 x305))
(assert (=> (= (x270 x568 5) (x270 x61 x604)) (and (= x604 5) (= x61 x568))))
(assert (x286 x788))
(assert (= (=> (and (= x631 0) (= (uninterp_mod (* x51 (x406 x250)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x208) (= x596 (x480 128)) (= x474 (and (< 0 x94) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x94)))) (not (ite x288 x288 (and (> x94 170141183460469231731687303715884105727) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x94) true)))) (= (x480 160) x94) (= (> x448 0) x778) (= (x480 256) x444) (>= 1208925819614629174706175 x596) (>= 1208925819614629174706175 x444) (= (x321 340282366920938463463374607431768211455 x94) x51) (= x288 (not x474)) (= x448 (x321 255 x855))) (and (=> (and (not x778) (= x208 x698)) x367) (=> x778 x477))) x127))
(assert (x520 x76))
(assert (x520 x316))
(assert (= x847 (and x832 x572)))
(assert (=> (> (+ 10000 1) x611) (not (= (x270 x611 1) x611))))
(assert (x286 x238))
(assert (x520 x173))
(assert (x286 x726))
(assert (x520 1461501637330902918203684832716283019655932542975))
(assert (not (= (x270 x502 5) 1208925819614629174706176)))
(assert (not (= (x270 x568 5) 5)))
(assert (x286 x297))
(assert (x286 x438))
(assert (x520 x756))
(assert (not (= (x270 x700 6) 274184521717934524641157099916833587223)))
(assert (not (= 274184521717934524641157099916833587223 (x270 x155 x622))))
(assert (x520 x302))
(assert (not (= (x270 x155 x622) 5)))
(assert (not (= (x270 x412 5) 274184521717934524641157099916833587231)))
(assert (x286 x659))
(assert (x286 x861))
(assert (not (= (x270 x155 x622) 1110625635)))
(assert (x286 x623))
(assert (not (= 65535 (x270 x568 5))))
(assert (x286 x376))
(assert (=> (> (+ 10000 1) x412) (not (= x412 (x270 x412 5)))))
(assert (x286 x138))
(assert (x286 x687))
(assert (not (= 274184521717934524641157099916833587211 (x270 x700 6))))
(assert (x286 x555))
(assert (= x541 (=> (and (= (x270 x61 x604) x54) (< x727 340282366920938463463374607431768211456) (= x727 (x494 x54)) (= 544 x915) (= (x383 576) x787) (= (x321 18446744073709551615 x624) x16) (= x415 800) (= x624 (x427 x191 168)) (>= x727 0) (= (x321 1461501637330902918203684832716283019655932542975 x568) x700) (= x61 (x321 1461501637330902918203684832716283019655932542975 x787)) (= (x270 x700 6) x604) (= (x321 18446744073709551615 x420) x834) (<= x727 340282366920938463463374607431768211455) (= x214 (x470 608)) (= x900 (x321 1461501637330902918203684832716283019655932542975 x214)) (= x638 (= 274184521717934524641157099916833587235 x900))) (and (=> (and (= (x736 274184521717934524641157099916833587235) x842) (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 x433) (not (= x580 2362581449)) (not (= 3257672857 x580)) (>= x849 0) (= (x271 160) x503) (= x58 1) (= (x271 256) x769) (= x158 (x270 x611 1)) (> 1208925819614629174706176 x849) (not (> 2362581449 x580)) (= x461 (x271 224)) (= (x271 192) x389) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x777) (= x580 4272920204) (= 160 x410) (= (x271 128) x668) (= x255 (x271 224)) (<= 0 x571) (> x842 0) (not (< x93 4)) (<= 0 x777) (> 1208925819614629174706176 x293) (= x93 4) (= x42 (x271 192)) x638 (>= 1208925819614629174706175 x849) (<= 0 x293) (= 4 x93) (not (= 4062139261 x580)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x441) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x571) (= x899 (x271 256)) (>= x441 0) (= (x271 128) x844) (= x777 (x793 x158)) (= x11 (x271 160)) (<= x293 1208925819614629174706175)) x363) (=> (not x638) x453)))))
(assert (not (= 340282366920938463463374607431768211456 (x270 x61 x604))))
(assert (x286 x442))
(assert (x520 x864))
(assert (x286 x463))
(assert (x286 x553))
(assert (=> (= (x270 x568 5) (x270 x502 5)) (= x568 x502)))
(assert (=> (> (+ 10000 1) x700) (not (= (x270 x155 x622) x700))))
(assert (not (= (x270 x568 5) 115792089237316195423570985008687907853269984655499359237631748795939503996928)))
(assert (and (= (x764 10 0) 1) (= 1000000000000000000000000000000 (x764 10 30)) (= (x764 10 8) 100000000) (= 10000000 (x764 10 7)) (= 1000000000 (x764 10 9)) (= (x764 10 22) 10000000000000000000000) (= 10000000000000 (x764 10 13)) (= 10000000000000000000 (x764 10 19)) (= (x764 10 14) 100000000000000) (= 100000000000000000 (x764 10 17)) (= (x764 10 21) 1000000000000000000000) (= (x764 10 5) 100000) (= (x764 10 1) 10) (= 1000000000000000000000000 (x764 10 24)) (= (x764 10 29) 100000000000000000000000000000) (= 1000000000000000000 (x764 10 18)) (= 10000000000000000000000000 (x764 10 25)) (= 100000000000000000000000000 (x764 10 26)) (= (x764 10 27) 1000000000000000000000000000) (= (x764 10 28) 10000000000000000000000000000) (= (x764 10 4) 10000) (= 100000000000000000000000 (x764 10 23)) (= 100000000000000000000 (x764 10 20)) (= (x764 10 16) 10000000000000000) (= 100000000000 (x764 10 11)) (= (x764 10 6) 1000000) (= 100 (x764 10 2)) (= 10000000000 (x764 10 10)) (= 1000000000000 (x764 10 12)) (= (x764 10 3) 1000) (= (x764 10 15) 1000000000000000)))
(assert (not (= (x270 x412 5) 1461501637330902918203684832716283019655932542975)))
(assert (x886 x490 x435))
(assert (x886 x173 x143))
(assert (x286 x611))
(assert (x820 x473))
(assert (= (or (and x832 (not x572)) x658) x754))
(assert (=> (< (- x539 1) 10000) (not (= x539 (x270 x107 6)))))
(assert (not (= (x270 x502 5) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x286 x703))
(assert (x286 x263))
(assert (not (= (x270 x611 1) 480214969)))
(assert (=> (< (- x502 1) 10000) (not (= x502 (x270 x568 5)))))
(assert (= (=> (and (= (ite x393 1 0) x340) (= x393 (not x872)) (= x872 (or (and (> 0 x698) (= (<= x698 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x698 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x70) x367))
(assert (x813 x344 x882))
(assert (=> (> (+ 10000 1) x700) (not (= (x270 x502 5) x700))))
(assert (x520 x102))
(assert (not (= (x270 x568 5) 2068668150)))
(assert (x286 x766))
(assert (not (= (x270 x539 5) 70124239)))
(assert (x286 x893))
(assert (x286 x152))
(assert (x286 x113))
(assert (not (= (x270 x412 5) 340282366920938463463374607431768211455)))
(assert (x520 1))
(assert (x286 x460))
(assert (not (= (x270 x611 1) 18446744073709551615)))
(assert (not (= (x270 x611 1) 340282366920938463463374607431768211455)))
(assert (not (= (x270 x155 x622) 20282409603651670423947251286016)))
(assert (x286 x163))
(assert (x286 x607))
(assert (x286 x466))
(assert (x286 x107))
(assert (x286 x38))
(assert (=> (> (+ 10000 1) x502) (not (= (x270 x700 6) x502))))
(assert (not (= 2068668150 (x270 x700 6))))
(assert (x286 x42))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x270 x107 6))))
(assert (x286 x229))
(assert (=> (< (- x568 1) 10000) (not (= (x270 x502 5) x568))))
(assert (x286 x821))
(assert (=> (> (+ 10000 1) x700) (not (= (x270 x611 1) x700))))
(assert (not (= (x270 x155 x622) 340282366920938463463374607431768211456)))
(assert (not (= 98097205 (x270 x700 6))))
(assert (x286 x700))
(assert (not (= (x270 x539 5) 11269569)))
(assert (x670 x214 x917))
(assert (x286 x330))
(assert (=> (> (+ 10000 1) x412) (not (= (x270 x568 5) x412))))
(assert (x286 x603))
(assert (not (= (x270 x539 5) (x270 x107 6))))
(assert (x286 x801))
(assert (x286 x678))
(assert (not (= (x270 x412 5) 480214969)))
(assert (x813 x715 x879))
(assert (x286 x551))
(assert (x286 x355))
(assert (=> (< (- x107 1) 10000) (not (= x107 (x270 x412 5)))))
(assert (not (= (x270 x502 5) 18446744073709551616)))
(assert (not (= (x270 x539 5) 6)))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587211)))
(assert (x286 x174))
(assert (x286 x5))
(assert (x286 x727))
(assert (not (= (x270 x502 5) 4272920204)))
(assert (not (= (x270 x539 5) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (x520 x588))
(assert (x286 x315))
(assert (not (= (x270 x155 x622) 6)))
(assert (x286 x416))
(assert (x286 x776))
(assert (not (= (x270 x700 6) 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x520 x817))
(assert (not (= (x270 x107 6) 204737060)))
(assert (x820 x439))
(assert (not (= (x270 x611 1) 18446744073709551616)))
(assert (= (x185 1 x828) (uninterp_mod (x764 2 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (not (= (x270 x700 6) 274184521717934524641157099916833587244)))
(assert (not (= 4062139261 (x270 x61 x604))))
(assert (x286 x531))
(assert (not (= (x270 x700 6) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x270 x502 5) 4062139261)))
(assert (not (= (x270 x412 5) 1208925819614629174706176)))
(assert (not (= 274184521717934524641157099916833587233 (x270 x61 x604))))
(assert (not (= 274184521717934524641157099916833587223 (x270 x568 5))))
(assert (not (= (x270 x568 5) 274184521717934524641157099916833587233)))
(assert (x520 x147))
(assert (not (= (x270 x700 6) 5)))
(assert (x286 x769))
(assert (x286 x632))
(assert (= (- (/ x557 95780971304118053647396689196894323976171195136475136) (uninterp_frac x557 95780971304118053647396689196894323976171195136475136)) (x427 x557 176)))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x107 6))))
(assert (x286 x284))
(assert (x286 x243))
(assert (= x202 x120))
(assert (x286 x192))
(assert (=> (= (x270 x155 x622) (x270 x107 6)) (and (= 6 x622) (= x107 x155))))
(assert (not (= (x270 x611 1) 70124239)))
(assert (= x606 (and x91 (not x585))))
(assert (x286 x829))
(assert (x520 x67))
(assert (not (= 1168994686 (x270 x155 x622))))
(assert (not (= (x270 x155 x622) 70124239)))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x568 5))))
(assert (not (= (x270 x700 6) 1)))
(assert (x520 x267))
(assert (x286 x278))
(assert (not (= (x270 x412 5) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x820 x910))
(assert (not (= (x270 x502 5) 10141204801825835211973625643007)))
(assert (not (= (x270 x412 5) 10141204801825835211973625643007)))
(assert (x286 x380))
(assert (x520 x642))
(assert (x286 x436))
(assert (x286 x848))
(assert (x813 x661 x244))
(assert (not (= 204737060 (x270 x700 6))))
(assert (x286 x511))
(assert (x286 x738))
(assert (=> (= (x270 x611 1) (x270 x61 x604)) (and (= x611 x61) (= 1 x604))))
(assert (x520 x317))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587244)))
(assert (not (= 1 (x270 x611 1))))
(assert (not (= 10141204801825835211973625643007 (x270 x568 5))))
(assert (x286 x580))
(assert (x286 x649))
(assert (x286 x80))
(assert (x286 x155))
(assert (x286 x557))
(assert (not x587))
(assert (not (= 950698303 (x270 x155 x622))))
(assert (x286 x783))
(assert (not (= (x270 x539 5) 10141204801825835211973625643007)))
(assert (x286 x595))
(assert (=> (< (- x61 1) 10000) (not (= (x270 x502 5) x61))))
(assert (not (= (x270 x61 x604) 2362581449)))
(assert (x286 x643))
(assert (= (x427 x46 1) (- (/ x46 2) (uninterp_frac x46 2))))
(assert (not (= 1168994686 (x270 x539 5))))
(assert (not (= (x270 x412 5) 2362581449)))
(assert (not (= 1208925819614629174706175 (x270 x107 6))))
(assert (x286 x669))
(assert (not (= 274184521717934524641157099916833587223 (x270 x502 5))))
(assert (x286 x680))
(assert (= x402 (or x754 (and x657 (not x248)))))
(assert (x286 x653))
(assert (not (= 11269569 (x270 x155 x622))))
(assert (x286 x14))
(assert (not (= 1110625635 (x270 x568 5))))
(assert (not (= (x270 x611 1) 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x286 x448))
(assert (not (= 18446744073709551616 (x270 x700 6))))
(assert (x286 x628))
(assert (not (= (x270 x568 5) 274184521717934524641157099916833587231)))
(assert (=> (< (- x539 1) 10000) (not (= x539 (x270 x155 x622)))))
(assert (x298 x624 x78))
(assert (not (= (x270 x700 6) 1099511627775)))
(assert (x286 x910))
(assert (not (= 6 (x270 x700 6))))
(assert (x637 x35 x815))
(assert (not (= (x270 x107 6) 1208925819614629174706176)))
(assert (x286 x564))
(assert (x286 x588))
(assert (=> (< (- x107 1) 10000) (not (= x107 (x270 x107 6)))))
(assert (not (= (x270 x611 1) 1461501637330902918203684832716283019655932542975)))
(assert (x286 x745))
(assert (x820 x643))
(assert (x286 x159))
(assert (x286 x661))
(assert (not (= (x270 x155 x622) 340282366920938463463374607431768211455)))
(assert (x520 x344))
(assert (x286 x909))
(assert (not (= (x270 x107 6) 1461501637330902918203684832716283019655932542975)))
(assert (x520 x624))
(assert (not (= (x270 x61 x604) 2068668150)))
(assert (=> (> (+ 10000 1) x502) (not (= x502 (x270 x611 1)))))
(assert (x160 x867 x49))
(assert (x286 x781))
(assert (not (= (x270 x700 6) (x270 x568 5))))
(assert (not (= (x270 x61 x604) 950698303)))
(assert (not (= (x270 x155 x622) 170141183460469231731687303715884105727)))
(assert (not (= 6 (x270 x611 1))))
(assert (x286 x212))
(assert (x286 x731))
(assert (not (= 5 (x270 x61 x604))))
(assert (x520 x715))
(assert (not (= (x270 x611 1) 274184521717934524641157099916833587233)))
(assert (=> (= (x270 x700 6) (x270 x61 x604)) (and (= 6 x604) (= x61 x700))))
(assert (not (= (x270 x568 5) 11269569)))
(assert (not (= (x270 x61 x604) 20282409603651670423947251286016)))
(assert (x286 x17))
(assert (=> (> (+ 10000 1) x412) (not (= x412 (x270 x539 5)))))
(assert (not (= 1208925819614629174706176 (x270 x155 x622))))
(assert (x286 x923))
(assert (x886 x810 x735))
(assert (x286 x490))
(assert (x286 x173))
(assert (x873 x479))
(assert (x286 x524))
(assert (x286 x515))
(assert (x286 x567))
(assert (not (= (x270 x412 5) 170141183460469231731687303715884105727)))
(assert (not (= (x270 x700 6) 4062139261)))
(assert (x286 x512))
(assert (not (= (x270 x700 6) 3257672857)))
(assert (not (= (x270 x61 x604) 20282409603651670423947251286015)))
(assert (not (= 20282409603651670423947251286016 (x270 x611 1))))
(assert (x286 x554))
(assert (x286 x609))
(assert (not (= 204737060 (x270 x611 1))))
(assert (x670 x360 x126))
(assert (x286 x608))
(assert (x286 x756))
(assert (not (= 1208925819614629174706176 (x270 x539 5))))
(assert (not (= (x270 x61 x604) 11269569)))
(assert (x286 x241))
(assert (x286 x839))
(assert (=> (< (- x568 1) 10000) (not (= x568 (x270 x107 6)))))
(assert (not (= (x270 x61 x604) 115792089237316195423570985008687907853269984655499359237631748795939503996928)))
(assert (= (x185 1 x760) (uninterp_mod (x764 2 x760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (not (= 10141204801825835211973625643007 (x270 x107 6))))
(assert (x286 x852))
(assert (not (= 204737060 (x270 x568 5))))
(assert (not (= (x270 x412 5) 274184521717934524641157099916833587244)))
(assert (x286 x827))
(assert (x286 x153))
(assert (not (= 4272920204 (x270 x568 5))))
(assert (not (= 70124239 (x270 x568 5))))
(assert (not (= (x270 x412 5) 70124239)))
(assert (x286 x855))
(assert (not (= (x270 x502 5) 6)))
(assert (not (= 1208925819614629174706175 (x270 x611 1))))
(assert (x286 x94))
(assert (not (= 11269569 (x270 x412 5))))
(assert (not (= (x270 x502 5) 65536)))
(assert (x286 x8))
(assert (x286 x881))
(assert (x520 x902))
(assert (x520 x734))
(assert (not (= 274184521717934524641157099916833587227 (x270 x568 5))))
(assert (x561 x213 x102))
(assert (x520 x557))
(assert (x520 x443))
(assert (= (=> (and (= x248 (> x189 0)) (not (ite x751 x751 (and (> x53 170141183460469231731687303715884105727) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x53) true)))) (= x189 (x321 255 x855)) (= x888 (x262 256)) (= x788 (x321 340282366920938463463374607431768211455 x53)) (<= x888 1208925819614629174706175) (= (not x475) x751) (= (x262 128) x336) (= x651 0) (= x475 (and (< 0 x53) (= (<= x53 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) (>= 1208925819614629174706175 x336) (= (uninterp_mod (* x788 (x406 x463)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x32) (= (x262 160) x53)) (and (=> x248 x586) (=> (and (= x32 x375) (not x248)) x559))) x482))
(assert (x286 x582))
(assert (=> (< (- x107 1) 10000) (not (= (x270 x611 1) x107))))
(assert (not (= (x270 x611 1) 1208925819614629174706176)))
(assert (x813 x817 x919))
(assert (not (= (x270 x700 6) 65536)))
(assert (x520 x357))
(assert (not (= 480214969 (x270 x700 6))))
(assert (x637 x855 x742))
(assert (x561 x767 x607))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x270 x502 5))))
(assert (not (= 274184521717934524641157099916833587233 (x270 x700 6))))
(assert (x520 18446744073709551615))
(assert (x561 x38 x553))
(assert (not (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 (x270 x107 6))))
(assert (x286 x828))
(assert (x286 x837))
(assert (x286 x237))
(assert (x670 x191 x77))
(assert (x637 x821 x689))
(assert (not (= 4062139261 (x270 x107 6))))
(assert (x286 x231))
(assert (= (x427 x191 160) (- (/ x191 1461501637330902918203684832716283019655932542976) (uninterp_frac x191 1461501637330902918203684832716283019655932542976))))
(assert (x286 x484))
(assert (x286 x407))
(assert (x520 x553))
(assert (not (= 20282409603651670423947251286015 (x270 x502 5))))
(assert (x149 x155))
(assert (= x657 x72))
(assert (x286 x863))
(assert (x820 x98))
(assert (not (= (x270 x502 5) 3257672857)))
(assert (not (= (x270 x700 6) 1110625635)))
(assert (x286 x154))
(assert (x286 x412))
(assert (x286 x344))
(assert (x561 x776 x302))
(assert (x813 x196 x348))
(assert (x670 x681 x445))
(assert (x286 x58))
(assert (x149 x502))
(assert (not (= (x270 x700 6) 950698303)))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587235)))
(assert (x286 x503))
(assert (x286 x82))
(assert (x520 x420))
(assert (not (= (x270 x155 x622) 20282409603651670423947251286015)))
(assert (=> (< (- x611 1) 10000) (not (= x611 (x270 x700 6)))))
(assert (not (= (x270 x568 5) 6)))
(assert (not (= 5 (x270 x502 5))))
(assert (not (= 1208925819614629174706176 (x270 x700 6))))
(assert (x286 x867))
(assert (x286 x842))
(assert (x286 x888))
(assert (x520 x432))
(assert (x520 x263))
(assert (=> (< (- x611 1) 10000) (not (= (x270 x107 6) x611))))
(assert (x520 x214))
(assert (not (= (x270 x539 5) 3257672857)))
(assert (x286 x864))
(assert (x286 x533))
(assert (x286 x432))
(assert (x286 x336))
(assert (not (= (x270 x611 1) 2362581449)))
(assert (= x798 x897))
(assert (x286 x216))
(assert (not (= 204737060 (x270 x502 5))))
(assert (x520 x239))
(assert (not (= (x270 x61 x604) 18446744073709551615)))
(assert (not (= (x270 x568 5) 1461501637330902918203684832716283019655932542975)))
(assert (x286 x389))
(assert (x286 x860))
(assert (x286 x255))
(assert (x520 x568))
(assert (x286 x105))
(assert (x286 x704))
(assert (not (= (x270 x412 5) 1110625635)))
(assert (=> (= (x270 x611 1) (x270 x155 x622)) (and (= x622 1) (= x155 x611))))
(assert (=> (< (- x412 1) 10000) (not (= x412 (x270 x611 1)))))
(assert (x873 x802))
(assert (x286 x206))
(assert (not (= (x270 x61 x604) 274184521717934524641157099916833587235)))
(assert (x286 x240))
(assert (not (= (x270 x107 6) 20282409603651670423947251286015)))
(assert (x286 x96))
(assert (=> (= (x270 x61 x604) (x270 x107 6)) (and (= x61 x107) (= x604 6))))
(assert (=> (= (x270 x502 5) (x270 x412 5)) (= x502 x412)))
(assert (not (= (x270 x700 6) 70124239)))
(assert (= x331 (and x749 (not x638))))
(assert (x286 x676))
(assert (not (= 950698303 (x270 x611 1))))
(assert (= x798 (or x257 (and x256 (not x100)))))
(assert (not (= (x270 x107 6) 115792089237316195423570985008687907853269984655499359237631748795939503996928)))
(assert (x520 x65))
(assert (not (= (x270 x107 6) 98097205)))
(assert (x286 x33))
(assert (x286 x225))
(assert (not (= (x270 x568 5) 1)))
(assert (x419 x316 x819))
(assert (x520 x724))
(assert (not (= (x270 x539 5) 1461501637330902918203684832716283019655932542975)))
(assert (x286 x715))
(assert (x520 x802))
(assert (not (= (x270 x412 5) 274184521717934524641157099916833587211)))
(assert (x286 x318))
(assert (not (= (x270 x107 6) 4272920204)))
(assert (=> (> (+ 10000 1) x61) (not (= x61 (x270 x107 6)))))
(assert (not (= (x270 x539 5) 950698303)))
(assert (x286 x889))
(assert (not (= (x270 x155 x622) 3257672857)))
(assert (x286 x410))
(assert (x286 x40))
(assert (and (= 2305843009213693952 (x764 2 61)) (= (x764 2 114) 20769187434139310514121985316880384) (= 41538374868278621028243970633760768 (x764 2 115)) (= 46768052394588893382517914646921056628989841375232 (x764 2 165)) (= 65536 (x764 2 16)) (= 21778071482940061661655974875633165533184 (x764 2 134)) (= 2 (x764 2 1)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x764 2 221)) (= (x764 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 1645504557321206042154969182557350504982735865633579863348609024 (x764 2 210)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x764 2 252)) (= (x764 2 117) 166153499473114484112975882535043072) (= (x764 2 59) 576460752303423488) (= (x764 2 142) 5575186299632655785383929568162090376495104) (= (x764 2 178) 383123885216472214589586756787577295904684780545900544) (= 9903520314283042199192993792 (x764 2 93)) (= 4294967296 (x764 2 32)) (= 604462909807314587353088 (x764 2 79)) (= 9444732965739290427392 (x764 2 73)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x764 2 241)) (= 75557863725914323419136 (x764 2 76)) (= (x764 2 23) 8388608) (= (x764 2 99) 633825300114114700748351602688) (= 187072209578355573530071658587684226515959365500928 (x764 2 167)) (= 411376139330301510538742295639337626245683966408394965837152256 (x764 2 208)) (= (x764 2 26) 67108864) (= (x764 2 110) 1298074214633706907132624082305024) (= (x764 2 62) 4611686018427387904) (= 6582018229284824168619876730229402019930943462534319453394436096 (x764 2 212)) (= (x764 2 47) 140737488355328) (= (x764 2 18) 262144) (= (x764 2 80) 1208925819614629174706176) (= (x764 2 104) 20282409603651670423947251286016) (= 1393796574908163946345982392040522594123776 (x764 2 140)) (= (x764 2 171) 2993155353253689176481146537402947624255349848014848) (= (x764 2 119) 664613997892457936451903530140172288) (= (x764 2 132) 5444517870735015415413993718908291383296) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x764 2 238)) (= 23945242826029513411849172299223580994042798784118784 (x764 2 174)) (= (x764 2 183) 12259964326927110866866776217202473468949912977468817408) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x764 2 253)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x764 2 233)) (= (x764 2 92) 4951760157141521099596496896) (= 37778931862957161709568 (x764 2 75)) (= 2787593149816327892691964784081045188247552 (x764 2 141)) (= (x764 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 4503599627370496 (x764 2 52)) (= (x764 2 90) 1237940039285380274899124224) (= 1267650600228229401496703205376 (x764 2 100)) (= 12855504354071922204335696738729300820177623950262342682411008 (x764 2 203)) (= 191561942608236107294793378393788647952342390272950272 (x764 2 177)) (= (x764 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x764 2 125) 42535295865117307932921825928971026432) (= (x764 2 13) 8192) (= 316912650057057350374175801344 (x764 2 98)) (= (x764 2 148) 356811923176489970264571492362373784095686656) (= (x764 2 181) 3064991081731777716716694054300618367237478244367204352) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x764 2 230)) (= (x764 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x764 2 29) 536870912) (= (x764 2 86) 77371252455336267181195264) (= 309485009821345068724781056 (x764 2 88)) (= (x764 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x764 2 179) 766247770432944429179173513575154591809369561091801088) (= 5986310706507378352962293074805895248510699696029696 (x764 2 172)) (= (x764 2 155) 45671926166590716193865151022383844364247891968) (= (x764 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x764 2 25) 33554432) (= (x764 2 85) 38685626227668133590597632) (= 49039857307708443467467104868809893875799651909875269632 (x764 2 185)) (= 268435456 (x764 2 28)) (= (x764 2 149) 713623846352979940529142984724747568191373312) (= 512 (x764 2 9)) (= (x764 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x764 2 136) 87112285931760246646623899502532662132736) (= (x764 2 121) 2658455991569831745807614120560689152) (= (x764 2 41) 2199023255552) (= 524288 (x764 2 19)) (= (x764 2 14) 16384) (= (x764 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 6427752177035961102167848369364650410088811975131171341205504 (x764 2 202)) (= (x764 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x764 2 45) 35184372088832) (= 52656145834278593348959013841835216159447547700274555627155488768 (x764 2 215)) (= 137438953472 (x764 2 37)) (= (x764 2 34) 17179869184) (= (x764 2 55) 36028797018963968) (= (x764 2 89) 618970019642690137449562112) (= 1361129467683753853853498429727072845824 (x764 2 130)) (= (x764 2 139) 696898287454081973172991196020261297061888) (= (x764 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x764 2 11) 2048) (= 16 (x764 2 4)) (= (x764 2 135) 43556142965880123323311949751266331066368) (= 2251799813685248 (x764 2 51)) (= (x764 2 138) 348449143727040986586495598010130648530944) (= (x764 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x764 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x764 2 3) 8) (= 158456325028528675187087900672 (x764 2 97)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x764 2 242)) (= (x764 2 31) 2147483648) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x764 2 251)) (= (x764 2 160) 1461501637330902918203684832716283019655932542976) (= (x764 2 122) 5316911983139663491615228241121378304) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x764 2 232)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x764 2 236)) (= 256 (x764 2 8)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x764 2 213)) (= 68719476736 (x764 2 36)) (= (x764 2 84) 19342813113834066795298816) (= (x764 2 145) 44601490397061246283071436545296723011960832) (= 1152921504606846976 (x764 2 60)) (= 18889465931478580854784 (x764 2 74)) (= 134217728 (x764 2 27)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x764 2 219)) (= (x764 2 21) 2097152) (= (x764 2 173) 11972621413014756705924586149611790497021399392059392) (= (x764 2 143) 11150372599265311570767859136324180752990208) (= (x764 2 175) 47890485652059026823698344598447161988085597568237568) (= 1329227995784915872903807060280344576 (x764 2 120)) (= 93536104789177786765035829293842113257979682750464 (x764 2 166)) (= 200867255532373784442745261542645325315275374222849104412672 (x764 2 197)) (= (x764 2 30) 1073741824) (= 1427247692705959881058285969449495136382746624 (x764 2 150)) (= 1569275433846670190958947355801916604025588861116008628224 (x764 2 190)) (= (x764 2 53) 9007199254740992) (= (x764 2 10) 1024) (= (x764 2 95) 39614081257132168796771975168) (= (x764 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x764 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x764 2 69) 590295810358705651712) (= 50216813883093446110686315385661331328818843555712276103168 (x764 2 195)) (= (x764 2 106) 81129638414606681695789005144064) (= (x764 2 49) 562949953421312) (= 4 (x764 2 2)) (= (x764 2 46) 70368744177664) (= 748288838313422294120286634350736906063837462003712 (x764 2 169)) (= 174224571863520493293247799005065324265472 (x764 2 137)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x764 2 248)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x764 2 214)) (= 5708990770823839524233143877797980545530986496 (x764 2 152)) (= (x764 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x764 2 96) 79228162514264337593543950336) (= 421249166674228746791672110734681729275580381602196445017243910144 (x764 2 218)) (= (x764 2 133) 10889035741470030830827987437816582766592) (= (x764 2 144) 22300745198530623141535718272648361505980416) (= (x764 2 116) 83076749736557242056487941267521536) (= (x764 2 24) 16777216) (= (x764 2 126) 85070591730234615865843651857942052864) (= 324518553658426726783156020576256 (x764 2 108)) (= 6277101735386680763835789423207666416102355444464034512896 (x764 2 192)) (= (x764 2 107) 162259276829213363391578010288128) (= (x764 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x764 2 229)) (= 822752278660603021077484591278675252491367932816789931674304512 (x764 2 209)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x764 2 256)) (= (x764 2 103) 10141204801825835211973625643008) (= 91343852333181432387730302044767688728495783936 (x764 2 156)) (= (x764 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x764 2 124) 21267647932558653966460912964485513216) (= (x764 2 44) 17592186044416) (= (x764 2 54) 18014398509481984) (= 4194304 (x764 2 22)) (= 332306998946228968225951765070086144 (x764 2 118)) (= (x764 2 81) 2417851639229258349412352) (= (x764 2 94) 19807040628566084398385987584) (= (x764 2 158) 365375409332725729550921208179070754913983135744) (= 8796093022208 (x764 2 43)) (= 23384026197294446691258957323460528314494920687616 (x764 2 164)) (= (x764 2 35) 34359738368) (= (x764 2 63) 9223372036854775808) (= (x764 2 70) 1180591620717411303424) (= 340282366920938463463374607431768211456 (x764 2 128)) (= (x764 2 153) 11417981541647679048466287755595961091061972992) (= (x764 2 87) 154742504910672534362390528) (= (x764 2 68) 295147905179352825856) (= 549755813888 (x764 2 39)) (= (x764 2 182) 6129982163463555433433388108601236734474956488734408704) (= 1048576 (x764 2 20)) (= 12554203470773361527671578846415332832204710888928069025792 (x764 2 193)) (= 803469022129495137770981046170581301261101496891396417650688 (x764 2 199)) (= (x764 2 0) 1) (= (x764 2 12) 4096) (= 178405961588244985132285746181186892047843328 (x764 2 147)) (= (x764 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x764 2 111) 2596148429267413814265248164610048) (= (x764 2 77) 151115727451828646838272) (= 2361183241434822606848 (x764 2 71)) (= 2923003274661805836407369665432566039311865085952 (x764 2 161)) (= (x764 2 82) 4835703278458516698824704) (= (x764 2 151) 2854495385411919762116571938898990272765493248) (= 1125899906842624 (x764 2 50)) (= 392318858461667547739736838950479151006397215279002157056 (x764 2 188)) (= 4398046511104 (x764 2 42)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x764 2 239)) (= 10384593717069655257060992658440192 (x764 2 113)) (= (x764 2 66) 73786976294838206464) (= (x764 2 38) 274877906944) (= 649037107316853453566312041152512 (x764 2 109)) (= 1532495540865888858358347027150309183618739122183602176 (x764 2 180)) (= (x764 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x764 2 224)) (= (x764 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x764 2 56) 72057594037927936) (= (x764 2 146) 89202980794122492566142873090593446023921664) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x764 2 234)) (= (x764 2 72) 4722366482869645213696) (= (x764 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x764 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x764 2 159) 730750818665451459101842416358141509827966271488) (= (x764 2 105) 40564819207303340847894502572032) (= (x764 2 57) 144115188075855872) (= 170141183460469231731687303715884105728 (x764 2 127)) (= (x764 2 7) 128) (= (x764 2 78) 302231454903657293676544) (= (x764 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x764 2 237)) (= (x764 2 102) 5070602400912917605986812821504) (= 32 (x764 2 5)) (= (x764 2 157) 182687704666362864775460604089535377456991567872) (= (x764 2 33) 8589934592) (= 2535301200456458802993406410752 (x764 2 101)) (= (x764 2 170) 1496577676626844588240573268701473812127674924007424) (= (x764 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 64 (x764 2 6)) (= (x764 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x764 2 17) 131072) (= 281474976710656 (x764 2 48)) (= (x764 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x764 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x764 2 168) 374144419156711147060143317175368453031918731001856) (= 3213876088517980551083924184682325205044405987565585670602752 (x764 2 201)) (= 147573952589676412928 (x764 2 67)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x764 2 211)) (= 1099511627776 (x764 2 40)) (= (x764 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 196159429230833773869868419475239575503198607639501078528 (x764 2 187)) (= (x764 2 91) 2475880078570760549798248448) (= 10633823966279326983230456482242756608 (x764 2 123)) (= 9671406556917033397649408 (x764 2 83)) (= 11692013098647223345629478661730264157247460343808 (x764 2 163)) (= (x764 2 154) 22835963083295358096932575511191922182123945984) (= 25108406941546723055343157692830665664409421777856138051584 (x764 2 194)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x764 2 227)) (= 5192296858534827628530496329220096 (x764 2 112)) (= 5846006549323611672814739330865132078623730171904 (x764 2 162)) (= 18446744073709551616 (x764 2 64)) (= 95780971304118053647396689196894323976171195136475136 (x764 2 176)) (= 32768 (x764 2 15)) (= (x764 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x764 2 131) 2722258935367507707706996859454145691648) (= 36893488147419103232 (x764 2 65)) (= 1606938044258990275541962092341162602522202993782792835301376 (x764 2 200)) (= 680564733841876926926749214863536422912 (x764 2 129)) (= 288230376151711744 (x764 2 58)) (= 3138550867693340381917894711603833208051177722232017256448 (x764 2 191))))
(assert (x520 x502))
(assert (x286 x739))
(assert (x160 x756 x205))
(assert (not (= (x270 x107 6) 11269569)))
(assert (x886 x703 x22))
(assert (not (= 204737060 (x270 x155 x622))))
(assert (x286 x817))
(assert (x286 x823))
(assert (not (= (x270 x568 5) 340282366920938463463374607431768211456)))
(assert (x286 x293))
(assert (not (= (x270 x155 x622) 4272920204)))
(assert (not (= 18446744073709551615 (x270 x568 5))))
(assert (=> (< (- x539 1) 10000) (not (= (x270 x539 5) x539))))
(assert (not (= (x270 x502 5) (x270 x611 1))))
(assert (x520 x789))
(assert (x286 x698))
(assert (x286 x750))
(assert (=> (< (- x155 1) 10000) (not (= (x270 x155 x622) x155))))
(assert (x286 x502))
(assert (x286 x200))
(assert (not (= (x270 x107 6) 274184521717934524641157099916833587244)))
(assert (not (= (x270 x61 x604) 204737060)))
(assert (x563 x592 x473))
(assert (x286 x584))
(assert (x286 x112))
(assert (not (= (x270 x61 x604) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= (or x101 (and (not x778) x120)) x257))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x270 x568 5))))
(assert (x637 x281 x513))
(assert (=> (= (x270 x502 5) (x270 x539 5)) (= x539 x502)))
(assert (=> (= (x270 x539 5) (x270 x155 x622)) (and (= x155 x539) (= x622 5))))
(assert (x286 x16))
(assert (not (= (x270 x502 5) 340282366920938463463374607431768211455)))
(assert (x298 x902 x395))
(assert (x286 x431))
(assert (not (= (x270 x412 5) 4272920204)))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587233)))
(assert (x286 x108))
(assert (x286 x420))
(assert (= (and x100 x256) x749))
(assert (=> (= (x270 x568 5) (x270 x539 5)) (= x568 x539)))
(assert (not (= 274184521717934524641157099916833587235 (x270 x611 1))))
(assert (x286 x473))
(assert (x149 x107))
(assert (x520 x881))
(assert (= (=> (and (= (x321 1 x236) x436) (= x572 (not (= 0 x436)))) (and (=> (and (= x746 x32) (not x572)) x282) (=> x572 x109))) x586))
(assert (= x256 (and x672 x289)))
(assert (x520 x169))
(assert (x758 x463))
(assert (=> (< (- x412 1) 10000) (not (= (x270 x700 6) x412))))
(assert (not (= (x270 x611 1) 2068668150)))
(assert (x286 x794))
(assert (not (= (x270 x61 x604) 274184521717934524641157099916833587244)))
(assert (not (= 18446744073709551615 (x270 x155 x622))))
(assert (=> (< (- x539 1) 10000) (not (= (x270 x412 5) x539))))
(assert (x520 x236))
(assert (x563 x822 x910))
(assert (x520 x829))
(assert (not (= (x270 x412 5) 6)))
(assert (not (= (x270 x568 5) 340282366920938463463374607431768211455)))
(assert (x286 x239))
(assert (x286 x444))
(assert (x563 x643 x98))
(assert (not (= 10141204801825835211973625643007 (x270 x611 1))))
(assert (x286 x730))
(assert (=> (> (+ 10000 1) x155) (not (= (x270 x611 1) x155))))
(assert (x286 x760))
(assert (x813 x789 x343))
(assert (x520 x681))
(assert (= x347 (=> (and (= x155 (x321 1461501637330902918203684832716283019655932542975 x510)) (< x33 340282366920938463463374607431768211456) (= x107 (x321 1461501637330902918203684832716283019655932542975 x502)) (= (x824 576) x510) (= (x321 18446744073709551615 x902) x309) (= (x321 18446744073709551615 x407) x595) (= (x270 x155 x622) x399) (= 800 x605) (= x192 544) (>= x33 0) (= x898 (= x858 274184521717934524641157099916833587235)) (= (x233 608) x881) (= (x494 x399) x33) (= (x270 x107 6) x622) (= (x321 1461501637330902918203684832716283019655932542975 x881) x858) (= x407 (x427 x191 168)) (>= 340282366920938463463374607431768211455 x33)) (and (=> (not x898) x662) (=> (and (not (> 4 x484)) (= x782 (x434 224)) (= x650 (x736 274184521717934524641157099916833587235)) (= 160 x781) (>= x441 0) (>= x849 0) (not (= x240 2362581449)) (= x625 (x434 128)) (= (x270 x611 1) x527) (= 4 x484) (>= x391 0) (= x909 1) (= (x793 x527) x391) (>= 1208925819614629174706175 x293) (<= 0 x293) (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 x779) (< x293 1208925819614629174706176) (<= 0 x571) (= (x434 160) x243) (= (x434 128) x398) (= x471 (x434 256)) (not (= x240 3257672857)) (not (> 2362581449 x240)) (not (= x240 4062139261)) (= (x434 224) x704) (= x240 4272920204) (< 0 x650) (>= 1208925819614629174706175 x849) x898 (= x677 (x434 256)) (<= x391 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x434 192) x134) (<= x571 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x441) (> 1208925819614629174706176 x849) (= (x434 192) x115) (= x484 4) (= (x434 160) x669)) x884)))))
(assert (not (= 70124239 (x270 x61 x604))))
(assert (not (= 1099511627775 (x270 x107 6))))
(assert (not (= (x270 x61 x604) 480214969)))
(assert (= (=> (and (= (= 0 x340) x912) (= (ite x773 1 0) x380) (= x773 (not x912))) (=> (= (not (= x380 0)) x691) x516)) x70))
(assert (x286 x418))
(assert (x637 x464 x310))
(assert (x286 x899))
(assert (not (= (x270 x611 1) 1099511627775)))
(assert (not (= (x270 x107 6) 1)))
(assert (not (= 480214969 (x270 x568 5))))
(assert (not (= (x270 x568 5) 98097205)))
(assert (x286 x181))
(assert (x286 x592))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587231)))
(assert (not (= (x270 x539 5) 65536)))
(assert (x286 x575))
(assert (x286 x797))
(assert (=> (< (- x568 1) 10000) (not (= (x270 x611 1) x568))))
(assert (x286 x521))
(assert (not (= 1208925819614629174706175 (x270 x502 5))))
(assert (not (= (x270 x412 5) 18446744073709551615)))
(assert (x160 x147 x156))
(assert (not (= (x270 x412 5) 65535)))
(assert (x286 x30))
(assert (x286 x145))
(assert (x520 x92))
(assert (x149 x611))
(assert (x561 x267 x645))
(assert (not (= 274184521717934524641157099916833587211 (x270 x611 1))))
(assert (x286 x732))
(assert (not (= 340282366920938463463374607431768211456 (x270 x539 5))))
(assert (x286 x568))
(assert (not (= 11269569 (x270 x611 1))))
(assert (x160 x53 x245))
(assert (not (= (x270 x568 5) 274184521717934524641157099916833587211)))
(assert (x286 x729))
(assert (x286 x621))
(assert (not (= (x270 x568 5) 1099511627775)))
(assert (x886 x802 x883))
(assert (=> (> (+ 10000 1) x61) (not (= x61 (x270 x61 x604)))))
(assert (=> (> (+ 10000 1) x155) (not (= (x270 x700 6) x155))))
(assert (not (= (x270 x61 x604) 1168994686)))
(assert (not (= (x270 x412 5) 950698303)))
(assert (not (= 11269569 (x270 x502 5))))
(assert (not (= 170141183460469231731687303715884105727 (x270 x700 6))))
(assert (x286 x705))
(assert (not (= (x270 x700 6) 1208925819614629174706175)))
(assert (not (= 480214969 (x270 x155 x622))))
(assert (x520 x645))
(assert (not (= (x270 x539 5) 115792089237316195423570985008687907853269984655499359237631748795939503996928)))
(assert (x419 x236 x404))
(assert (x886 x642 x247))
(assert (=> (< (- x502 1) 10000) (not (= x502 (x270 x502 5)))))
(assert (x820 x592))
(assert (not (= (x270 x412 5) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x520 x867))
(assert (x286 x277))
(assert (not (= 65535 (x270 x539 5))))
(assert (x286 x92))
(assert (not (= 20282409603651670423947251286016 (x270 x107 6))))
(assert (x286 x757))
(assert (not (= 274184521717934524641157099916833587233 (x270 x107 6))))
(assert (x286 x79))
(assert (not (= 18446744073709551616 (x270 x61 x604))))
(assert (not (= (x270 x700 6) 274184521717934524641157099916833587235)))
(assert (x286 x624))
(assert (x286 x356))
(assert (=> (< (- x155 1) 10000) (not (= (x270 x412 5) x155))))
(assert (x286 x227))
(assert (x820 x608))
(assert (x286 x89))
(assert (not (= (x270 x611 1) 274184521717934524641157099916833587227)))
(assert (not (= 274184521717934524641157099916833587223 (x270 x412 5))))
(assert (not (= 18446744073709551615 (x270 x539 5))))
(assert (=> (> (+ 10000 1) x700) (not (= (x270 x568 5) x700))))
(assert (x520 x607))
(assert (x520 x94))
(assert (x670 x502 x128))
(assert (= x862 (=> (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208) true) (< x208 0))) x100) (and (=> (and (= x715 (x427 x557 176)) (= x174 (x321 65535 x715)) (= (> x46 0) x119) (= x843 (x321 255 x855)) (or (and (= x420 1) (not x119)) (and (= x655 (= 0 (x896 x608 x439))) (= x439 (x321 x38 x553)) (or (and (= (uninterp_mod (* x554 x543) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x807) (= x807 x420) (or (and x481 (= x543 100) (= (x427 x46 1) x216) (not x550) (= x554 (ite x906 1 10)) (= (= x442 0) x906) (= (x321 1 x46) x442) (= (< 1 x216) x550)) (and (= x543 10) (not x481) (= x554 1))) (= x468 (- (/ 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x543))) x655 (not (> x554 x468)) (= (> x46 1) x481)) (and (= (x764 10 x46) x420) (not x655))) (= x608 (x321 x443 x317)) (= (ite (> 32 x46) 1 0) x553) x119 (= (ite (< x46 78) 1 0) x317) (= 1 x443) (= x38 1))) x100 (< 0 x843) (= x46 (x321 255 x35)) (= (x321 1461501637330902918203684832716283019655932542975 x557) x355) (= x196 (x427 x557 192)) (= (x427 x191 160) x35) (= (x321 65535 x196) x860) (= (x427 x557 160) x76) (= x730 (x321 1461501637330902918203684832716283019655932542975 x191)) (= (x321 65535 x76) x30)) x541) (=> (and (not x100) (= 1 x340)) x70)))))
(assert (x419 x629 x491))
(assert (=> (= (x270 x568 5) (x270 x155 x622)) (and (= 5 x622) (= x155 x568))))
(assert (not (= (x270 x700 6) 340282366920938463463374607431768211455)))
(assert (x286 x65))
(assert (x286 x483))
(assert (x286 x362))
(assert (= x91 (and x525 (not x898))))
(assert (not (= 65536 (x270 x611 1))))
(assert (x286 x409))
(assert (not (= 2362581449 (x270 x155 x622))))
(assert (x286 x27))
(assert (x670 x510 x84))
(assert (x286 x905))
(assert (not (= 18446744073709551616 (x270 x412 5))))
(assert (x286 x479))
(assert (x286 x21))
(assert (not (= (x270 x155 x622) 274184521717934524641157099916833587231)))
(assert (x670 x568 x18))
(assert (not (= 1099511627775 (x270 x155 x622))))
(assert (=> (> (+ 10000 1) x412) (not (= (x270 x107 6) x412))))
(assert (not (= 98097205 (x270 x502 5))))
(assert (x286 x573))
(assert (x286 x507))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x502 5))))
(assert (not (= 65536 (x270 x155 x622))))
(assert (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 (x270 x502 5))))
(assert (= x363 (=> (and (< (* x287 x222) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 1208925819614629174706175 x476) (= x266 (not x401)) (= (x666 (+ x667 x208)) x356) (not (ite x266 x266 (and (< 170141183460469231731687303715884105727 x147) (= (<= x147 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x89 (x321 x263 x432)) (= (x619 928) x21) (= (x619 832) x147) (= x356 x75) (not (= x58 0)) (= (* x287 x222) x634) (= (x85 (- 57896044618658097711785492504343953926634992332820282019728792003956564819968 x208)) x639) (= x432 (ite (or (and (<= x667 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x274 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x274 x667) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x667) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x274)))) 1 0)) (not (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x667)) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x410)) (< x410 160)) (> x410 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x213 (ite (or (> x208 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208)) (< x208 0))) 1 0)) (<= x21 1208925819614629174706175) (= (or (> x208 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208)) (< x208 0))) x556) (= (x321 340282366920938463463374607431768211455 x147) x297) (= (ite (or (and (<= x639 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x667)) (and (> x639 x667) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x667) (<= x639 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) 1 0) x102) (= x89 0) (= (x619 800) x476) (= (x85 (- 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208)) x274) (= (uninterp_mod (* x297 x727) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x222) (= x737 (x103 640)) (= x531 0) (= x734 (x137 672)) (= x263 (ite (not x556) 1 0)) (= (x321 x213 x102) x531) (= x634 x667) (= x287 (x321 18446744073709551615 x734)) (= x401 (and (= (<= x147 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 0 x147)))) x762)))
(assert (= (or (and (not x795) x847) x402) x202))
(assert (x286 x505))
(assert (x286 x440))
(assert (not (= (x270 x539 5) 20282409603651670423947251286016)))
(assert (not (= 1099511627775 (x270 x539 5))))
(assert (x520 x35))
(assert (not (= (x270 x61 x604) 98097205)))
(assert (x286 x468))
(assert (x286 x219))
(assert (not (= (x270 x502 5) (x270 x107 6))))
(assert (x286 x118))
(assert (=> (< (- x155 1) 10000) (not (= x155 (x270 x502 5)))))
(assert (x286 x737))
(assert (not (= (x270 x412 5) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (= true x72))
(assert (not (= (x270 x61 x604) 170141183460469231731687303715884105727)))
(assert (not (= (x270 x412 5) 274184521717934524641157099916833587227)))
(assert (x286 x115))
(assert (=> (< (- x539 1) 10000) (not (= x539 (x270 x568 5)))))
(assert (x286 x740))
(assert (x286 x283))
(assert (not (= 20282409603651670423947251286015 (x270 x539 5))))
(assert (not (= (x270 x155 x622) 18446744073709551616)))
(assert (x286 x629))
(assert (= x453 (=> (= (= 274184521717934524641157099916833587233 x900) x850) (and (=> (and (> 1208925819614629174706176 x403) (= 4272920204 x352) (not (> 4 x159)) (= x364 (x270 x611 1)) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x352 2362581449)) (= 160 x410) (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 x284) (>= x739 0) (= (x796 128) x874) (<= x403 1208925819614629174706175) (= (x796 192) x423) (>= x623 0) (= 4 x159) (not (= x352 4062139261)) (= x159 4) (= x567 (x736 274184521717934524641157099916833587233)) (= 1 x58) x850 (not (= x352 3257672857)) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x145 (x796 256)) (= (x796 160) x345) (= x303 (x796 224)) (>= x265 0) (< 0 x567) (> 1208925819614629174706176 x265) (not (> 2362581449 x352)) (= (x796 192) x366) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x739) (= x295 (x796 160)) (>= x113 0) (<= x265 1208925819614629174706175) (= (x796 128) x438) (= (x796 256) x371) (= (x785 x364) x739) (= x675 (x796 224)) (<= 0 x403)) x363) (=> (not x850) x544)))))
(assert (x520 x196))
(assert (not (= (x270 x155 x622) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x270 x539 5))))
(assert (not (= 2068668150 (x270 x539 5))))
(assert (= (or (and x289 (not x672)) x221) x101))
(assert (= (=> (and (= x593 (or (> x375 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x375) true) (> 0 x375)))) (= x466 (ite x56 1 0)) (= (not x593) x56)) x269) x559))
(assert (not (= (x270 x539 5) 2362581449)))
(assert (x286 x258))
(assert (x286 x710))
(assert (x286 x76))
(assert (not (= (x270 x412 5) 1168994686)))
(assert (x286 x471))
(assert (not (= 1168994686 (x270 x611 1))))
(assert (not (= (x270 x107 6) 70124239)))
(assert (not (= (x270 x107 6) 170141183460469231731687303715884105727)))
(assert (x286 x186))
(assert (not (= (x270 x539 5) 18446744073709551616)))
(assert (x286 x169))
(assert (x286 x840))
(assert (not (= 480214969 (x270 x539 5))))
(assert (not (= (x270 x568 5) 20282409603651670423947251286015)))
(assert (x286 x267))
(assert (not (= 65535 (x270 x700 6))))
(assert (x286 x650))
(assert (= (=> (and (<= 0 x219) (>= x113 0) x218 (= (x736 274184521717934524641157099916833587233) x186) (>= 18446744073709551615 x200) (<= x534 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1208925819614629174706175 x849) (= false x501) (>= x5 0) (= (x215 256) x830) (>= 1208925819614629174706175 x403) (= x848 (x215 192)) (<= x626 18446744073709551615) (not (= x3 4062139261)) (= x374 950698303) (= x460 (x215 160)) (= x611 x521) (<= 0 x861) (>= 1461501637330902918203684832716283019655932542975 x726) (<= 0 x293) (>= x96 0) (= (x324 274184521717934524641157099916833587233) x338) (= 0 x837) (not (= 3257672857 x3)) (< 0 x90) (= 4 x37) (>= x801 0) (>= x632 0) (>= 20282409603651670423947251286015 x396) (= x772 (> (x736 274184521717934524641157099916833587231) 0)) (= x218 (> (x736 274184521717934524641157099916833587233) 0)) (>= x648 0) (= 98097205 x575) (not (> 2362581449 x3)) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x736 274184521717934524641157099916833587211) x90) (<= x685 20282409603651670423947251286015) (>= 1099511627775 x861) (= (x215 192) x258) (<= 0 x201) (>= x265 0) (= (x215 224) x7) (= 4 x37) (>= x823 0) (<= 0 x534) (<= x648 18446744073709551615) (= (x270 x611 1) x447) (<= 0 x618) (= x515 x108) (> 20282409603651670423947251286016 x703) (= false x385) (<= x801 20282409603651670423947251286015) (>= 65535 x236) (>= x626 0) (<= 0 x841) (>= 1461501637330902918203684832716283019655932542975 x219) (>= 20282409603651670423947251286015 x703) (<= 0 x294) (>= x706 0) (<= x237 18446744073709551615) (= x95 (> (x736 274184521717934524641157099916833587235) 0)) (<= x632 18446744073709551615) (= x511 x502) (<= x502 1461501637330902918203684832716283019655932542975) (<= 0 x726) (>= x227 0) x768 (or (and (= (x226 x290) x327) (= x642 (x85 (- 0 x810))) x887 (= x710 x802) (= x710 (x85 (- 0 x327))) (= (x321 20282409603651670423947251286015 x642) x551) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x551 x200)) (= (x321 20282409603651670423947251286015 x290) x229) (<= x200 18446744073709551615) (not (= x327 115792089237316195423570985008687907853269984655499359237631748795939503996928)) (> 18446744073709551616 x200) (= x387 x290) (= x387 (* x551 x200)) (not (or (> x642 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 0 x642) (= (<= x642 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (<= 0 x200) (not (< 10141204801825835211973625643007 x229)) (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 x810))) (and (= (x321 20282409603651670423947251286015 x518) x609) (= x388 x518) (>= 18446744073709551615 x5) (not (< 10141204801825835211973625643007 x609)) (not x887) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x5 x889)) (= x802 x518) (= (* x889 x5) x388) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x810)) (< x810 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x810))) (= x889 (x321 20282409603651670423947251286015 x810)) (>= x5 0) (> 18446744073709551616 x5))) (>= 255 x152) (= (> (x736 274184521717934524641157099916833587227) 0) x328) (= (x785 x447) x534) (= 274184521717934524641157099916833587233 x708) (<= x511 1461501637330902918203684832716283019655932542975) (= (x226 x802) x463) (< x374 1168994686) (<= 0 x326) (>= 1208925819614629174706175 x265) (>= x403 0) (<= 0 x685) (>= x265 0) (>= x687 0) (<= 0 x833) (= x546 x219) x772 x166 (<= x227 255) (>= 18446744073709551615 x418) (<= 0 x849) (>= 20282409603651670423947251286015 x833) (>= 1208925819614629174706175 x403) (= (x901 x74) x703) (= (x215 160) x679) (<= x618 1461501637330902918203684832716283019655932542975) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 1208925819614629174706176 x403) (<= x294 18446744073709551615) (= (x87 x613) x236) (= (x215 128) x212) (= x359 false) (> 1208925819614629174706176 x265) (>= 1461501637330902918203684832716283019655932542975 x706) (<= 0 x200) (= x542 115197700812830431890159100217698998050002284567939525164234024451216521560064) (= x337 (x324 274184521717934524641157099916833587223)) (<= 0 x153) x328 (= x515 x618) (= (x324 274184521717934524641157099916833587211) x96) (<= 0 x703) (>= 18446744073709551615 x5) (= x688 (> (x736 274184521717934524641157099916833587223) 0)) (>= x418 0) (= x726 x73) (= (x324 274184521717934524641157099916833587235) x326) (= x684 (x215 224)) (>= 1208925819614629174706175 x265) (= x166 (< 0 (x736 274184521717934524641157099916833587211))) (not (> 950698303 x374)) (= x706 x73) (<= 0 x237) (< x374 2068668150) (>= 1208925819614629174706175 x293) (<= 0 x337) x688 (= x28 (x215 256)) (<= x841 1461501637330902918203684832716283019655932542975) (>= x403 0) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x810)) (< x810 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x810)) x887) (<= 0 x511) (<= x397 255) (= (x215 128) x264) (<= 0 x236) (= x3 4272920204) (< 0 x186) (<= 0 x283) (<= 0 x623) (= (x324 274184521717934524641157099916833587231) x283) (not (= 2362581449 x3)) (< x236 65536) (not (> 4 x37)) (>= x152 0) (>= 255 x687) (>= 1099511627775 x153) (= x768 (< 0 (x736 274184521717934524641157099916833587244))) (= x138 x837) (>= x396 0) x95 (<= 0 x338) (= (x324 274184521717934524641157099916833587227) x823) (<= 0 x397) (= x838 false) (= (x226 x703) x810) (= 4 x893) (= 128 x659) (> 1110625635 x374) (= (x270 x502 5) x74) (= (x270 x502 5) x613) (= (x324 274184521717934524641157099916833587244) x201) (= 274184521717934524641157099916833587233 x129)) x482) x587))
(assert (not (= (x270 x611 1) 3257672857)))
(assert (x813 x239 x635))
(assert (not (= 4272920204 (x270 x700 6))))
(assert (x286 x518))
(assert (x520 x776))
(assert (not (= 5 (x270 x611 1))))
(assert (=> (= (x270 x412 5) (x270 x539 5)) (= x412 x539)))
(assert (not (= (x270 x502 5) 1110625635)))
(assert (x886 x6 x457))
(assert (x286 x667))
(assert (x286 x915))
(assert (not (= (x270 x155 x622) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x286 x210))
(assert (=> (= (x270 x155 x622) (x270 x502 5)) (and (= x502 x155) (= x622 5))))
(assert (not (= (x270 x107 6) 950698303)))
(assert (x286 x20))
(assert (not (= 340282366920938463463374607431768211456 (x270 x412 5))))
(assert (x286 x675))
(assert (not (= (x270 x502 5) 274184521717934524641157099916833587231)))
(assert (x561 x811 x864))
(assert (not (= (x270 x412 5) 65536)))
(assert (x286 x625))
(assert (not (= (x270 x61 x604) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 480214969 (x270 x107 6))))
(assert (x286 x264))
(assert (= x762 (=> (and (not x765) (= (x321 255 x855) x573) (= x765 (> x573 1)) (= x698 x75)) x367)))
(assert (=> (> (+ 10000 1) x107) (not (= x107 (x270 x502 5)))))
(assert (not (= (x270 x412 5) 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x286 x50))
(assert (x286 x800))
(assert (=> (= (x270 x412 5) (x270 x155 x622)) (and (= x622 5) (= x155 x412))))
(assert (not (= 98097205 (x270 x412 5))))
(assert (x286 x451))
(assert (x286 x830))
(assert (x286 x175))
(assert (x149 x539))
(assert (=> (= (x270 x700 6) (x270 x155 x622)) (and (= x155 x700) (= x622 6))))
(assert (not (= (x270 x611 1) 20282409603651670423947251286015)))
(assert (x520 x536))
(assert (not (= (x270 x568 5) 20282409603651670423947251286016)))
(assert (x286 x642))
(assert (x286 x354))
(assert (not (= (x270 x61 x604) 4272920204)))
(assert (not (= (x270 x412 5) (x270 x700 6))))
(assert (not (= (x270 x107 6) 18446744073709551616)))
(assert (not (= (x270 x502 5) 1168994686)))
(assert (not (= (x270 x107 6) (x270 x412 5))))
(assert (x286 x193))
(assert (=> (> (+ 10000 1) x539) (not (= (x270 x502 5) x539))))
(assert (not (= (x270 x502 5) 274184521717934524641157099916833587235)))
(assert (x286 x183))
(assert (x286 x302))
(assert (=> (< (- x61 1) 10000) (not (= x61 (x270 x611 1)))))
(assert (x520 x360))
(assert (not (= (x270 x107 6) 3257672857)))
(assert (x286 x476))
(assert (not (= 2362581449 (x270 x568 5))))
(assert (x286 x51))
(assert (x286 x24))
(assert (x286 x274))
(assert (x286 x133))
(assert (x149 x622))
(assert (x419 x588 x4))
(assert (x286 x816))
(assert (=> (< (- x61 1) 10000) (not (= (x270 x700 6) x61))))
(assert (x286 x602))
(assert (x286 x597))
(assert (x286 x734))
(assert (x520 x767))
(assert (x520 x407))
(assert (x286 x309))
(assert (x286 x386))
(assert (x286 x131))
(assert (x286 x492))
(assert (=> (< (- x61 1) 10000) (not (= x61 (x270 x412 5)))))
(assert (x520 x852))
(assert (not (= (x270 x61 x604) 274184521717934524641157099916833587231)))
(assert (not (= 65535 (x270 x61 x604))))
(assert (not (= 274184521717934524641157099916833587244 (x270 x568 5))))
(assert (x520 x464))
(assert (not (= (x270 x61 x604) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 274184521717934524641157099916833587227 (x270 x155 x622))))
(assert (=> (< (- x155 1) 10000) (not (= (x270 x539 5) x155))))
(assert (x886 x290 x172))
(assert (=> (> (+ 10000 1) x155) (not (= (x270 x107 6) x155))))
(assert (not (= (x270 x611 1) (x270 x539 5))))
(assert (=> (< (- x700 1) 10000) (not (= (x270 x539 5) x700))))
(assert (x520 65535))
(assert (x286 x538))
(assert (not (= 1208925819614629174706175 (x270 x568 5))))
(assert (x520 x277))
(assert (x286 x722))
(assert (x286 x142))
(assert (= true x544))
(assert (x286 x260))
(assert (not (= 274184521717934524641157099916833587227 (x270 x502 5))))
(assert (x286 x694))
(assert (x286 x151))
(assert (x286 x361))
(assert (x286 x571))
(assert (x520 20282409603651670423947251286015))
(assert (x286 x208))
(assert (x286 x849))
(assert (not (= 274184521717934524641157099916833587231 (x270 x611 1))))
(assert (x286 x537))
(assert (x286 x639))
(assert (= (x427 x557 192) (- (/ x557 6277101735386680763835789423207666416102355444464034512896) (uninterp_frac x557 6277101735386680763835789423207666416102355444464034512896))))
(assert (x286 x552))
(assert (x520 x582))
(assert (x286 x374))
(assert (x286 x211))
(assert (not (= 274184521717934524641157099916833587233 (x270 x502 5))))
(assert (x298 x420 x652))
(assert (not (= (x270 x611 1) 340282366920938463463374607431768211456)))
(assert (x670 x557 x780))
(assert (x873 x703))
(assert (x520 x845))
(assert (not (= (x270 x155 x622) 2068668150)))
(assert (=> (= (x270 x107 6) (x270 x700 6)) (= x700 x107)))
(assert (not (= (x270 x412 5) 20282409603651670423947251286015)))
(assert (x286 x287))
(assert (x286 x654))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x61 x604))))
(assert (x286 x825))
(assert (x286 x596))
(assert (x286 x648))
(assert (=> (< (- x412 1) 10000) (not (= x412 (x270 x155 x622)))))
(assert (x286 x83))
(assert (not (= 950698303 (x270 x502 5))))
(assert (x286 x542))
(assert (x286 x605))
(assert (not (= 274184521717934524641157099916833587233 (x270 x412 5))))
(assert (x286 x534))
(assert (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 (x270 x155 x622))))
(assert (x286 x761))
(assert (not (= (x270 x61 x604) 1208925819614629174706176)))
(assert (x286 x196))
(assert (x520 x6))
(assert (x886 x479 x755))
(assert (x286 x397))
(assert (x286 x673))
(assert (=> (< (- x568 1) 10000) (not (= x568 (x270 x155 x622)))))
(assert (not (= 10141204801825835211973625643007 (x270 x155 x622))))
(assert (not (= 1208925819614629174706175 (x270 x155 x622))))
(assert (not (= 950698303 (x270 x568 5))))
(assert (not (= 2362581449 (x270 x700 6))))
(assert (=> (> (+ 10000 1) x155) (not (= x155 (x270 x568 5)))))
(assert (x286 x770))
(assert (=> (> (+ 10000 1) x155) (not (= (x270 x61 x604) x155))))
(assert (x520 x732))
(assert (x286 x371))
(assert (x286 x75))
(assert (x286 x345))
(assert (x520 x290))
(assert (x286 x841))
(assert (x286 x39))
(assert (x286 x317))
(assert (x160 x94 x581))
(assert (x520 x250))
(assert (x520 x821))
(assert (x520 x53))
(assert (x286 x66))
(assert (x286 x201))
(assert (x298 x277 x381))
(assert (x286 x180))
(assert (x286 x1))
(assert (not (= 1 (x270 x155 x622))))
(assert (x286 x129))
(assert (not (= (x270 x539 5) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x270 x611 1))))
(assert (x286 x433))
(assert (x286 x809))
(assert (not (= 4062139261 (x270 x611 1))))
(assert (not (= (x270 x700 6) (x270 x611 1))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x270 x700 6))))
(assert (x286 x684))
(assert (not (= (x270 x502 5) 480214969)))
(assert (x286 x685))
(assert (not (= (x270 x107 6) 274184521717934524641157099916833587235)))
(assert (not (= (x270 x61 x604) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (x286 x844))
(assert (x561 x65 x845))
(assert (x286 x423))
(assert (x286 x188))
(assert (not (= (x270 x502 5) 1099511627775)))
(assert (=> (< (- x412 1) 10000) (not (= x412 (x270 x502 5)))))
(assert (not (= 70124239 (x270 x502 5))))
(assert (not (= 5 (x270 x539 5))))
(assert (not (= 10141204801825835211973625643007 (x270 x61 x604))))
(assert (x286 x560))
(assert (x637 x829 x19))
(assert (not (= (x270 x611 1) 115792089237316195423570985008687907853269984655499359237631748795939503996928)))
(assert (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 (x270 x700 6))))
(assert (x286 x295))
(assert (not (= (x270 x568 5) 18446744073709551616)))
(assert (not (= 340282366920938463463374607431768211456 (x270 x502 5))))
(assert (not (= 6 (x270 x61 x604))))
(assert (= true x13))
(assert (x286 x222))
(assert (x286 x631))
(assert (x561 x582 x852))
(assert (=> (= (x270 x61 x604) (x270 x539 5)) (and (= x539 x61) (= x604 5))))
(assert (not (= (x270 x412 5) (x270 x611 1))))
(assert (x520 x281))
(assert (not (= 274184521717934524641157099916833587244 (x270 x502 5))))
(assert (not (= 65535 (x270 x107 6))))
(assert (x286 x600))
(assert (not (= 204737060 (x270 x539 5))))
(assert (x286 x187))
(assert (x286 x514))
(assert (x286 x398))
(assert (not (= (x270 x107 6) 274184521717934524641157099916833587223)))
(assert (x286 x37))
(assert (x286 x681))
(assert (not (= (x270 x568 5) (x270 x107 6))))
(assert (x286 x810))
(assert (x758 x250))
(assert (x286 x651))
(assert (x520 x855))
(assert (=> (> (+ 10000 1) x107) (not (= (x270 x700 6) x107))))
(assert (x286 x725))
(assert (x886 x732 x106))
(assert (x286 x73))
(assert (x520 x661))
(assert (x286 x752))
(assert (not (= (x270 x700 6) (x270 x539 5))))
(assert (x561 x263 x432))
(assert (x520 x38))
(assert (=> (< (- x611 1) 10000) (not (= x611 (x270 x502 5)))))
(assert (not (= (x270 x539 5) 340282366920938463463374607431768211455)))
(assert (= (and x120 x778) x289))
(assert (not (= (x270 x539 5) 1208925819614629174706175)))
(assert (not (= (x270 x568 5) (x270 x611 1))))
(assert (x286 x392))
(assert (x286 x464))
(assert (=> (> (+ 10000 1) x611) (not (= x611 (x270 x412 5)))))
(assert (x561 x443 x317))
(assert (not (= 3257672857 (x270 x412 5))))
(assert (not (= 170141183460469231731687303715884105727 (x270 x611 1))))
(assert (x286 x633))
(assert (not (= (x270 x412 5) 2068668150)))
(assert (=> (> (+ 10000 1) x107) (not (= x107 (x270 x155 x622)))))
(assert (=> (= (x270 x61 x604) (x270 x155 x622)) (and (= x61 x155) (= x622 x604))))
(assert (x286 x34))
(assert (not (= 20282409603651670423947251286016 (x270 x502 5))))
(assert (not (= 274184521717934524641157099916833587227 (x270 x61 x604))))
(assert (x286 x209))
(assert (not (= 5 (x270 x412 5))))
(assert (x286 x907))
(assert (x286 x236))
(assert (x286 x265))
(assert (x520 x490))
(assert (x286 x777))
(assert (x286 x403))
(assert (not (= 2068668150 (x270 x107 6))))
(assert (x286 x630))
(assert (x286 x706))
(assert (x286 x806))
(assert (not (= (x270 x107 6) 340282366920938463463374607431768211456)))
(assert (x286 x441))
(assert (x520 x479))
(assert (= (x427 x191 168) (- (/ x191 374144419156711147060143317175368453031918731001856) (uninterp_frac x191 374144419156711147060143317175368453031918731001856))))
(assert (x286 x415))
(assert (not (= (x270 x502 5) 274184521717934524641157099916833587211)))
(assert (x149 x412))
(assert (not (= (x270 x700 6) 11269569)))
(assert (not (= (x270 x611 1) 4272920204)))
(assert (x298 x569 x171))
(assert (x886 x724 x647))
(assert (x286 x7))
(assert (x286 x812))
(assert (x286 x833))
(assert (x520 x680))
(assert (=> (< (- x568 1) 10000) (not (= (x270 x61 x604) x568))))
(assert (x286 x191))
(assert (x286 x802))
(assert (not (= (x270 x61 x604) 340282366920938463463374607431768211455)))
(assert (x286 x281))
(assert (x286 x294))
(assert (not (= 20282409603651670423947251286016 (x270 x700 6))))
(assert (not (= (x270 x107 6) 6)))
(assert (x286 x306))
(assert (x286 x6))
(assert (x286 x28))
(assert (not (= 274184521717934524641157099916833587231 (x270 x700 6))))
(assert (=> (< (- x61 1) 10000) (not (= x61 (x270 x539 5)))))
(assert (x286 x645))
(assert (x286 x320))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587223)))
(assert (not (= (x270 x107 6) (x270 x611 1))))
(assert (= (and (not x850) x331) x194))
(assert (x286 x352))
(assert (x286 x204))
(assert (x286 x510))
(assert (x149 x568))
(assert (x286 x360))
(assert (x298 x179 x228))
(assert (= (x427 x629 1) (- (/ x629 2) (uninterp_frac x629 2))))
(assert (x286 x290))
(assert (x286 x699))
(assert (x286 x61))
(assert (x670 x787 x144))
(assert (not (= (x270 x502 5) 2362581449)))
(assert (=> (< (- x539 1) 10000) (not (= x539 (x270 x700 6)))))
(assert (x286 x35))
(assert (=> (> (+ 10000 1) x502) (not (= (x270 x61 x604) x502))))
(assert (x520 255))
(assert (x286 x390))
(assert (x873 x732))
(assert (not (= 274184521717934524641157099916833587211 (x270 x155 x622))))
(assert (x286 x787))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x155 x622))))
(assert (x160 x463 x523))
(assert (= (=> (= x795 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32) (and (< x32 0) (= (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (and (=> (and (= x466 1) (not x795)) x269) (=> (and (= (< 0 x316) x547) (= x674 (x321 65535 x661)) (= (x321 1461501637330902918203684832716283019655932542975 x557) x79) (= x661 (x427 x557 192)) (or (and (= 1 x811) x547 (= x864 (ite (< x316 32) 1 0)) (or (and (not x197) (= (x764 10 x316) x902)) (and x197 (= x902 x320) (= x40 (- (/ 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x451))) (not (> x907 x40)) (or (and (= 1 x907) (= 10 x451) (not x223)) (and (= (> x725 1) x81) (= (ite x892 1 10) x907) (= 100 x451) x223 (= (x321 1 x316) x187) (not x81) (= x892 (= 0 x187)) (= (x427 x316 1) x725))) (= x223 (> x316 1)) (= (uninterp_mod (* x451 x907) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x320))) (= x645 (ite (< x316 78) 1 0)) (= (= 0 (x896 x592 x473)) x197) (= 1 x267) (= x473 (x321 x811 x864)) (= x592 (x321 x267 x645))) (and (not x547) (= x902 1))) (= (x321 255 x821) x316) (= (x427 x557 176) x817) (= x821 (x427 x191 160)) (= x241 (x321 65535 x344)) (= x384 (x321 255 x855)) (= (x427 x557 160) x344) (= x55 (x321 1461501637330902918203684832716283019655932542975 x191)) (= (x321 65535 x817) x552) x795 (< 0 x384)) x347))) x109))
(assert (not (= 274184521717934524641157099916833587235 (x270 x412 5))))
(assert (not (= (x270 x568 5) 4062139261)))
(assert (x820 x822))
(assert (x286 x646))
(assert (x286 x858))
(assert (not (= (x270 x700 6) 10141204801825835211973625643007)))
(assert (= (or (and x898 x525) (and x585 x91)) x658))
(assert (x286 x583))
(assert (x520 x569))
(assert (x286 x326))
(assert (=> (> (+ 10000 1) x539) (not (= x539 (x270 x611 1)))))
(assert (= (=> (and (= (not x26) x346) (= (x321 x767 x607) x797) (= x733 (* x34 x141)) (= x733 x770) (= (x85 (- 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32)) x583) (= (ite (not x31) 1 0) x67) (= x913 (x918 640)) (= x34 (uninterp_mod (* x33 x307) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x307 (x321 340282366920938463463374607431768211455 x867)) (= x354 (x85 (- 57896044618658097711785492504343953926634992332820282019728792003956564819968 x32))) (not (= 0 x909)) (= x628 x746) (= (x666 (+ x32 x770)) x628) (= x767 (ite (or (and (< x32 0) (= true (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32)) 1 0)) (>= 1208925819614629174706175 x112) (= 0 x180) (= (ite (or (and (> x583 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x770 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x583 x770) (= (<= x583 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x770)))) 1 0) x169) (= x607 (ite (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x354) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x770)) (< x770 x354)) (and (> x770 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x354))) 1 0)) (= x867 (x275 832)) (>= 1208925819614629174706175 x105) (not (ite x346 x346 (and (> x867 170141183460469231731687303715884105727) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x867) true)))) (= (x321 x67 x169) x180) (not (> x770 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32) (and (> 0 x32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32)))) x31) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x34 x141)) (not (or (> x781 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x781 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 160 x781)))) (= x141 (x321 18446744073709551615 x179)) (= (x275 928) x112) (= (x275 800) x105) (= x797 0) (= (x469 672) x179) (= x26 (and (= (<= x867 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 0 x867)))) x282) x884))
(assert (not (= 1208925819614629174706176 (x270 x568 5))))
(assert (not (= (x270 x611 1) 274184521717934524641157099916833587244)))
(assert (not (= 1110625635 (x270 x611 1))))
(assert (x286 x857))
(assert (x286 x539))
(assert (x520 x46))
(assert (x286 x250))
(assert (not (= 274184521717934524641157099916833587244 (x270 x155 x622))))
(assert (not (= 340282366920938463463374607431768211455 (x270 x107 6))))
(assert (x286 x60))
(assert (not (= (x270 x502 5) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (=> (> (+ 10000 1) x700) (not (= x700 (x270 x61 x604)))))
(assert (not (= 1 (x270 x539 5))))
(assert (x520 x213))
(assert (not (= 65536 (x270 x107 6))))
(assert (x286 x426))
(assert (x286 x141))
(assert (x286 x121))
(assert (not (= 274184521717934524641157099916833587227 (x270 x107 6))))
(assert (x286 x405))
(assert (not (= (x270 x700 6) 274184521717934524641157099916833587227)))
(assert (=> (< (- x539 1) 10000) (not (= (x270 x61 x604) x539))))
(assert (x286 x366))
(assert (x286 x357))
(assert (x813 x536 x846))
(assert (x286 x845))
(assert (x286 x217))
(assert (x286 x536))
(assert (= (=> (and (= x672 (not (= x142 0))) (= (x321 1 x588) x142)) (and (=> (and (not x672) (= x208 x75)) x762) (=> x672 x862))) x477))
(assert (x873 x173))
(assert (x286 x900))
(assert (not (= 5 (x270 x107 6))))
(assert (x873 x290))
(assert (not (= 65535 (x270 x611 1))))
(assert (x520 x811))
(assert (x520 x810))
(assert (not (= (x270 x568 5) 170141183460469231731687303715884105727)))
(assert (= x691 x516))
(assert (=> (< (- x107 1) 10000) (not (= x107 (x270 x61 x604)))))
(assert (x286 x102))
(assert (x286 x874))
(assert (x286 x313))
(assert (not (= (x270 x412 5) 204737060)))
(assert (=> (< (- x568 1) 10000) (not (= (x270 x568 5) x568))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x270 x611 1))))
(assert (=> (< (- x502 1) 10000) (not (= x502 (x270 x539 5)))))
(assert (not (= 65535 (x270 x502 5))))
(assert (not (= (x270 x611 1) 274184521717934524641157099916833587223)))
(assert (=> (< (- x107 1) 10000) (not (= (x270 x568 5) x107))))
(assert (not (= (x270 x700 6) 20282409603651670423947251286015)))
(assert (=> (> (+ 10000 1) x502) (not (= (x270 x412 5) x502))))
(assert (= (- (/ x316 2) (uninterp_frac x316 2)) (x427 x316 1)))
(assert (=> (> (+ 10000 1) x700) (not (= (x270 x700 6) x700))))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x270 x539 5))))
(assert (not (= (x270 x700 6) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (not (= (x270 x412 5) 1)))
(assert (x520 x191))
(assert (x286 x843))
(assert (x286 x55))
(assert (x813 x357 x285))
(assert (not (= 65536 (x270 x61 x604))))
(assert (x286 x316))
(assert (x286 x391))
(assert (not (= (x270 x700 6) 1168994686)))
(assert (not (= (x270 x61 x604) 1110625635)))
(assert (=> (> (+ 10000 1) x568) (not (= x568 (x270 x700 6)))))
(assert (x286 x207))
(assert (not (= (x270 x568 5) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x286 x146))
(assert (=> (< (- x412 1) 10000) (not (= (x270 x61 x604) x412))))
(assert (x286 x439))
(assert (x286 x774))
(assert (=> (= (x270 x568 5) (x270 x412 5)) (= x568 x412)))
(assert (x286 x63))
(assert (x286 x569))
(assert (not (= (x270 x611 1) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (not (= 1 (x270 x61 x604))))
(assert (=> (< (- x568 1) 10000) (not (= x568 (x270 x412 5)))))
(assert (x286 x3))
(assert (not (= (x270 x539 5) 170141183460469231731687303715884105727)))
(assert (x286 x674))
(assert (=> (> (+ 10000 1) x502) (not (= (x270 x155 x622) x502))))
(assert (x286 x902))
(assert (x160 x250 x486))
(assert (=> (> (+ 10000 1) x568) (not (= x568 (x270 x539 5)))))
(assert (x286 x384))
(assert (not (= 98097205 (x270 x539 5))))
(assert (x286 x913))
(assert (x286 x834))
(assert (not (= (x270 x568 5) 65536)))
(assert (not (= 274184521717934524641157099916833587211 (x270 x61 x604))))
(assert (x886 x518 x455))
(assert (x286 x789))
(assert (=> (> (+ 10000 1) x611) (not (= x611 (x270 x568 5)))))
(assert (x298 x734 x414))
(assert (x286 x811))
(assert (x149 x61))
(assert (x286 x822))
(assert (=> (< (- x611 1) 10000) (not (= x611 (x270 x539 5)))))
(assert (x520 x629))
(assert (x286 x396))
(assert (= (and x248 x657) x832))
(assert (x286 x59))
(assert (x286 x792))
(assert (x286 x443))
(assert (x286 x375))
(assert (not (= 1208925819614629174706175 (x270 x61 x604))))
(assert (x286 x337))
(assert (not (= (x270 x539 5) 4272920204)))
(assert (x298 x407 x664))
(assert (x520 x510))
(assert (x286 x213))
(assert (not (= (x270 x155 x622) 274184521717934524641157099916833587235)))
(assert (x286 x307))
(assert (=> (> (+ 10000 1) x611) (not (= (x270 x155 x622) x611))))
(assert (x286 x610))
(assert (x286 x425))
(assert (not (= 1110625635 (x270 x539 5))))
(assert (not (= (x270 x155 x622) 65535)))
(assert (x520 340282366920938463463374607431768211455))
(assert (not (= 98097205 (x270 x155 x622))))
(assert (not (= (x270 x107 6) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x286 x461))
(assert (x286 x93))
(assert (x286 x340))
(assert (x520 x179))
(assert (=> (> (+ 10000 1) x61) (not (= x61 (x270 x568 5)))))
(assert (not (= (x270 x568 5) 3257672857)))
(assert (x563 x608 x439))
(assert (= (- (/ x557 1461501637330902918203684832716283019655932542976) (uninterp_frac x557 1461501637330902918203684832716283019655932542976)) (x427 x557 160)))
(assert (not (= (x270 x502 5) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x270 x155 x622))))
(assert (=> (< (- x107 1) 10000) (not (= (x270 x539 5) x107))))
(assert (not (= (x270 x611 1) 98097205)))
(assert (not (= 18446744073709551615 (x270 x700 6))))
(assert (x286 x189))
(assert (x520 x703))
(assert (not (= 4062139261 (x270 x155 x622))))
(assert (not (= (x270 x61 x604) 1099511627775)))
(assert (not (= (x270 x700 6) 340282366920938463463374607431768211456)))
(assert (x286 x214))
(assert (x286 x46))
(assert (not (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 (x270 x700 6))))
(assert (x286 x179))
(assert (x286 x147))
(assert (x286 x724))
(assert (x286 x708))
(assert (not (= 274184521717934524641157099916833587211 (x270 x107 6))))
(assert (x160 x92 x325))
(assert (not (= (x270 x412 5) 1208925819614629174706175)))
(assert (x286 x782))
(assert (not (= 3257672857 (x270 x61 x604))))
(assert (x286 x11))
(assert (x286 x720))
(assert (= (=> (and (= (not x895) x190) (= x895 (= 0 x466)) (= (ite x190 1 0) x678)) (=> (and (= x108 x600) (< x588 65536) (= (x870 192) x306) (= x653 x92) (> 1208925819614629174706176 x403) (= x188 640) (< 0 x676) (= x857 115197700812830431890159100217698998050002284567939525164234024451216521560064) (= 4272920204 x555) (= x720 x360) (= x761 (x321 1461501637330902918203684832716283019655932542975 x191)) (= x426 (x870 160)) (= x14 (x321 255 x855)) (= x217 128) (= x680 x738) (= (x321 255 x281) x629) (= x330 x138) (= true (<= x118 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= x386 (x870 256)) (= x492 x92) (= (x321 255 x855) x181) (<= x588 65535) (not (or (> x610 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x610) true) (< x610 128)))) (> x431 0) (= x840 (x321 1461501637330902918203684832716283019655932542975 x680)) (<= 0 x113) (<= x646 1461501637330902918203684832716283019655932542975) (<= x756 340282366920938463463374607431768211455) (= x680 x207) (= x574 (x270 x611 1)) x332 (<= x732 20282409603651670423947251286015) (< 0 x14) (= x568 x511) (= x610 (x85 (- x118 4))) (= x211 (x870 256)) (or (and (<= 0 x643) (= x428 (x270 x412 5)) (<= x643 65535) (= x760 (x321 255 x829)) (= x412 (x321 1461501637330902918203684832716283019655932542975 x360)) (= x643 (x87 x428)) (= x829 (x254 640)) (= x524 (x321 65535 x357)) (= x357 (x896 x643 x98)) (< x643 65536) x224 (= x98 (x185 1 x760))) (and (not x224) (= (ite (not x446) (= (x321 340282366920938463463374607431768211455 x92) 0) (not x446)) x422) (= x446 (= x204 0)) (or (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x185 1 x828)) x845) (= (x321 1461501637330902918203684832716283019655932542975 x360) x539) (= (x254 640) x464) x422 (= x800 (x321 x65 x845)) (>= x65 0) (>= 65535 x65) (= x828 (x321 255 x464)) (> 65536 x65) (= x65 (x87 x368)) (= (x270 x539 5) x368)) (not x422)) (= x204 (x321 340282366920938463463374607431768211455 x756)))) (= (x870 224) x27) (= x611 x597) (= x505 4) (= (< 0 x629) x903) (>= x732 0) (= x724 (x226 x732)) (= 0 x827) (<= 0 x774) (= x756 x313) (= (x427 x557 192) x239) (> 1168994686 x682) (> 204737060 x699) (not (= x699 70124239)) (= x431 (x736 274184521717934524641157099916833587233)) (= x250 (x226 x173)) (= x73 x794) (= x766 (x870 128)) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) (or (and (= (x226 x479) x175) (= x362 (x321 20282409603651670423947251286015 x479)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x533 x200)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x490) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x490) true) (> 0 x490)))) (not (= x724 115792089237316195423570985008687907853269984655499359237631748795939503996928)) (not (> x362 10141204801825835211973625643007)) x23 (>= 18446744073709551615 x200) (>= x200 0) (= x479 x697) (= x697 (* x533 x200)) (< x200 18446744073709551616) (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 x175)) (= x83 x173) (= (x85 (- 0 x175)) x83) (= (x85 (- 0 x724)) x490) (= (x321 20282409603651670423947251286015 x490) x533)) (and (not (< 10141204801825835211973625643007 x60)) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x724)) (< x724 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x724))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x745 x5)) (<= x5 18446744073709551615) (= (x321 20282409603651670423947251286015 x724) x745) (<= 0 x5) (= x6 x15) (= x6 x173) (not x23) (= x15 (* x5 x745)) (< x5 18446744073709551616) (= x60 (x321 20282409603651670423947251286015 x6)))) (= (x427 x191 168) x569) (not (= x555 3257672857)) (= (x321 18446744073709551615 x569) x209) (< x682 2068668150) (<= 0 x623) (< x732 20282409603651670423947251286016) (= x231 x1) (>= 1461501637330902918203684832716283019655932542975 x231) (= x809 (x321 65535 x789)) (= x281 (x427 x191 160)) (= x536 (x427 x557 160)) (= (x901 x744) x732) (>= x425 0) (= x673 x600) (>= 1461501637330902918203684832716283019655932542975 x673) (>= 1461501637330902918203684832716283019655932542975 x680) (= x44 (x270 x568 5)) (< 0 x390) (= x750 x360) (<= 0 x588) (<= 0 x673) (= x756 x206) (>= x265 0) (= x390 (x736 274184521717934524641157099916833587211)) (>= 1461501637330902918203684832716283019655932542975 x568) (>= x646 0) (<= x425 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x80 x73) (not (= x555 2362581449)) (= x332 (not (= 0 x678))) (< x699 950698303) (>= 1461501637330902918203684832716283019655932542975 x794) (= x392 (x321 65535 x536)) (= x789 (x427 x557 176)) (>= 340282366920938463463374607431768211455 x92) (> x118 131) (= (x321 1461501637330902918203684832716283019655932542975 x681) x483) (= (x280 x44) x588) (= x350 (x321 1461501637330902918203684832716283019655932542975 x557)) (= (x870 160) x17) (< x699 2068668150) (> 480214969 x699) (= x681 (x786 672)) (>= x231 0) (not (= x699 11269569)) (or (and (= (ite (< x629 32) 1 0) x852) (= x334 (= 0 (x896 x822 x910))) (or (and (= (x764 10 x629) x277) (not x334)) (and (= x905 x277) (= x905 (uninterp_mod (* x649 x923) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< x514 x649)) (= x514 (- (/ 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923) (uninterp_frac 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923))) (= (> x629 1) x686) x334 (or (and (= x649 (ite x620 1 10)) (not x413) (= (x321 1 x629) x8) x686 (= 100 x923) (= x131 (x427 x629 1)) (= x413 (> x131 1)) (= x620 (= 0 x8))) (and (= 1 x649) (not x686) (= 10 x923))))) (= (x321 x776 x302) x822) (= 1 x776) (= x910 (x321 x582 x852)) (= (ite (< x629 78) 1 0) x302) (= 1 x582) x903) (and (= x277 1) (not x903))) (= x1 x108) (= x315 0) (= x744 (x270 x568 5)) (> x181 0) (>= x80 0) (= x425 (x785 x574)) (>= 1461501637330902918203684832716283019655932542975 x774) (not (> 4 x505)) (<= x360 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x80) (> 1110625635 x682) (= 950698303 x682) (= x699 98097205) (= (x321 65535 x239) x812) (= x23 (or (> x724 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x724 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x724))))) (= x757 640) (not (> 4 x118)) (>= 1208925819614629174706175 x403) (= x138 x827) (not (= 4062139261 x555)) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x321 340282366920938463463374607431768211455 x756) x792) (= 4 x505) (= (x870 192) x151) (>= 1208925819614629174706175 x265) (<= 0 x403) (< x265 1208925819614629174706176) (not (> 950698303 x682)) (= x584 (x870 128)) (>= x794 0) (= (ite (= x792 0) (not (= 0 (x321 340282366920938463463374607431768211455 x92))) (= x792 0)) x224) (not (< x555 2362581449)) (= 274184521717934524641157099916833587233 x146) (= (x870 224) x537) (= x330 0) (= (x321 18446744073709551615 x277) x82) (= x483 x840) (= x676 (x736 274184521717934524641157099916833587211)) (= 274184521717934524641157099916833587233 x722)) x127)) x269))
(assert (not (= (x270 x412 5) 4062139261)))
(assert (=> (< (- x61 1) 10000) (not (= x61 (x270 x155 x622)))))
(assert (not (= 18446744073709551615 (x270 x502 5))))
(assert (x286 x32))
(assert (not (= 274184521717934524641157099916833587235 (x270 x568 5))))
(assert (=> (< (- x700 1) 10000) (not (= (x270 x107 6) x700))))
(assert (not (= (x270 x61 x604) 274184521717934524641157099916833587223)))
(assert (x286 x626))
(assert (x286 x98))
(assert (=> (> (+ 10000 1) x502) (not (= (x270 x107 6) x502))))
(assert (x286 x134))
(assert (not (= 1099511627775 (x270 x412 5))))
(assert (x286 x350))
(assert (x286 x546))
(assert (=> (= (x270 x61 x604) (x270 x502 5)) (and (= x502 x61) (= 5 x604))))
(assert (x286 x807))
(assert (x286 x67))
(assert (not (= 2068668150 (x270 x502 5))))
(assert (not (= 4062139261 (x270 x539 5))))
(assert (not (= (x270 x539 5) 274184521717934524641157099916833587227)))
(assert (x813 x76 x300))
(assert (= x282 (=> (and (= x746 x375) (not x48) (= x48 (< 1 x816)) (= (x321 255 x855) x816)) x559)))
(assert (x670 x680 x301))
(assert (x286 x668))
(assert (x286 x543))
(assert (x286 x767))
(assert (x286 x327))
(assert (not (= (x270 x412 5) 20282409603651670423947251286016)))
(assert (not (= 2362581449 (x270 x107 6))))
(assert (x520 x787))
(assert (= x525 (and x795 x847)))
(assert (=> (> (+ 10000 1) x611) (not (= (x270 x61 x604) x611))))
(assert (x286 x338))
(assert (= x221 (or (and x850 x331) (and x638 x749))))
(assert (not (= (x270 x502 5) 1)))
(assert (= (=> (= x585 (= 274184521717934524641157099916833587233 x858)) (and (=> (not x585) x13) (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113) (not (= x560 3257672857)) (not (< x806 4)) (<= x265 1208925819614629174706175) (>= x121 0) (= (x690 224) x193) (= (x690 192) x602) (<= 0 x403) (= x909 1) (>= x265 0) (= 4 x806) (= x238 (x690 256)) (< x265 1208925819614629174706176) (= (x270 x611 1) x68) (= (x690 160) x621) (= 4272920204 x560) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121) (= x740 (x690 160)) (not (< x560 2362581449)) (not (= 2362581449 x560)) (> x630 0) (= 160 x781) (< x403 1208925819614629174706176) (= x806 4) (<= x403 1208925819614629174706175) (= x133 (x690 192)) (= x409 (x690 128)) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 4062139261 x560)) (= x416 (x690 128)) (= x705 (x690 256)) (= x603 (x690 224)) (= (x736 274184521717934524641157099916833587233) x630) (>= x113 0) (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 x50) (= x121 (x785 x68)) (<= 0 x623) x585) x884))) x662))
(assert (not (= 115197700812830431890159100217698998050002284567939525164234024451216521560064 (x270 x568 5))))
(assert (not (= (x270 x155 x622) 115197700812830431890159100217698998050002284567939525164234024451216521560064)))
(assert (x149 x604))
(assert (x286 x679))
(assert (not (= 115792089237316195423570985008687907853269984655499359237631748795939503996928 (x270 x412 5))))
(assert (not (= 274184521717934524641157099916833587233 (x270 x155 x622))))
(assert (not (= (x270 x568 5) 1168994686)))
(assert (x286 x618))
(assert (not (= (x270 x107 6) 1168994686)))
(assert (x149 x700))
(assert (x561 x67 x169))
(assert (not (= (x270 x502 5) 170141183460469231731687303715884105727)))
(assert (x286 x53))
(assert (=> (> (+ 10000 1) x700) (not (= x700 (x270 x412 5)))))
(assert (=> (= (x270 x61 x604) (x270 x412 5)) (and (= x61 x412) (= 5 x604))))
(assert (x520 x463))
(assert (not (= (x270 x700 6) (x270 x502 5))))
(assert (x286 x746))
(assert (not (= (x270 x107 6) 274184521717934524641157099916833587231)))
(assert (x286 x303))
(assert (x286 x779))
(assert (x286 x90))
(assert (not (= (x270 x107 6) 18446744073709551615)))
(check-sat)
